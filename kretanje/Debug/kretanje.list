
kretanje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005b98  08005b98  00015b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000007c  08005e8c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08005e8c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e80e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b5  00000000  00000000  0002e8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  00030f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176b8  00000000  00000000  00032618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000beb3  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a900  00000000  00000000  00055b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  000e0500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005b7c 	.word	0x08005b7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08005b7c 	.word	0x08005b7c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <I2C1_Init>:
/*
 * Standard mode (100kHz) on PB8 (SCL) and PB9 (SDA)
 * Configures GPIO pins, enables I2C1 clock, and sets required register values.
 */

void I2C1_Init(void) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // Enable I2C1 clock
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <I2C1_Init+0x104>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <I2C1_Init+0x104>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <I2C1_Init+0x104>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <I2C1_Init+0x104>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
	 * 			These bits are written by software to configure the output type of the I/O port.
	 * 			0: Output push-pull (reset state)
	 * 			1: Output open-drain
	 * **************************************************************************************************************************************************************** */
	/* Set PB8 and PB9 output type to open drain */
	GPIOB->OTYPER |= (1UL << 9); //'1'
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <I2C1_Init+0x108>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <I2C1_Init+0x108>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1UL << 8); //'1' the rest of the bits are by defaut '0' since the reset value is 0x0 for this registry
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <I2C1_Init+0x108>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <I2C1_Init+0x108>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6053      	str	r3, [r2, #4]

	/* Enable the pull-ups for PB8 and PB9 */
	GPIOB->PUPDR &= ~(1UL << 19); //'0' port 9
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <I2C1_Init+0x108>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <I2C1_Init+0x108>)
 8000bda:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000bde:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1UL << 18); //'1' port 9
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <I2C1_Init+0x108>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <I2C1_Init+0x108>)
 8000be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bea:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(1UL << 17); //'0' port 8
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <I2C1_Init+0x108>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <I2C1_Init+0x108>)
 8000bf2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bf6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1UL << 16); //'1' port 9
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <I2C1_Init+0x108>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ca8 <I2C1_Init+0x108>)
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	60d3      	str	r3, [r2, #12]

	/* Set alternate functions to AF4 */

	//PB9
	GPIOB->AFR[1] &= ~(1UL << 7); // '0'
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <I2C1_Init+0x108>)
 8000c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <I2C1_Init+0x108>)
 8000c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c0e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1UL << 6); //'1'
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <I2C1_Init+0x108>)
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <I2C1_Init+0x108>)
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1UL << 5); // '0'
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <I2C1_Init+0x108>)
 8000c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <I2C1_Init+0x108>)
 8000c22:	f023 0320 	bic.w	r3, r3, #32
 8000c26:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1UL << 4); // '0'
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <I2C1_Init+0x108>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <I2C1_Init+0x108>)
 8000c2e:	f023 0310 	bic.w	r3, r3, #16
 8000c32:	6253      	str	r3, [r2, #36]	; 0x24

	//PB8
	GPIOB->AFR[1] &= ~(1UL << 3); // '0'
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <I2C1_Init+0x108>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <I2C1_Init+0x108>)
 8000c3a:	f023 0308 	bic.w	r3, r3, #8
 8000c3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1UL << 2); //'1'
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <I2C1_Init+0x108>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <I2C1_Init+0x108>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1UL << 1); // '0'
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <I2C1_Init+0x108>)
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <I2C1_Init+0x108>)
 8000c52:	f023 0302 	bic.w	r3, r3, #2
 8000c56:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1UL << 0); // '0'
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <I2C1_Init+0x108>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <I2C1_Init+0x108>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	6253      	str	r3, [r2, #36]	; 0x24

	// I2C Control register 1 (I2C_CR1)	in RM(refference manual)
	I2C1->CR1 |= (1UL << 15); //Clears all settings and resets the I2C1 to its default state
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <I2C1_Init+0x10c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a10      	ldr	r2, [pc, #64]	; (8000cac <I2C1_Init+0x10c>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6e:	6013      	str	r3, [r2, #0]
	/* Revert from reset mode */
	I2C1->CR1 &= ~(1UL << 15); //Clears the reset bit, bringing I2C1 back to normal operation
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <I2C1_Init+0x10c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <I2C1_Init+0x10c>)
 8000c76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c7a:	6013      	str	r3, [r2, #0]
	 * 			0b110010: 50 MHz
	 * 			Higher than 0b101010: Not allowed
	 * 			So 0b(binary_representation_of_decimal Mhz)
	 * ***************************************************************************************************************************************************************** */
	/* Set the peripheral clock frequency */
	I2C1->CR2 = (1UL << 4); //'010000' 16Mhz
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <I2C1_Init+0x10c>)
 8000c7e:	2210      	movs	r2, #16
 8000c80:	605a      	str	r2, [r3, #4]
	I2C1->CCR = I2C_100Khz;  // Configure standard mode (100kHz)
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <I2C1_Init+0x10c>)
 8000c84:	2250      	movs	r2, #80	; 0x50
 8000c86:	61da      	str	r2, [r3, #28]
	//same as  I2C1->CCR = 80; Formula for Standard Mode CCR = PCLK1 / (2*I2C Clock speed)

	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //Configure maximum rise time
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <I2C1_Init+0x10c>)
 8000c8a:	2211      	movs	r2, #17
 8000c8c:	621a      	str	r2, [r3, #32]
	 PCLK1 Peripheral clock frequency APB1 clock
	 t_r = Max rise time in nanoseconds
	 Pull-up resistors and bus capacitance affect rise time
	 If rise time is too slow, communication fails or slows down
	 */
	I2C1->CR1 |= I2C_CR1_PE; // Enable I2C1
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <I2C1_Init+0x10c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <I2C1_Init+0x10c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40005400 	.word	0x40005400

08000cb0 <i2c1_BurstWrite>:

void i2c1_BurstWrite(char slave_address, char memory_address, int number_bytes_to_write, char *data)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60ba      	str	r2, [r7, #8]
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	73bb      	strb	r3, [r7, #14]
	 * Due to nature of embedded system
	 * */


	/* Wait until the bus is not busy */
	while(I2C1->SR2 & I2C_SR2__BUSY);
 8000cc2:	bf00      	nop
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f9      	bne.n	8000cc4 <i2c1_BurstWrite+0x14>

	/* Generate a START condition */
	I2C1->CR1 |=I2C_CR1__START;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]

	/* Wait for the START bit to be set */
	while(!(I2C1->SR1 & I2C_SR1__SB));
 8000cdc:	bf00      	nop
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <i2c1_BurstWrite+0x2e>

	/* Transmit the address of the slave and write */
	I2C1->DR = slave_address<<1;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	005a      	lsls	r2, r3, #1
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000cf0:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	while(!(I2C1->SR1 & I2C_SR1__ADDR));
 8000cf2:	bf00      	nop
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f9      	beq.n	8000cf4 <i2c1_BurstWrite+0x44>

	/* 	Clear the address flag */
	temporary=I2C1->SR2;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	613b      	str	r3, [r7, #16]

	/* Wait until the data registry/transmitter is empty */
	while(!(I2C1->SR1 & I2C_SR1__TxE));
 8000d06:	bf00      	nop
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f9      	beq.n	8000d08 <i2c1_BurstWrite+0x58>

	/* Send memory address */
	I2C1->DR=memory_address;
 8000d14:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	6113      	str	r3, [r2, #16]

	for(int i=0;i<number_bytes_to_write;i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e00f      	b.n	8000d40 <i2c1_BurstWrite+0x90>
	{
		/* Wait until transmitter is empty */
		while(!(I2C1->SR1 & I2C_SR1__TxE));
 8000d20:	bf00      	nop
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f9      	beq.n	8000d22 <i2c1_BurstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++; //Pointer arithmetic is generally faster in embedded C,alternative is we use a copy of array,data[i
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d38:	611a      	str	r2, [r3, #16]
	for(int i=0;i<number_bytes_to_write;i++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbeb      	blt.n	8000d20 <i2c1_BurstWrite+0x70>
		 * We are interested in bit no. 2 BTF: Byte transfer finished
		 * 		0: Data byte transfer not done
				1: Data byte transfer succeeded
	   ************************************************************************************************************************************************************************* */
	/* Wait until the transfer is finished */
	while(!(I2C1->SR1 & I2C_SR1__BTF));
 8000d48:	bf00      	nop
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f9      	beq.n	8000d4a <i2c1_BurstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= I2C_CR1__STOP;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <i2c1_BurstWrite+0xc0>)
 8000d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d60:	6013      	str	r3, [r2, #0]

}
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400

08000d74 <motor_init>:
#include <stdbool.h>
#include "biblioteka/pwm.h"
#include "stm32f4xx.h"
#include "biblioteka/motor.h"

void motor_init(){
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0);
 8000d78:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <motor_init+0xe8>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a37      	ldr	r2, [pc, #220]	; (8000e5c <motor_init+0xe8>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1);
 8000d84:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <motor_init+0xe8>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a34      	ldr	r2, [pc, #208]	; (8000e5c <motor_init+0xe8>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(0b11 << 8 * 2);
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <motor_init+0xec>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a32      	ldr	r2, [pc, #200]	; (8000e60 <motor_init+0xec>)
 8000d96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d9a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 8 * 2);  // DIR A8
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <motor_init+0xec>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <motor_init+0xec>)
 8000da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(0b11 << 10 * 2);
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <motor_init+0xf0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <motor_init+0xf0>)
 8000dae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000db2:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0b11 << 10 * 2);
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <motor_init+0xf0>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <motor_init+0xf0>)
 8000dba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000dbe:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0b01 << 10 * 2);  // FLT B10
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <motor_init+0xf0>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <motor_init+0xf0>)
 8000dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dca:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 10 * 2);
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <motor_init+0xec>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <motor_init+0xec>)
 8000dd2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000dd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 10 * 2);
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <motor_init+0xec>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <motor_init+0xec>)
 8000dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000de2:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (0b1 << 10); 			//SLP A10
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <motor_init+0xec>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <motor_init+0xec>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6153      	str	r3, [r2, #20]


	GPIOA->MODER &= ~(0b11 << 9 * 2);	// DIR A9
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <motor_init+0xec>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	; (8000e60 <motor_init+0xec>)
 8000df6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000dfa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 9 * 2);
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <motor_init+0xec>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <motor_init+0xec>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0b11 << 6 * 2);    // FLT A6
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <motor_init+0xec>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <motor_init+0xec>)
 8000e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e12:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0b11 << 6 * 2);
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <motor_init+0xec>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <motor_init+0xec>)
 8000e1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e1e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b01 << 6 * 2);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <motor_init+0xec>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <motor_init+0xec>)
 8000e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2a:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~(0b11 << 8 * 2);
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <motor_init+0xf0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <motor_init+0xf0>)
 8000e32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e36:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0b01 << 8 * 2); 	// SLP B8
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <motor_init+0xf0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <motor_init+0xf0>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (0b1 << 8);
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <motor_init+0xf0>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <motor_init+0xf0>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6153      	str	r3, [r2, #20]

}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400

08000e68 <inc_2_rad>:
static	float y;
static	float theta;
static	float v;
static	float w;

 float inc_2_rad(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	return ((2*M_PI)/(2048*4));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <inc_2_rad+0x18>)
 8000e6e:	ee07 3a90 	vmov	s15, r3
}
 8000e72:	eeb0 0a67 	vmov.f32	s0, s15
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	3a490fdb 	.word	0x3a490fdb

08000e84 <odometrija>:
	theta=0;
	v=0;
	w=0;
}

void odometrija(int dt){
 8000e84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e88:	ed2d 8b02 	vpush	{d8}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]

	  theta += w;
	  x+= v*(cos(theta));
	  y+= v*(sin(theta));*/

	    dt_sec = dt / 1000.;
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff faf2 	bl	800047c <__aeabi_i2d>
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <odometrija+0x26c>)
 8000e9e:	f7ff fc81 	bl	80007a4 <__aeabi_ddiv>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	f7ff fe29 	bl	8000b00 <__aeabi_d2f>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b90      	ldr	r3, [pc, #576]	; (80010f4 <odometrija+0x270>)
 8000eb2:	601a      	str	r2, [r3, #0]

		 enc_r = enc1_GetInc();
 8000eb4:	f001 fada 	bl	800246c <enc1_GetInc>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b8e      	ldr	r3, [pc, #568]	; (80010f8 <odometrija+0x274>)
 8000ebe:	601a      	str	r2, [r3, #0]
		 enc_l = enc2_GetInc();
 8000ec0:	f001 fb5c 	bl	800257c <enc2_GetInc>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <odometrija+0x278>)
 8000eca:	601a      	str	r2, [r3, #0]



		// INC * RAD/INC * 1/s * m
		w_r = enc_r * inc_2_rad() / dt_sec;
 8000ecc:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <odometrija+0x274>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000ed8:	f7ff ffc6 	bl	8000e68 <inc_2_rad>
 8000edc:	eef0 7a40 	vmov.f32	s15, s0
 8000ee0:	ee68 6a27 	vmul.f32	s13, s16, s15
 8000ee4:	4b83      	ldr	r3, [pc, #524]	; (80010f4 <odometrija+0x270>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eee:	4b84      	ldr	r3, [pc, #528]	; (8001100 <odometrija+0x27c>)
 8000ef0:	edc3 7a00 	vstr	s15, [r3]
		w_l = enc_l * inc_2_rad() / dt_sec;
 8000ef4:	4b81      	ldr	r3, [pc, #516]	; (80010fc <odometrija+0x278>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000f00:	f7ff ffb2 	bl	8000e68 <inc_2_rad>
 8000f04:	eef0 7a40 	vmov.f32	s15, s0
 8000f08:	ee68 6a27 	vmul.f32	s13, s16, s15
 8000f0c:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <odometrija+0x270>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	4b7b      	ldr	r3, [pc, #492]	; (8001104 <odometrija+0x280>)
 8000f18:	edc3 7a00 	vstr	s15, [r3]

		v_r = w_r * (d_tocka/2);
 8000f1c:	4b78      	ldr	r3, [pc, #480]	; (8001100 <odometrija+0x27c>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8000f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2a:	4b77      	ldr	r3, [pc, #476]	; (8001108 <odometrija+0x284>)
 8000f2c:	edc3 7a00 	vstr	s15, [r3]
		v_l = w_l * (d_tocka/2);
 8000f30:	4b74      	ldr	r3, [pc, #464]	; (8001104 <odometrija+0x280>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8000f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3e:	4b73      	ldr	r3, [pc, #460]	; (800110c <odometrija+0x288>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]

		 v = (v_r + v_l)/2;
 8000f44:	4b70      	ldr	r3, [pc, #448]	; (8001108 <odometrija+0x284>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b70      	ldr	r3, [pc, #448]	; (800110c <odometrija+0x288>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <odometrija+0x28c>)
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
		 w = (v_r - v_l)/razmak_tockova;
 8000f62:	4b69      	ldr	r3, [pc, #420]	; (8001108 <odometrija+0x284>)
 8000f64:	ed93 7a00 	vldr	s14, [r3]
 8000f68:	4b68      	ldr	r3, [pc, #416]	; (800110c <odometrija+0x288>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f72:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001114 <odometrija+0x290>
 8000f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7a:	4b67      	ldr	r3, [pc, #412]	; (8001118 <odometrija+0x294>)
 8000f7c:	edc3 7a00 	vstr	s15, [r3]

		 theta = normalize_angle(theta+ w * dt_sec);
 8000f80:	4b65      	ldr	r3, [pc, #404]	; (8001118 <odometrija+0x294>)
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <odometrija+0x270>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f90:	4b62      	ldr	r3, [pc, #392]	; (800111c <odometrija+0x298>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	f000 f957 	bl	8001250 <normalize_angle>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <odometrija+0x298>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
		x +=v* cos(theta + (w*dt_sec/2)) * dt_sec;
 8000fac:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <odometrija+0x29c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa75 	bl	80004a0 <__aeabi_f2d>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <odometrija+0x28c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa6e 	bl	80004a0 <__aeabi_f2d>
 8000fc4:	4680      	mov	r8, r0
 8000fc6:	4689      	mov	r9, r1
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <odometrija+0x294>)
 8000fca:	ed93 7a00 	vldr	s14, [r3]
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <odometrija+0x270>)
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fe0:	4b4e      	ldr	r3, [pc, #312]	; (800111c <odometrija+0x298>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fa57 	bl	80004a0 <__aeabi_f2d>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	ec43 2b10 	vmov	d0, r2, r3
 8000ffa:	f002 fac1 	bl	8003580 <cos>
 8000ffe:	ec53 2b10 	vmov	r2, r3, d0
 8001002:	4640      	mov	r0, r8
 8001004:	4649      	mov	r1, r9
 8001006:	f7ff faa3 	bl	8000550 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4690      	mov	r8, r2
 8001010:	4699      	mov	r9, r3
 8001012:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <odometrija+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa42 	bl	80004a0 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4640      	mov	r0, r8
 8001022:	4649      	mov	r1, r9
 8001024:	f7ff fa94 	bl	8000550 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff f8d8 	bl	80001e4 <__adddf3>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4618      	mov	r0, r3
 800103a:	4621      	mov	r1, r4
 800103c:	f7ff fd60 	bl	8000b00 <__aeabi_d2f>
 8001040:	4602      	mov	r2, r0
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <odometrija+0x29c>)
 8001044:	601a      	str	r2, [r3, #0]
		y += v * sin(theta + (w*dt_sec/2)) * dt_sec;
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <odometrija+0x2a0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa28 	bl	80004a0 <__aeabi_f2d>
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <odometrija+0x28c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa21 	bl	80004a0 <__aeabi_f2d>
 800105e:	4680      	mov	r8, r0
 8001060:	4689      	mov	r9, r1
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <odometrija+0x294>)
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <odometrija+0x270>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001076:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <odometrija+0x298>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	ee17 0a90 	vmov	r0, s15
 8001088:	f7ff fa0a 	bl	80004a0 <__aeabi_f2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	ec43 2b10 	vmov	d0, r2, r3
 8001094:	f002 fab8 	bl	8003608 <sin>
 8001098:	ec53 2b10 	vmov	r2, r3, d0
 800109c:	4640      	mov	r0, r8
 800109e:	4649      	mov	r1, r9
 80010a0:	f7ff fa56 	bl	8000550 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4690      	mov	r8, r2
 80010aa:	4699      	mov	r9, r3
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <odometrija+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9f5 	bl	80004a0 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4640      	mov	r0, r8
 80010bc:	4649      	mov	r1, r9
 80010be:	f7ff fa47 	bl	8000550 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4620      	mov	r0, r4
 80010c8:	4629      	mov	r1, r5
 80010ca:	f7ff f88b 	bl	80001e4 <__adddf3>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4618      	mov	r0, r3
 80010d4:	4621      	mov	r1, r4
 80010d6:	f7ff fd13 	bl	8000b00 <__aeabi_d2f>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <odometrija+0x2a0>)
 80010de:	601a      	str	r2, [r3, #0]


}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	ecbd 8b02 	vpop	{d8}
 80010ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ee:	bf00      	nop
 80010f0:	408f4000 	.word	0x408f4000
 80010f4:	200000a8 	.word	0x200000a8
 80010f8:	200000a4 	.word	0x200000a4
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	2000009c 	.word	0x2000009c
 8001104:	20000098 	.word	0x20000098
 8001108:	200001a0 	.word	0x200001a0
 800110c:	20000198 	.word	0x20000198
 8001110:	200000b8 	.word	0x200000b8
 8001114:	43960000 	.word	0x43960000
 8001118:	200000bc 	.word	0x200000bc
 800111c:	200000b4 	.word	0x200000b4
 8001120:	200000ac 	.word	0x200000ac
 8001124:	200000b0 	.word	0x200000b0

08001128 <get_x>:

float get_x (){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	return x;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <get_x+0x18>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	200000ac 	.word	0x200000ac

08001144 <get_y>:

float get_y (){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	return y;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <get_y+0x18>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	ee07 3a90 	vmov	s15, r3
}
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	200000b0 	.word	0x200000b0

08001160 <get_theta>:

float get_theta (){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	return theta;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <get_theta+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	200000b4 	.word	0x200000b4

0800117c <get_w>:

void set_theta_smer (){
	 theta=+M_PI;
}

float get_w (){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	return w;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <get_w+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	200000bc 	.word	0x200000bc

08001198 <get_v>:

float get_v (){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return v;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <get_v+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	ee07 3a90 	vmov	s15, r3
}
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	200000b8 	.word	0x200000b8

080011b4 <pid_init>:
static float const w_min = -6;
static float const vel_max = 2100;
static float const vel_min = -2100;

void pid_init ()
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	e=0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <pid_init+0x68>)
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
	ei=0;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <pid_init+0x6c>)
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
	ed=0;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <pid_init+0x70>)
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
	e_pre=0;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <pid_init+0x74>)
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
	u=0;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <pid_init+0x78>)
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	faza=0;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <pid_init+0x7c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
	v_dref=0;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <pid_init+0x80>)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
	v_lref=0;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <pid_init+0x84>)
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	w_cr=0;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <pid_init+0x88>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	v_cr=0;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <pid_init+0x8c>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	brojac=0;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <pid_init+0x90>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
	izlazak=0;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <pid_init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	200000c0 	.word	0x200000c0
 8001220:	200000c4 	.word	0x200000c4
 8001224:	200000c8 	.word	0x200000c8
 8001228:	200000cc 	.word	0x200000cc
 800122c:	200000e0 	.word	0x200000e0
 8001230:	200000ec 	.word	0x200000ec
 8001234:	200001ac 	.word	0x200001ac
 8001238:	200001a4 	.word	0x200001a4
 800123c:	200001a8 	.word	0x200001a8
 8001240:	200001b0 	.word	0x200001b0
 8001244:	200000d8 	.word	0x200000d8
 8001248:	200000e4 	.word	0x200000e4
 800124c:	00000000 	.word	0x00000000

08001250 <normalize_angle>:

float  normalize_angle(float angle){
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle > M_PI){
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f920 	bl	80004a0 <__aeabi_f2d>
 8001260:	a31d      	add	r3, pc, #116	; (adr r3, 80012d8 <normalize_angle+0x88>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff fc03 	bl	8000a70 <__aeabi_dcmpgt>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <normalize_angle+0x42>
        angle = angle - M_PI*2;
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff f915 	bl	80004a0 <__aeabi_f2d>
 8001276:	a31a      	add	r3, pc, #104	; (adr r3, 80012e0 <normalize_angle+0x90>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7fe ffb0 	bl	80001e0 <__aeabi_dsub>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fc3a 	bl	8000b00 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	e01a      	b.n	80012c8 <normalize_angle+0x78>
    }
	else if (angle < - M_PI){
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f904 	bl	80004a0 <__aeabi_f2d>
 8001298:	a313      	add	r3, pc, #76	; (adr r3, 80012e8 <normalize_angle+0x98>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fbc9 	bl	8000a34 <__aeabi_dcmplt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00f      	beq.n	80012c8 <normalize_angle+0x78>
        angle +=M_PI*2 ;
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f8f9 	bl	80004a0 <__aeabi_f2d>
 80012ae:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <normalize_angle+0x90>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe ff96 	bl	80001e4 <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fc1e 	bl	8000b00 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	607b      	str	r3, [r7, #4]
    }

    return angle;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ee07 3a90 	vmov	s15, r3
}
 80012ce:	eeb0 0a67 	vmov.f32	s0, s15
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	54442d18 	.word	0x54442d18
 80012dc:	400921fb 	.word	0x400921fb
 80012e0:	54442d18 	.word	0x54442d18
 80012e4:	401921fb 	.word	0x401921fb
 80012e8:	54442d18 	.word	0x54442d18
 80012ec:	c00921fb 	.word	0xc00921fb

080012f0 <pid_brzina>:
    return angle;
}


float pid_brzina (float Kp,float Ki, float Kd,float ref_v,float mes_v)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80012fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80012fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8001302:	edc7 1a02 	vstr	s3, [r7, #8]
 8001306:	ed87 2a01 	vstr	s4, [r7, #4]


	e=  ref_v - mes_v;
 800130a:	ed97 7a02 	vldr	s14, [r7, #8]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <pid_brzina+0x114>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
	ei += e;
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <pid_brzina+0x118>)
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <pid_brzina+0x114>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <pid_brzina+0x118>)
 800132e:	edc3 7a00 	vstr	s15, [r3]
	ed = e - e_pre;
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <pid_brzina+0x114>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	4b34      	ldr	r3, [pc, #208]	; (800140c <pid_brzina+0x11c>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <pid_brzina+0x120>)
 8001344:	edc3 7a00 	vstr	s15, [r3]

	 if (ei > EI_MAX)
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <pid_brzina+0x118>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001414 <pid_brzina+0x124>
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	dd03      	ble.n	8001364 <pid_brzina+0x74>
	    {
	      ei = EI_MAX;
 800135c:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <pid_brzina+0x128>)
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <pid_brzina+0x118>)
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e00c      	b.n	800137e <pid_brzina+0x8e>
	    }
	  else if (ei < EI_MIN)
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <pid_brzina+0x118>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800141c <pid_brzina+0x12c>
 800136e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d502      	bpl.n	800137e <pid_brzina+0x8e>
	    {
	      ei = EI_MIN;
 8001378:	4a29      	ldr	r2, [pc, #164]	; (8001420 <pid_brzina+0x130>)
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <pid_brzina+0x118>)
 800137c:	601a      	str	r2, [r3, #0]
	    }

	  u = Kp * e + Ki * ei + Kd * ed;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <pid_brzina+0x114>)
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <pid_brzina+0x118>)
 800138e:	edd3 6a00 	vldr	s13, [r3]
 8001392:	edd7 7a04 	vldr	s15, [r7, #16]
 8001396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <pid_brzina+0x120>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <pid_brzina+0x134>)
 80013b2:	edc3 7a00 	vstr	s15, [r3]

	  //smer
	   if (u > U_MAX)
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <pid_brzina+0x134>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001428 <pid_brzina+0x138>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	dd03      	ble.n	80013d2 <pid_brzina+0xe2>
	   {
	       u = U_MAX;
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <pid_brzina+0x13c>)
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <pid_brzina+0x134>)
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e00c      	b.n	80013ec <pid_brzina+0xfc>
	   }
	   else if (u < U_MIN)
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <pid_brzina+0x134>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001430 <pid_brzina+0x140>
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	d502      	bpl.n	80013ec <pid_brzina+0xfc>
	   {
	  	   u = U_MIN;
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <pid_brzina+0x144>)
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <pid_brzina+0x134>)
 80013ea:	601a      	str	r2, [r3, #0]
	   }


			 return u;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <pid_brzina+0x134>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	ee07 3a90 	vmov	s15, r3
	   e_pre = e;

}
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200000c0 	.word	0x200000c0
 8001408:	200000c4 	.word	0x200000c4
 800140c:	200000cc 	.word	0x200000cc
 8001410:	200000c8 	.word	0x200000c8
 8001414:	447a0000 	.word	0x447a0000
 8001418:	447a0000 	.word	0x447a0000
 800141c:	c47a0000 	.word	0xc47a0000
 8001420:	c47a0000 	.word	0xc47a0000
 8001424:	200000e0 	.word	0x200000e0
 8001428:	45034000 	.word	0x45034000
 800142c:	45034000 	.word	0x45034000
 8001430:	c5034000 	.word	0xc5034000
 8001434:	c5034000 	.word	0xc5034000

08001438 <racunanje_brzine>:

void racunanje_brzine(float v, float w){
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001442:	edc7 0a00 	vstr	s1, [r7]
	  if (v > v_max){
 8001446:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014e4 <racunanje_brzine+0xac>
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	dd02      	ble.n	800145e <racunanje_brzine+0x26>
		       v = v_max;
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <racunanje_brzine+0xb0>)
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	e00a      	b.n	8001474 <racunanje_brzine+0x3c>
		   }
	  else if (v < v_min){
 800145e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80014ec <racunanje_brzine+0xb4>
 8001462:	edd7 7a01 	vldr	s15, [r7, #4]
 8001466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d501      	bpl.n	8001474 <racunanje_brzine+0x3c>
		  	   v = v_min;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <racunanje_brzine+0xb8>)
 8001472:	607b      	str	r3, [r7, #4]
		   }
	  if (w > w_max){
 8001474:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001478:	edd7 7a00 	vldr	s15, [r7]
 800147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd02      	ble.n	800148c <racunanje_brzine+0x54>
		       w = w_max;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <racunanje_brzine+0xbc>)
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	e00a      	b.n	80014a2 <racunanje_brzine+0x6a>
		   }
	  else if (w < w_min){
 800148c:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001490:	edd7 7a00 	vldr	s15, [r7]
 8001494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	d501      	bpl.n	80014a2 <racunanje_brzine+0x6a>
		  	   w = w_min;
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <racunanje_brzine+0xc0>)
 80014a0:	603b      	str	r3, [r7, #0]
		   }

	  vel_d= v + w*(razmak_tockova/2);
 80014a2:	edd7 7a00 	vldr	s15, [r7]
 80014a6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80014fc <racunanje_brzine+0xc4>
 80014aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <racunanje_brzine+0xc8>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	  vel_l= v - w*(razmak_tockova/2);}
 80014bc:	edd7 7a00 	vldr	s15, [r7]
 80014c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80014fc <racunanje_brzine+0xc4>
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <racunanje_brzine+0xcc>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	45034000 	.word	0x45034000
 80014e8:	45034000 	.word	0x45034000
 80014ec:	c5034000 	.word	0xc5034000
 80014f0:	c5034000 	.word	0xc5034000
 80014f4:	40c00000 	.word	0x40c00000
 80014f8:	c0c00000 	.word	0xc0c00000
 80014fc:	43160000 	.word	0x43160000
 8001500:	2000019c 	.word	0x2000019c
 8001504:	20000194 	.word	0x20000194

08001508 <regulacija_pozicije>:
	 motor2_set_PWM(vel_l1);*/




void regulacija_pozicije(float x_ref, float y_ref, float theta_ref, float x, float y, float theta){
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	ed87 0a05 	vstr	s0, [r7, #20]
 8001514:	edc7 0a04 	vstr	s1, [r7, #16]
 8001518:	ed87 1a03 	vstr	s2, [r7, #12]
 800151c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001520:	ed87 2a01 	vstr	s4, [r7, #4]
 8001524:	edc7 2a00 	vstr	s5, [r7]
//dodati mozda i regulator zbog prepucavanja ugla pri brzoj rotaciji

		v_pid=0;
 8001528:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <regulacija_pozicije+0x2c8>)
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
		w_pid=0;
 8001530:	4ba8      	ldr	r3, [pc, #672]	; (80017d4 <regulacija_pozicije+0x2cc>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
		theta=theta+(M_PI*or);
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7fe ffb1 	bl	80004a0 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4ba5      	ldr	r3, [pc, #660]	; (80017d8 <regulacija_pozicije+0x2d0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff98 	bl	800047c <__aeabi_i2d>
 800154c:	a39c      	add	r3, pc, #624	; (adr r3, 80017c0 <regulacija_pozicije+0x2b8>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fffd 	bl	8000550 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fe41 	bl	80001e4 <__adddf3>
 8001562:	4603      	mov	r3, r0
 8001564:	460c      	mov	r4, r1
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	f7ff fac9 	bl	8000b00 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	603b      	str	r3, [r7, #0]
		dist =smer* sqrt(pow((x_ref-x),2)+pow((y_ref-y),2));
 8001572:	4b9a      	ldr	r3, [pc, #616]	; (80017dc <regulacija_pozicije+0x2d4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff80 	bl	800047c <__aeabi_i2d>
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
 8001580:	ed97 7a05 	vldr	s14, [r7, #20]
 8001584:	edd7 7a02 	vldr	s15, [r7, #8]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	ee17 0a90 	vmov	r0, s15
 8001590:	f7fe ff86 	bl	80004a0 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 80017c8 <regulacija_pozicije+0x2c0>
 800159c:	ec43 2b10 	vmov	d0, r2, r3
 80015a0:	f002 f87c 	bl	800369c <pow>
 80015a4:	ec59 8b10 	vmov	r8, r9, d0
 80015a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	ee17 0a90 	vmov	r0, s15
 80015b8:	f7fe ff72 	bl	80004a0 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80017c8 <regulacija_pozicije+0x2c0>
 80015c4:	ec43 2b10 	vmov	d0, r2, r3
 80015c8:	f002 f868 	bl	800369c <pow>
 80015cc:	ec53 2b10 	vmov	r2, r3, d0
 80015d0:	4640      	mov	r0, r8
 80015d2:	4649      	mov	r1, r9
 80015d4:	f7fe fe06 	bl	80001e4 <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	ec43 2b17 	vmov	d7, r2, r3
 80015e0:	eeb0 0a47 	vmov.f32	s0, s14
 80015e4:	eef0 0a67 	vmov.f32	s1, s15
 80015e8:	f002 f9c8 	bl	800397c <sqrt>
 80015ec:	ec53 2b10 	vmov	r2, r3, d0
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe ffac 	bl	8000550 <__aeabi_dmul>
 80015f8:	4603      	mov	r3, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	4618      	mov	r0, r3
 80015fe:	4621      	mov	r1, r4
 8001600:	f7ff fa7e 	bl	8000b00 <__aeabi_d2f>
 8001604:	4602      	mov	r2, r0
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <regulacija_pozicije+0x2d8>)
 8001608:	601a      	str	r2, [r3, #0]
		//distx = sqrt(pow(x_ref-x,2));
		//disty = sqrt(pow(y_ref-y,2));<
		phi = atan2(y_ref - y, x_ref - x);
 800160a:	ed97 7a04 	vldr	s14, [r7, #16]
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f7fe ff41 	bl	80004a0 <__aeabi_f2d>
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
 8001622:	ed97 7a05 	vldr	s14, [r7, #20]
 8001626:	edd7 7a02 	vldr	s15, [r7, #8]
 800162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ff35 	bl	80004a0 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	ec43 2b11 	vmov	d1, r2, r3
 800163e:	ec45 4b10 	vmov	d0, r4, r5
 8001642:	f002 f829 	bl	8003698 <atan2>
 8001646:	ec54 3b10 	vmov	r3, r4, d0
 800164a:	4618      	mov	r0, r3
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff fa57 	bl	8000b00 <__aeabi_d2f>
 8001652:	4602      	mov	r2, r0
 8001654:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <regulacija_pozicije+0x2dc>)
 8001656:	601a      	str	r2, [r3, #0]
		phi_error = normalize_angle(phi - theta ); //promjeni ovo
 8001658:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <regulacija_pozicije+0x2dc>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	f7ff fdf1 	bl	8001250 <normalize_angle>
 800166e:	eef0 7a40 	vmov.f32	s15, s0
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <regulacija_pozicije+0x2e0>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
		phi_prim_error = normalize_angle(  theta_ref - theta );
 8001678:	ed97 7a03 	vldr	s14, [r7, #12]
 800167c:	edd7 7a00 	vldr	s15, [r7]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	f7ff fde2 	bl	8001250 <normalize_angle>
 800168c:	eef0 7a40 	vmov.f32	s15, s0
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <regulacija_pozicije+0x2e4>)
 8001692:	edc3 7a00 	vstr	s15, [r3]

	eps_dist = 6;
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <regulacija_pozicije+0x2e8>)
 8001698:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <regulacija_pozicije+0x2ec>)
 800169a:	601a      	str	r2, [r3, #0]
	eps_theta = (4*M_PI)/180;
 800169c:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <regulacija_pozicije+0x2f0>)
 800169e:	4a57      	ldr	r2, [pc, #348]	; (80017fc <regulacija_pozicije+0x2f4>)
 80016a0:	601a      	str	r2, [r3, #0]


	Kp_w =9; //6 bilo 3.5 bilo
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <regulacija_pozicije+0x2f8>)
 80016a4:	4a57      	ldr	r2, [pc, #348]	; (8001804 <regulacija_pozicije+0x2fc>)
 80016a6:	601a      	str	r2, [r3, #0]
	Kp_d = 2.8;
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <regulacija_pozicije+0x300>)
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <regulacija_pozicije+0x304>)
 80016ac:	601a      	str	r2, [r3, #0]
		brojac++;
	}
	else
		dist=fabs(dist);
*/
	greska=(phi_prim_error*180/M_PI);
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <regulacija_pozicije+0x2e4>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001810 <regulacija_pozicije+0x308>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	ee17 0a90 	vmov	r0, s15
 80016c0:	f7fe feee 	bl	80004a0 <__aeabi_f2d>
 80016c4:	a33e      	add	r3, pc, #248	; (adr r3, 80017c0 <regulacija_pozicije+0x2b8>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff f86b 	bl	80007a4 <__aeabi_ddiv>
 80016ce:	4603      	mov	r3, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	4618      	mov	r0, r3
 80016d4:	4621      	mov	r1, r4
 80016d6:	f7ff fa13 	bl	8000b00 <__aeabi_d2f>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <regulacija_pozicije+0x30c>)
 80016de:	601a      	str	r2, [r3, #0]

	if(faza == 0){
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <regulacija_pozicije+0x310>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 80a3 	bne.w	8001830 <regulacija_pozicije+0x328>
test1=1;
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <regulacija_pozicije+0x314>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
		v_pid=0;
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <regulacija_pozicije+0x2c8>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <regulacija_pozicije+0x318>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d802      	bhi.n	8001712 <regulacija_pozicije+0x20a>
			Kp_w=14;
 800170c:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <regulacija_pozicije+0x2f8>)
 800170e:	4a45      	ldr	r2, [pc, #276]	; (8001824 <regulacija_pozicije+0x31c>)
 8001710:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_error;
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <regulacija_pozicije+0x2f8>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <regulacija_pozicije+0x2e0>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <regulacija_pozicije+0x2cc>)
 8001724:	edc3 7a00 	vstr	s15, [r3]

		greska1=(phi_error*180/M_PI);
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <regulacija_pozicije+0x2e0>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001810 <regulacija_pozicije+0x308>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	ee17 0a90 	vmov	r0, s15
 800173a:	f7fe feb1 	bl	80004a0 <__aeabi_f2d>
 800173e:	a320      	add	r3, pc, #128	; (adr r3, 80017c0 <regulacija_pozicije+0x2b8>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f82e 	bl	80007a4 <__aeabi_ddiv>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4618      	mov	r0, r3
 800174e:	4621      	mov	r1, r4
 8001750:	f7ff f9d6 	bl	8000b00 <__aeabi_d2f>
 8001754:	4602      	mov	r2, r0
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <regulacija_pozicije+0x320>)
 8001758:	601a      	str	r2, [r3, #0]
		uslov = get_w ();
 800175a:	f7ff fd0f 	bl	800117c <get_w>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <regulacija_pozicije+0x324>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
		//if((fabs(phi_prim_error) <= eps_theta))
		//	faza=1;
		if((fabs(phi_error) <= eps_theta) & (fabs(uslov) <= 1)){
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <regulacija_pozicije+0x2e0>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <regulacija_pozicije+0x2f0>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	bf94      	ite	ls
 8001782:	2301      	movls	r3, #1
 8001784:	2300      	movhi	r3, #0
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <regulacija_pozicije+0x324>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	eef0 7ae7 	vabs.f32	s15, s15
 8001792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	bf94      	ite	ls
 80017a0:	2301      	movls	r3, #1
 80017a2:	2300      	movhi	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 810f 	beq.w	80019ce <regulacija_pozicije+0x4c6>
			//0.001 greska bila
			faza=1;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <regulacija_pozicije+0x310>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
			test1=2;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <regulacija_pozicije+0x314>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e107      	b.n	80019ce <regulacija_pozicije+0x4c6>
 80017be:	bf00      	nop
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	400921fb 	.word	0x400921fb
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40000000 	.word	0x40000000
 80017d0:	200000f8 	.word	0x200000f8
 80017d4:	200000fc 	.word	0x200000fc
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000100 	.word	0x20000100
 80017e4:	20000104 	.word	0x20000104
 80017e8:	20000108 	.word	0x20000108
 80017ec:	2000010c 	.word	0x2000010c
 80017f0:	20000110 	.word	0x20000110
 80017f4:	40c00000 	.word	0x40c00000
 80017f8:	20000114 	.word	0x20000114
 80017fc:	3d8efa35 	.word	0x3d8efa35
 8001800:	20000118 	.word	0x20000118
 8001804:	41100000 	.word	0x41100000
 8001808:	2000011c 	.word	0x2000011c
 800180c:	40333333 	.word	0x40333333
 8001810:	43340000 	.word	0x43340000
 8001814:	200000d0 	.word	0x200000d0
 8001818:	200000ec 	.word	0x200000ec
 800181c:	200000e8 	.word	0x200000e8
 8001820:	200001a8 	.word	0x200001a8
 8001824:	41600000 	.word	0x41600000
 8001828:	200000d4 	.word	0x200000d4
 800182c:	20000120 	.word	0x20000120

		}
	}
	else if (faza ==1){
 8001830:	4bab      	ldr	r3, [pc, #684]	; (8001ae0 <regulacija_pozicije+0x5d8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d17d      	bne.n	8001934 <regulacija_pozicije+0x42c>
	if(v_cr > 400){
 8001838:	4baa      	ldr	r3, [pc, #680]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001ae8 <regulacija_pozicije+0x5e0>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd02      	ble.n	8001852 <regulacija_pozicije+0x34a>
			Kp_d=2.3;
 800184c:	4ba7      	ldr	r3, [pc, #668]	; (8001aec <regulacija_pozicije+0x5e4>)
 800184e:	4aa8      	ldr	r2, [pc, #672]	; (8001af0 <regulacija_pozicije+0x5e8>)
 8001850:	601a      	str	r2, [r3, #0]
		}
	if(v_cr > 800){
 8001852:	4ba4      	ldr	r3, [pc, #656]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001af4 <regulacija_pozicije+0x5ec>
 800185c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd02      	ble.n	800186c <regulacija_pozicije+0x364>
				Kp_d=1.7;
 8001866:	4ba1      	ldr	r3, [pc, #644]	; (8001aec <regulacija_pozicije+0x5e4>)
 8001868:	4aa3      	ldr	r2, [pc, #652]	; (8001af8 <regulacija_pozicije+0x5f0>)
 800186a:	601a      	str	r2, [r3, #0]
			}
	if(v_cr > 1190){
 800186c:	4b9d      	ldr	r3, [pc, #628]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001afc <regulacija_pozicije+0x5f4>
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	dd02      	ble.n	8001886 <regulacija_pozicije+0x37e>
					Kp_d=1.69;
 8001880:	4b9a      	ldr	r3, [pc, #616]	; (8001aec <regulacija_pozicije+0x5e4>)
 8001882:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <regulacija_pozicije+0x5f8>)
 8001884:	601a      	str	r2, [r3, #0]
				}
		w_pid = Kp_w * phi_error;
 8001886:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <regulacija_pozicije+0x5fc>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	4b9e      	ldr	r3, [pc, #632]	; (8001b08 <regulacija_pozicije+0x600>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001896:	4b9d      	ldr	r3, [pc, #628]	; (8001b0c <regulacija_pozicije+0x604>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
		v_pid = Kp_d * dist;
 800189c:	4b93      	ldr	r3, [pc, #588]	; (8001aec <regulacija_pozicije+0x5e4>)
 800189e:	ed93 7a00 	vldr	s14, [r3]
 80018a2:	4b9b      	ldr	r3, [pc, #620]	; (8001b10 <regulacija_pozicije+0x608>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	4b99      	ldr	r3, [pc, #612]	; (8001b14 <regulacija_pozicije+0x60c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		*/


		greska1=(phi_error*180/M_PI);
 80018b2:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <regulacija_pozicije+0x600>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001b18 <regulacija_pozicije+0x610>
 80018bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c0:	ee17 0a90 	vmov	r0, s15
 80018c4:	f7fe fdec 	bl	80004a0 <__aeabi_f2d>
 80018c8:	a383      	add	r3, pc, #524	; (adr r3, 8001ad8 <regulacija_pozicije+0x5d0>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe ff69 	bl	80007a4 <__aeabi_ddiv>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f911 	bl	8000b00 <__aeabi_d2f>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <regulacija_pozicije+0x614>)
 80018e2:	601a      	str	r2, [r3, #0]
		if ((fabs(dist) <= eps_dist) & (fabs(get_v()) <= 10))
 80018e4:	4b8a      	ldr	r3, [pc, #552]	; (8001b10 <regulacija_pozicije+0x608>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eeb0 7ae7 	vabs.f32	s14, s15
 80018ee:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <regulacija_pozicije+0x618>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	bf94      	ite	ls
 80018fe:	2301      	movls	r3, #1
 8001900:	2300      	movhi	r3, #0
 8001902:	b2dc      	uxtb	r4, r3
 8001904:	f7ff fc48 	bl	8001198 <get_v>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	eef0 7ae7 	vabs.f32	s15, s15
 8001910:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	bf94      	ite	ls
 800191e:	2301      	movls	r3, #1
 8001920:	2300      	movhi	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4023      	ands	r3, r4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d050      	beq.n	80019ce <regulacija_pozicije+0x4c6>
			faza =2;
 800192c:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <regulacija_pozicije+0x5d8>)
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e04c      	b.n	80019ce <regulacija_pozicije+0x4c6>
			//faza= 2;
		//else if( (fabs(disty) <= eps_disty) & (fabs(get_v()) <= 10))
				//	faza= 2;

	}
	else if (faza ==2){
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <regulacija_pozicije+0x5d8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d148      	bne.n	80019ce <regulacija_pozicije+0x4c6>
		v_pid=0;
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <regulacija_pozicije+0x60c>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 8001944:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <regulacija_pozicije+0x61c>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800194e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d802      	bhi.n	800195e <regulacija_pozicije+0x456>
					Kp_w=11;
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <regulacija_pozicije+0x5fc>)
 800195a:	4a73      	ldr	r2, [pc, #460]	; (8001b28 <regulacija_pozicije+0x620>)
 800195c:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_prim_error;
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <regulacija_pozicije+0x5fc>)
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <regulacija_pozicije+0x624>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <regulacija_pozicije+0x604>)
 8001970:	edc3 7a00 	vstr	s15, [r3]


		uslov = get_w ();
 8001974:	f7ff fc02 	bl	800117c <get_w>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <regulacija_pozicije+0x628>)
 800197e:	edc3 7a00 	vstr	s15, [r3]
		if((fabs(phi_prim_error) <= eps_theta) & (fabs(uslov) <= 1)){
 8001982:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <regulacija_pozicije+0x624>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eeb0 7ae7 	vabs.f32	s14, s15
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <regulacija_pozicije+0x62c>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	bf94      	ite	ls
 800199c:	2301      	movls	r3, #1
 800199e:	2300      	movhi	r3, #0
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <regulacija_pozicije+0x628>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	eef0 7ae7 	vabs.f32	s15, s15
 80019ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	bf94      	ite	ls
 80019ba:	2301      	movls	r3, #1
 80019bc:	2300      	movhi	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4013      	ands	r3, r2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <regulacija_pozicije+0x4c6>
			faza=3;
 80019c8:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <regulacija_pozicije+0x5d8>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	601a      	str	r2, [r3, #0]
		}
	}



	if( (v_pid < v_cr) & (v_pid > -v_cr))
 80019ce:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <regulacija_pozicije+0x60c>)
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	bf4c      	ite	mi
 80019e4:	2301      	movmi	r3, #1
 80019e6:	2300      	movpl	r3, #0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eeb1 7a67 	vneg.f32	s14, s15
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <regulacija_pozicije+0x60c>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	bf4c      	ite	mi
 8001a04:	2301      	movmi	r3, #1
 8001a06:	2300      	movpl	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <regulacija_pozicije+0x514>
		v = v_pid;
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <regulacija_pozicije+0x60c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <regulacija_pozicije+0x630>)
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e024      	b.n	8001a66 <regulacija_pozicije+0x55e>
	else if (v_pid>v_cr)
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <regulacija_pozicije+0x60c>)
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd04      	ble.n	8001a3c <regulacija_pozicije+0x534>
		v=v_cr;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a40      	ldr	r2, [pc, #256]	; (8001b38 <regulacija_pozicije+0x630>)
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e014      	b.n	8001a66 <regulacija_pozicije+0x55e>
	else if(v_pid<-v_cr)
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	eeb1 7a67 	vneg.f32	s14, s15
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <regulacija_pozicije+0x60c>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a54:	dd07      	ble.n	8001a66 <regulacija_pozicije+0x55e>
		v = -v_cr;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <regulacija_pozicije+0x5dc>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eef1 7a67 	vneg.f32	s15, s15
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <regulacija_pozicije+0x630>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]



	if( (w_pid < w_cr) & (w_pid > -w_cr))
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <regulacija_pozicije+0x604>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <regulacija_pozicije+0x61c>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	bf4c      	ite	mi
 8001a7c:	2301      	movmi	r3, #1
 8001a7e:	2300      	movpl	r3, #0
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <regulacija_pozicije+0x61c>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eeb1 7a67 	vneg.f32	s14, s15
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <regulacija_pozicije+0x604>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	bf4c      	ite	mi
 8001a9c:	2301      	movmi	r3, #1
 8001a9e:	2300      	movpl	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <regulacija_pozicije+0x5ac>
		w = w_pid;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <regulacija_pozicije+0x604>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <regulacija_pozicije+0x634>)
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e05a      	b.n	8001b6a <regulacija_pozicije+0x662>
	else if (w_pid>w_cr)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <regulacija_pozicije+0x604>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <regulacija_pozicije+0x61c>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	dd3a      	ble.n	8001b40 <regulacija_pozicije+0x638>
		w=w_cr;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <regulacija_pozicije+0x61c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <regulacija_pozicije+0x634>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e04a      	b.n	8001b6a <regulacija_pozicije+0x662>
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	54442d18 	.word	0x54442d18
 8001adc:	400921fb 	.word	0x400921fb
 8001ae0:	200000ec 	.word	0x200000ec
 8001ae4:	200001b0 	.word	0x200001b0
 8001ae8:	43c80000 	.word	0x43c80000
 8001aec:	2000011c 	.word	0x2000011c
 8001af0:	40133333 	.word	0x40133333
 8001af4:	44480000 	.word	0x44480000
 8001af8:	3fd9999a 	.word	0x3fd9999a
 8001afc:	4494c000 	.word	0x4494c000
 8001b00:	3fd851ec 	.word	0x3fd851ec
 8001b04:	20000118 	.word	0x20000118
 8001b08:	20000108 	.word	0x20000108
 8001b0c:	200000fc 	.word	0x200000fc
 8001b10:	20000100 	.word	0x20000100
 8001b14:	200000f8 	.word	0x200000f8
 8001b18:	43340000 	.word	0x43340000
 8001b1c:	200000d4 	.word	0x200000d4
 8001b20:	20000110 	.word	0x20000110
 8001b24:	200001a8 	.word	0x200001a8
 8001b28:	41300000 	.word	0x41300000
 8001b2c:	2000010c 	.word	0x2000010c
 8001b30:	20000120 	.word	0x20000120
 8001b34:	20000114 	.word	0x20000114
 8001b38:	200000f4 	.word	0x200000f4
 8001b3c:	200000f0 	.word	0x200000f0
	else if(w_pid<-w_cr)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <regulacija_pozicije+0x684>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb1 7a67 	vneg.f32	s14, s15
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <regulacija_pozicije+0x688>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	dd07      	ble.n	8001b6a <regulacija_pozicije+0x662>
		w = -w_cr;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <regulacija_pozicije+0x684>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eef1 7a67 	vneg.f32	s15, s15
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <regulacija_pozicije+0x68c>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]

	racunanje_brzine(v,w);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <regulacija_pozicije+0x690>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <regulacija_pozicije+0x68c>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	eef0 0a47 	vmov.f32	s1, s14
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	f7ff fc5b 	bl	8001438 <racunanje_brzine>

}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b8c:	200001a8 	.word	0x200001a8
 8001b90:	200000fc 	.word	0x200000fc
 8001b94:	200000f0 	.word	0x200000f0
 8001b98:	200000f4 	.word	0x200000f4
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <regulacija_brzine>:



void regulacija_brzine(){
 8001ba0:	b598      	push	{r3, r4, r7, lr}
 8001ba2:	af00      	add	r7, sp, #0


//saturacija trazene
	 if (vel_d > vel_max){
 8001ba4:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <regulacija_brzine+0x210>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001db4 <regulacija_brzine+0x214>
 8001bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd03      	ble.n	8001bc0 <regulacija_brzine+0x20>
		 vel_d = vel_max;
 8001bb8:	4a7f      	ldr	r2, [pc, #508]	; (8001db8 <regulacija_brzine+0x218>)
 8001bba:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <regulacija_brzine+0x210>)
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e00c      	b.n	8001bda <regulacija_brzine+0x3a>
	 }
     else if (vel_d < vel_min){
 8001bc0:	4b7b      	ldr	r3, [pc, #492]	; (8001db0 <regulacija_brzine+0x210>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001dbc <regulacija_brzine+0x21c>
 8001bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d502      	bpl.n	8001bda <regulacija_brzine+0x3a>
    	 vel_d = vel_min;
 8001bd4:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <regulacija_brzine+0x220>)
 8001bd6:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <regulacija_brzine+0x210>)
 8001bd8:	601a      	str	r2, [r3, #0]
     }

	 if (vel_l > vel_max){
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <regulacija_brzine+0x224>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001db4 <regulacija_brzine+0x214>
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	dd03      	ble.n	8001bf6 <regulacija_brzine+0x56>
			 vel_l = vel_max;
 8001bee:	4a72      	ldr	r2, [pc, #456]	; (8001db8 <regulacija_brzine+0x218>)
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <regulacija_brzine+0x224>)
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e00c      	b.n	8001c10 <regulacija_brzine+0x70>
		 }
	 else if (vel_l < vel_min){
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <regulacija_brzine+0x224>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001dbc <regulacija_brzine+0x21c>
 8001c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d502      	bpl.n	8001c10 <regulacija_brzine+0x70>
	    	 vel_l = vel_min;
 8001c0a:	4a6d      	ldr	r2, [pc, #436]	; (8001dc0 <regulacija_brzine+0x220>)
 8001c0c:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <regulacija_brzine+0x224>)
 8001c0e:	601a      	str	r2, [r3, #0]
	     }

// ubrzanje
	//

	 if(v_dref < vel_d)
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <regulacija_brzine+0x210>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d513      	bpl.n	8001c4e <regulacija_brzine+0xae>
		 v_dref +=0.7;
 8001c26:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc38 	bl	80004a0 <__aeabi_f2d>
 8001c30:	a35d      	add	r3, pc, #372	; (adr r3, 8001da8 <regulacija_brzine+0x208>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fad5 	bl	80001e4 <__adddf3>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	f7fe ff5d 	bl	8000b00 <__aeabi_d2f>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e022      	b.n	8001c94 <regulacija_brzine+0xf4>
	 else if(v_dref > vel_d)
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <regulacija_brzine+0x210>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	dd13      	ble.n	8001c8c <regulacija_brzine+0xec>
		//v_dref = vel_d - 0.6;
		 v_dref -= 0.7;
 8001c64:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc19 	bl	80004a0 <__aeabi_f2d>
 8001c6e:	a34e      	add	r3, pc, #312	; (adr r3, 8001da8 <regulacija_brzine+0x208>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fab4 	bl	80001e0 <__aeabi_dsub>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4621      	mov	r1, r4
 8001c80:	f7fe ff3e 	bl	8000b00 <__aeabi_d2f>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e003      	b.n	8001c94 <regulacija_brzine+0xf4>
	else
		 v_dref=vel_d;
 8001c8c:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <regulacija_brzine+0x210>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4d      	ldr	r2, [pc, #308]	; (8001dc8 <regulacija_brzine+0x228>)
 8001c92:	6013      	str	r3, [r2, #0]

	 if(v_lref < vel_l)
 8001c94:	4b4d      	ldr	r3, [pc, #308]	; (8001dcc <regulacija_brzine+0x22c>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <regulacija_brzine+0x224>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d513      	bpl.n	8001cd2 <regulacija_brzine+0x132>
		v_lref += 0.7;
 8001caa:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <regulacija_brzine+0x22c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbf6 	bl	80004a0 <__aeabi_f2d>
 8001cb4:	a33c      	add	r3, pc, #240	; (adr r3, 8001da8 <regulacija_brzine+0x208>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fa93 	bl	80001e4 <__adddf3>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	f7fe ff1b 	bl	8000b00 <__aeabi_d2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <regulacija_brzine+0x22c>)
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e022      	b.n	8001d18 <regulacija_brzine+0x178>
	 else if(v_lref > vel_l)
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <regulacija_brzine+0x22c>)
 8001cd4:	ed93 7a00 	vldr	s14, [r3]
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <regulacija_brzine+0x224>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dd13      	ble.n	8001d10 <regulacija_brzine+0x170>
		// v_lref=vel_l - 0.6;
		 v_lref -= 0.7;
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <regulacija_brzine+0x22c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fbd7 	bl	80004a0 <__aeabi_f2d>
 8001cf2:	a32d      	add	r3, pc, #180	; (adr r3, 8001da8 <regulacija_brzine+0x208>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fa72 	bl	80001e0 <__aeabi_dsub>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	460c      	mov	r4, r1
 8001d00:	4618      	mov	r0, r3
 8001d02:	4621      	mov	r1, r4
 8001d04:	f7fe fefc 	bl	8000b00 <__aeabi_d2f>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <regulacija_brzine+0x22c>)
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e003      	b.n	8001d18 <regulacija_brzine+0x178>
	 else
		 v_lref=vel_l;
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <regulacija_brzine+0x224>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <regulacija_brzine+0x22c>)
 8001d16:	6013      	str	r3, [r2, #0]




	 u_l=pid_brzina(4, 0.105, 0, v_lref, v_l); //kp 4.3 bilo
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <regulacija_brzine+0x22c>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <regulacija_brzine+0x230>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	eeb0 2a47 	vmov.f32	s4, s14
 8001d28:	eef0 1a67 	vmov.f32	s3, s15
 8001d2c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8001dd4 <regulacija_brzine+0x234>
 8001d30:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001dd8 <regulacija_brzine+0x238>
 8001d34:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001d38:	f7ff fada 	bl	80012f0 <pid_brzina>
 8001d3c:	eef0 7a40 	vmov.f32	s15, s0
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <regulacija_brzine+0x23c>)
 8001d42:	edc3 7a00 	vstr	s15, [r3]
	 u_d=pid_brzina(4, 0.105, 0, v_dref, v_r);
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <regulacija_brzine+0x228>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <regulacija_brzine+0x240>)
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	eeb0 2a47 	vmov.f32	s4, s14
 8001d56:	eef0 1a67 	vmov.f32	s3, s15
 8001d5a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8001dd4 <regulacija_brzine+0x234>
 8001d5e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001dd8 <regulacija_brzine+0x238>
 8001d62:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001d66:	f7ff fac3 	bl	80012f0 <pid_brzina>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <regulacija_brzine+0x244>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]

	 motor1_set_PWM((int16_t)u_d); //probaj ovde da dodas mnozenje sa -or ili tako nes
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <regulacija_brzine+0x244>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f8f7 	bl	8001f78 <motor1_set_PWM>
	 motor2_set_PWM((int16_t)u_l);
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <regulacija_brzine+0x23c>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f932 	bl	8002004 <motor2_set_PWM>
}
 8001da0:	bf00      	nop
 8001da2:	bd98      	pop	{r3, r4, r7, pc}
 8001da4:	f3af 8000 	nop.w
 8001da8:	66666666 	.word	0x66666666
 8001dac:	3fe66666 	.word	0x3fe66666
 8001db0:	2000019c 	.word	0x2000019c
 8001db4:	45034000 	.word	0x45034000
 8001db8:	45034000 	.word	0x45034000
 8001dbc:	c5034000 	.word	0xc5034000
 8001dc0:	c5034000 	.word	0xc5034000
 8001dc4:	20000194 	.word	0x20000194
 8001dc8:	200001ac 	.word	0x200001ac
 8001dcc:	200001a4 	.word	0x200001a4
 8001dd0:	20000198 	.word	0x20000198
 8001dd4:	00000000 	.word	0x00000000
 8001dd8:	3dd70a3d 	.word	0x3dd70a3d
 8001ddc:	20000128 	.word	0x20000128
 8001de0:	200001a0 	.word	0x200001a0
 8001de4:	20000124 	.word	0x20000124

08001de8 <init_PWM>:

static uint32_t jedan;
static uint32_t dva;

void init_PWM()
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

	//M1_PWM -> PC7 ( TIM3_CH2), AF2
	//M2_PWM -> PB6 ( TIM4_CH1), AF2
	RCC->AHB1ENR |= (1 << 1);
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <init_PWM+0x17c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a5c      	ldr	r2, [pc, #368]	; (8001f64 <init_PWM+0x17c>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 2);
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <init_PWM+0x17c>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a59      	ldr	r2, [pc, #356]	; (8001f64 <init_PWM+0x17c>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~(0b11 << 6*2);   // PB6
 8001e04:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <init_PWM+0x180>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <init_PWM+0x180>)
 8001e0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e0e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 6*2);
 8001e10:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <init_PWM+0x180>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a54      	ldr	r2, [pc, #336]	; (8001f68 <init_PWM+0x180>)
 8001e16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0b1111 << 6 * 4);
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <init_PWM+0x180>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <init_PWM+0x180>)
 8001e22:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001e26:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 6*4);
 8001e28:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <init_PWM+0x180>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <init_PWM+0x180>)
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e32:	6213      	str	r3, [r2, #32]

	GPIOC->MODER &= ~(0b11 << 7*2);   //PC7
 8001e34:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <init_PWM+0x184>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4c      	ldr	r2, [pc, #304]	; (8001f6c <init_PWM+0x184>)
 8001e3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e3e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b10 << 7*2);
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <init_PWM+0x184>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <init_PWM+0x184>)
 8001e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4a:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[0] &= ~(0b1111 << 7 * 4);
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <init_PWM+0x184>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a46      	ldr	r2, [pc, #280]	; (8001f6c <init_PWM+0x184>)
 8001e52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e56:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 7*4);
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <init_PWM+0x184>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <init_PWM+0x184>)
 8001e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e62:	6213      	str	r3, [r2, #32]

	//TIM3

	RCC->APB1ENR |= (1 << 1);
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <init_PWM+0x17c>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a3e      	ldr	r2, [pc, #248]	; (8001f64 <init_PWM+0x17c>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
		                    // 84MHZ
	TIM3->PSC = 1-1; //84MHZ
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <init_PWM+0x188>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 2100-1; // 20KHZ
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <init_PWM+0x188>)
 8001e78:	f640 0233 	movw	r2, #2099	; 0x833
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = 0.0;
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <init_PWM+0x188>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM3->CCMR1 &= ~(0b111 << 12);
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <init_PWM+0x188>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <init_PWM+0x188>)
 8001e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e8e:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (0b110 << 12);
 8001e90:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <init_PWM+0x188>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a36      	ldr	r2, [pc, #216]	; (8001f70 <init_PWM+0x188>)
 8001e96:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001e9a:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (1 << 11);
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <init_PWM+0x188>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <init_PWM+0x188>)
 8001ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea6:	6193      	str	r3, [r2, #24]

	TIM3->CCR2 = 0UL; // NE ZZNAM STA JE
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <init_PWM+0x188>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->EGR |= (1 << 0);
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <init_PWM+0x188>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <init_PWM+0x188>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6153      	str	r3, [r2, #20]
	TIM3->CCER |=(1 << 4);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <init_PWM+0x188>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	; (8001f70 <init_PWM+0x188>)
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= (1 << 7);
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <init_PWM+0x188>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <init_PWM+0x188>)
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0b1 << 0);
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <init_PWM+0x188>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <init_PWM+0x188>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6013      	str	r3, [r2, #0]

	// TIM4

	RCC->APB1ENR |= (1 << 2);
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <init_PWM+0x17c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <init_PWM+0x17c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
			                    // 84MHZ
	TIM4->PSC = 1-1; //84MHZ
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <init_PWM+0x18c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 2100-1; // 20KHZ
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <init_PWM+0x18c>)
 8001ef2:	f640 0233 	movw	r2, #2099	; 0x833
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR1 = 0.0;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <init_PWM+0x18c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM4->CCMR1 &= ~(0b111 << 4);
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <init_PWM+0x18c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <init_PWM+0x18c>)
 8001f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f08:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0b110 << 4);
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <init_PWM+0x18c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <init_PWM+0x18c>)
 8001f10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f14:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1 << 3);
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <init_PWM+0x18c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <init_PWM+0x18c>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6193      	str	r3, [r2, #24]

	TIM4->CCR1 = 0UL; // NE ZZNAM STA JE
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <init_PWM+0x18c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->EGR |= (1 << 0);
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <init_PWM+0x18c>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <init_PWM+0x18c>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6153      	str	r3, [r2, #20]
	TIM4->CCER |=(1 << 0);
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <init_PWM+0x18c>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <init_PWM+0x18c>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= (1 << 7);
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <init_PWM+0x18c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <init_PWM+0x18c>)
 8001f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4a:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= (0b1 << 0);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <init_PWM+0x18c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <init_PWM+0x18c>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6013      	str	r3, [r2, #0]

}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800

08001f78 <motor1_set_PWM>:


// TODO UINXT promeniti tip duc
void motor1_set_PWM(int16_t duc)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
	 if(duc<0) {
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da06      	bge.n	8001f98 <motor1_set_PWM+0x20>
			// GPIOA->MODER &=  ~(0b01 << 8 * 2);
		 GPIOA->ODR &= ~(0b01 << 8);
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <motor1_set_PWM+0x80>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <motor1_set_PWM+0x80>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	e009      	b.n	8001fac <motor1_set_PWM+0x34>
		}
	 else if(duc>=0){
 8001f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db05      	blt.n	8001fac <motor1_set_PWM+0x34>
		 GPIOA->ODR |= (0b01 << 8);
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <motor1_set_PWM+0x80>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <motor1_set_PWM+0x80>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6153      	str	r3, [r2, #20]
	 }
	 duc = fabs(duc);
 8001fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa63 	bl	800047c <__aeabi_i2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe fd74 	bl	8000ab0 <__aeabi_d2iz>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	f640 0233 	movw	r2, #2099	; 0x833
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	dd02      	ble.n	8001fde <motor1_set_PWM+0x66>
		duc = 2100-1;
 8001fd8:	f640 0333 	movw	r3, #2099	; 0x833
 8001fdc:	80fb      	strh	r3, [r7, #6]

	}
	TIM3->CCR2 =  duc;
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <motor1_set_PWM+0x84>)
 8001fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe4:	6393      	str	r3, [r2, #56]	; 0x38
	jedan = TIM3->CCR2;
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <motor1_set_PWM+0x84>)
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <motor1_set_PWM+0x88>)
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	2000012c 	.word	0x2000012c

08002004 <motor2_set_PWM>:

void motor2_set_PWM(int16_t duc)
{
 8002004:	b5b0      	push	{r4, r5, r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]

	if(duc<0) {
 800200e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da06      	bge.n	8002024 <motor2_set_PWM+0x20>
				GPIOA->ODR &= ~(0b01 << 9);
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <motor2_set_PWM+0x80>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <motor2_set_PWM+0x80>)
 800201c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	e009      	b.n	8002038 <motor2_set_PWM+0x34>
			}
	else if(duc>=0){
 8002024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db05      	blt.n	8002038 <motor2_set_PWM+0x34>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
		GPIOA->ODR |=  (0b01 << 9);
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <motor2_set_PWM+0x80>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <motor2_set_PWM+0x80>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6153      	str	r3, [r2, #20]
	}
	duc = fabs(duc);
 8002038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa1d 	bl	800047c <__aeabi_i2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe fd2e 	bl	8000ab0 <__aeabi_d2iz>
 8002054:	4603      	mov	r3, r0
 8002056:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 8002058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205c:	f640 0233 	movw	r2, #2099	; 0x833
 8002060:	4293      	cmp	r3, r2
 8002062:	dd02      	ble.n	800206a <motor2_set_PWM+0x66>
			duc = 2100-1;
 8002064:	f640 0333 	movw	r3, #2099	; 0x833
 8002068:	80fb      	strh	r3, [r7, #6]

		}
	TIM4->CCR1 = duc;
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <motor2_set_PWM+0x84>)
 800206c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002070:	6353      	str	r3, [r2, #52]	; 0x34
	dva = TIM4->CCR1;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <motor2_set_PWM+0x84>)
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <motor2_set_PWM+0x88>)
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bdb0      	pop	{r4, r5, r7, pc}
 8002082:	bf00      	nop
 8002084:	40020000 	.word	0x40020000
 8002088:	40000800 	.word	0x40000800
 800208c:	20000130 	.word	0x20000130

08002090 <init_senzor>:
#include <stdint.h>
#include <stdbool.h>
#include "biblioteka/tajmer.h"
#include "biblioteka/senzori.h"

void init_senzor(){
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= (1 << 2); // c port
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <init_senzor+0x130>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <init_senzor+0x130>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 0);  // a port
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <init_senzor+0x130>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <init_senzor+0x130>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
	//1.  C12
			GPIOC->MODER &= ~(0b11 << 12*2);  // kliruje
 80020ac:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <init_senzor+0x134>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <init_senzor+0x134>)
 80020b2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80020b6:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 12*2);  // stavlja ga na input
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <init_senzor+0x134>)
 80020ba:	4a42      	ldr	r2, [pc, #264]	; (80021c4 <init_senzor+0x134>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 12*2);  // kliruje pin za input bitova
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <init_senzor+0x134>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a3f      	ldr	r2, [pc, #252]	; (80021c4 <init_senzor+0x134>)
 80020c6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80020ca:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 12*2);  // Setujem pull-down
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <init_senzor+0x134>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <init_senzor+0x134>)
 80020d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d6:	60d3      	str	r3, [r2, #12]
		//2.   C3
			GPIOC->MODER &= ~(0b11 << 3*2);  // kliruje
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <init_senzor+0x134>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a39      	ldr	r2, [pc, #228]	; (80021c4 <init_senzor+0x134>)
 80020de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020e2:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 3*2);  // stavlja ga na input
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <init_senzor+0x134>)
 80020e6:	4a37      	ldr	r2, [pc, #220]	; (80021c4 <init_senzor+0x134>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 3*2);  // kliruje pin za input bitova
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <init_senzor+0x134>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a34      	ldr	r2, [pc, #208]	; (80021c4 <init_senzor+0x134>)
 80020f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020f6:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 3*2);  // Setujem pull-down
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <init_senzor+0x134>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <init_senzor+0x134>)
 80020fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002102:	60d3      	str	r3, [r2, #12]
		//3.  A15
			GPIOA->MODER &= ~(0b11 << 15*2);  // kliruje
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <init_senzor+0x138>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2f      	ldr	r2, [pc, #188]	; (80021c8 <init_senzor+0x138>)
 800210a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800210e:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (0b00 << 15*2);  // stavlja ga na input
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <init_senzor+0x138>)
 8002112:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <init_senzor+0x138>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6013      	str	r3, [r2, #0]
			GPIOA->PUPDR &= ~(0b11 << 15*2);  // kliruje pin za input bitova
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <init_senzor+0x138>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <init_senzor+0x138>)
 800211e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002122:	60d3      	str	r3, [r2, #12]
			GPIOA->PUPDR |= (0b10 << 15*2);  // Setujem pull-down
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <init_senzor+0x138>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <init_senzor+0x138>)
 800212a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800212e:	60d3      	str	r3, [r2, #12]

			//ZADNJA STRANA
			//1.  c13
			GPIOC->MODER &= ~(0b11 << 13*2);  // kliruje
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <init_senzor+0x134>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <init_senzor+0x134>)
 8002136:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800213a:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 13*2);  // stavlja ga na input
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <init_senzor+0x134>)
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <init_senzor+0x134>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 13*2);  // kliruje pin za input bitova
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <init_senzor+0x134>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <init_senzor+0x134>)
 800214a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800214e:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 13*2);  // Setujem pull-down
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <init_senzor+0x134>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <init_senzor+0x134>)
 8002156:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800215a:	60d3      	str	r3, [r2, #12]
			//2.   C0
			GPIOC->MODER &= ~(0b11 << 0*2);  // kliruje
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <init_senzor+0x134>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <init_senzor+0x134>)
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 0*2);  // stavlja ga na input
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <init_senzor+0x134>)
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <init_senzor+0x134>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 0*2);  // kliruje pin za input bitova
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <init_senzor+0x134>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <init_senzor+0x134>)
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 0*2);  // Setujem pull-down
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <init_senzor+0x134>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <init_senzor+0x134>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	60d3      	str	r3, [r2, #12]
			//3.  C2
			GPIOC->MODER &= ~(0b11 << 2*2);  // kliruje
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <init_senzor+0x134>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <init_senzor+0x134>)
 800218e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002192:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 2*2);  // stavlja ga na input
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <init_senzor+0x134>)
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <init_senzor+0x134>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 2*2);  // kliruje pin za input bitova
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <init_senzor+0x134>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <init_senzor+0x134>)
 80021a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021a6:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 2*2);  // Setujem pull-down*/
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <init_senzor+0x134>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <init_senzor+0x134>)
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020000 	.word	0x40020000

080021cc <PCA9685_WriteReg>:


char data;
 uint8_t data_rec[6];

 void PCA9685_WriteReg(char regAddr, char data) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	71bb      	strb	r3, [r7, #6]
     write(regAddr,data);
 80021dc:	79ba      	ldrb	r2, [r7, #6]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f84b 	bl	800227e <write>
 }
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <PCA9685_SetPWM>:

 void PCA9685_SetPWM(char channel, int on, int off) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	73fb      	strb	r3, [r7, #15]
     char data[4];
     data[0] = on & 0xFF;       // Lower 8 bits of ON time
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	753b      	strb	r3, [r7, #20]
     data[1] = (on >> 8) & 0x0F; // Upper 4 bits of ON time
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	121b      	asrs	r3, r3, #8
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	b2db      	uxtb	r3, r3
 8002210:	757b      	strb	r3, [r7, #21]
     data[2] = off & 0xFF;       // Lower 8 bits of OFF time
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	75bb      	strb	r3, [r7, #22]
     data[3] = (off >> 8) & 0x0F; // Upper 4 bits of OFF time
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	121b      	asrs	r3, r3, #8
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	b2db      	uxtb	r3, r3
 8002224:	75fb      	strb	r3, [r7, #23]

     write(0x06 + 4 * channel,data);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3306      	adds	r3, #6
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f107 0214 	add.w	r2, r7, #20
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f820 	bl	800227e <write>

 }
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <PCA9685_Init>:

 void PCA9685_Init() {
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
     PCA9685_WriteReg(0x00, 0x20);  // MODE1: Enable auto-increment
 800224a:	2120      	movs	r1, #32
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff ffbd 	bl	80021cc <PCA9685_WriteReg>
     PCA9685_WriteReg(0x01, 0x04);  // MODE2: Configure output mode
 8002252:	2104      	movs	r1, #4
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff ffb9 	bl	80021cc <PCA9685_WriteReg>
 }
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}

0800225e <SetServoPWM>:

 void SetServoPWM(char channel, int pulseLength) {
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	6039      	str	r1, [r7, #0]
 8002268:	71fb      	strb	r3, [r7, #7]
     PCA9685_SetPWM(channel, 0, pulseLength);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ffbd 	bl	80021f0 <PCA9685_SetPWM>
 }
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <write>:

 void write (uint8_t reg, char value)
 {
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	460a      	mov	r2, r1
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4613      	mov	r3, r2
 800228c:	71bb      	strb	r3, [r7, #6]
 	char data[1];
 	data[0] = value;
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	733b      	strb	r3, [r7, #12]

 	i2c1_BurstWrite( DEVICE_ADDR, reg,1, data) ;
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	79f9      	ldrb	r1, [r7, #7]
 8002298:	2201      	movs	r2, #1
 800229a:	2040      	movs	r0, #64	; 0x40
 800229c:	f7fe fd08 	bl	8000cb0 <i2c1_BurstWrite>
 }
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <tajmer_init>:
static float c=0;



void tajmer_init()
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  tim2_init ();
 80022ac:	f000 f80a 	bl	80022c4 <tim2_init>

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <enc_init>:

void enc_init(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	 enc1_init();
 80022b8:	f000 f85e 	bl	8002378 <enc1_init>
	 enc2_init();
 80022bc:	f000 f8ee 	bl	800249c <enc2_init>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <tim2_init>:

static void
tim2_init ()
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= (0b1 << 0);
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <tim2_init+0xa8>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a27      	ldr	r2, [pc, #156]	; (800236c <tim2_init+0xa8>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44

  // 84MHz -> 1MHz
  TIM1->PSC = 84 - 1;
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <tim2_init+0xac>)
 80022d8:	2253      	movs	r2, #83	; 0x53
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  // 1MHz -> 1kHz
  TIM1->ARR = 1000 - 1;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <tim2_init+0xac>)
 80022de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM1->CR1 &= ~(0b1 << 1);
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <tim2_init+0xac>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a21      	ldr	r2, [pc, #132]	; (8002370 <tim2_init+0xac>)
 80022ea:	f023 0302 	bic.w	r3, r3, #2
 80022ee:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~(0b1 << 2);
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <tim2_init+0xac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <tim2_init+0xac>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	6013      	str	r3, [r2, #0]

  TIM1->EGR |= (0b1 << 0);
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <tim2_init+0xac>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <tim2_init+0xac>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6153      	str	r3, [r2, #20]

  TIM1->DIER |= (0b1 << 0);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <tim2_init+0xac>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <tim2_init+0xac>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	60d3      	str	r3, [r2, #12]

  while (!(TIM1->SR & (0b1 << 0)))
 8002314:	e000      	b.n	8002318 <tim2_init+0x54>
    {
      __NOP();
 8002316:	bf00      	nop
  while (!(TIM1->SR & (0b1 << 0)))
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <tim2_init+0xac>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f8      	beq.n	8002316 <tim2_init+0x52>
    }
  TIM1->SR &= ~(0b1 << 0);
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <tim2_init+0xac>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	4a11      	ldr	r2, [pc, #68]	; (8002370 <tim2_init+0xac>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6113      	str	r3, [r2, #16]

  TIM1->CR1 |= (0b1 << 2);
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <tim2_init+0xac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <tim2_init+0xac>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6013      	str	r3, [r2, #0]

  uint8_t const TIM1_PREKID = 25;
 800233c:	2319      	movs	r3, #25
 800233e:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[0] |= (0b1 << TIM1_PREKID);
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <tim2_init+0xb0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	79fa      	ldrb	r2, [r7, #7]
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4611      	mov	r1, r2
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <tim2_init+0xb0>)
 8002350:	430b      	orrs	r3, r1
 8002352:	6013      	str	r3, [r2, #0]

  TIM1->CR1 |= (0b1 << 0);
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <tim2_init+0xac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <tim2_init+0xac>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023800 	.word	0x40023800
 8002370:	40010000 	.word	0x40010000
 8002374:	e000e100 	.word	0xe000e100

08002378 <enc1_init>:

static void enc1_init()
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // A port
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <enc1_init+0xe8>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4a37      	ldr	r2, [pc, #220]	; (8002460 <enc1_init+0xe8>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1); // B port
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <enc1_init+0xe8>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <enc1_init+0xe8>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	6313      	str	r3, [r2, #48]	; 0x30



	GPIOB->MODER |=  (0b10 << 3*2); //B3
 8002394:	4b33      	ldr	r3, [pc, #204]	; (8002464 <enc1_init+0xec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <enc1_init+0xec>)
 800239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 5*2); //A5
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <enc1_init+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <enc1_init+0xf0>)
 80023a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023aa:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |=  (0b0001 << 3* 4);
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <enc1_init+0xec>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <enc1_init+0xec>)
 80023b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0b0001 << 5* 4);//SAD OVDE OBRNUO
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <enc1_init+0xf0>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <enc1_init+0xf0>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c2:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 0);
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <enc1_init+0xe8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a25      	ldr	r2, [pc, #148]	; (8002460 <enc1_init+0xe8>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 0;
 80023d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF;
 80023d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c


	TIM2->SMCR &= ~(0b111 << 0 * 3);
 80023e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	f023 0307 	bic.w	r3, r3, #7
 80023f0:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |=  (0b011 << 0 * 3);
 80023f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023fc:	f043 0303 	orr.w	r3, r3, #3
 8002400:	6093      	str	r3, [r2, #8]

	TIM2->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8002402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	f023 0303 	bic.w	r3, r3, #3
 8002414:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8002416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6193      	str	r3, [r2, #24]

	TIM2->CR1 |= (0b1 << 0);
 800242a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= (0b1 << 0);
 800243a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6153      	str	r3, [r2, #20]

	TIM2->CNT = 65536/2;
 800244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40020400 	.word	0x40020400
 8002468:	40020000 	.word	0x40020000

0800246c <enc1_GetInc>:

int16_t enc1_GetInc()
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
	int16_t cnt = TIM2->CNT- 65536/2;
 8002472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	b29b      	uxth	r3, r3
 800247a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800247e:	b29b      	uxth	r3, r3
 8002480:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 65536/2;
 8002482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 800248c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <enc2_init>:


static void enc2_init()
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // a port
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <enc2_init+0xd4>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4a32      	ldr	r2, [pc, #200]	; (8002570 <enc2_init+0xd4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= (0b10 << 0*2); // A0
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <enc2_init+0xd8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a30      	ldr	r2, [pc, #192]	; (8002574 <enc2_init+0xd8>)
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (0b10 << 1*2); // A1
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <enc2_init+0xd8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2d      	ldr	r2, [pc, #180]	; (8002574 <enc2_init+0xd8>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6013      	str	r3, [r2, #0]

		GPIOA->OSPEEDR |= (0b11 << 0*2);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <enc2_init+0xd8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <enc2_init+0xd8>)
 80024ca:	f043 0303 	orr.w	r3, r3, #3
 80024ce:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0b11 << 1*2);
 80024d0:	4b28      	ldr	r3, [pc, #160]	; (8002574 <enc2_init+0xd8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <enc2_init+0xd8>)
 80024d6:	f043 030c 	orr.w	r3, r3, #12
 80024da:	6093      	str	r3, [r2, #8]

		GPIOA->AFR[0] |= (0b0010<< 0*4);
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <enc2_init+0xd8>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <enc2_init+0xd8>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (0b0010 << 1*4);
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <enc2_init+0xd8>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <enc2_init+0xd8>)
 80024ee:	f043 0320 	orr.w	r3, r3, #32
 80024f2:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 3);
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <enc2_init+0xd4>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <enc2_init+0xd4>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->PSC = 0;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <enc2_init+0xdc>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xFFFF;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <enc2_init+0xdc>)
 8002508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM5->SMCR &= ~(0b111 << 0 * 3);
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <enc2_init+0xdc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4a19      	ldr	r2, [pc, #100]	; (8002578 <enc2_init+0xdc>)
 8002514:	f023 0307 	bic.w	r3, r3, #7
 8002518:	6093      	str	r3, [r2, #8]
	TIM5->SMCR |=  (0b011 << 0 * 3);
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <enc2_init+0xdc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <enc2_init+0xdc>)
 8002520:	f043 0303 	orr.w	r3, r3, #3
 8002524:	6093      	str	r3, [r2, #8]

	TIM5->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <enc2_init+0xdc>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a13      	ldr	r2, [pc, #76]	; (8002578 <enc2_init+0xdc>)
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	f023 0303 	bic.w	r3, r3, #3
 8002534:	6193      	str	r3, [r2, #24]
	TIM5->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <enc2_init+0xdc>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <enc2_init+0xdc>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6193      	str	r3, [r2, #24]

	TIM5->CR1 |= (0b1 << 0);
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <enc2_init+0xdc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <enc2_init+0xdc>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6013      	str	r3, [r2, #0]
	TIM5->EGR |= (0b1 << 0);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <enc2_init+0xdc>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <enc2_init+0xdc>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6153      	str	r3, [r2, #20]

	TIM5->CNT = 65536/2;
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <enc2_init+0xdc>)
 8002560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40000c00 	.word	0x40000c00

0800257c <enc2_GetInc>:

int16_t enc2_GetInc()
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
	int16_t cnt = TIM5->CNT -65536/2;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <enc2_GetInc+0x2c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b29b      	uxth	r3, r3
 8002588:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800258c:	b29b      	uxth	r3, r3
 800258e:	80fb      	strh	r3, [r7, #6]
	TIM5->CNT = 65536/2;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <enc2_GetInc+0x2c>)
 8002592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 8002598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40000c00 	.word	0x40000c00

080025ac <TIM1_UP_TIM10_IRQHandler>:
	theta=nova;
}


void TIM1_UP_TIM10_IRQHandler()
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	ed2d 8b06 	vpush	{d8-d10}
 80025b2:	af00      	add	r7, sp, #0

  if ((TIM1->SR & (0b1 << 0)) == (0b1 << 0))
 80025b4:	4b97      	ldr	r3, [pc, #604]	; (8002814 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 8115 	bne.w	80027ec <TIM1_UP_TIM10_IRQHandler+0x240>
    {

	  odometrija(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fe fc5e 	bl	8000e84 <odometrija>

	  regulacija_brzine();
 80025c8:	f7ff faea 	bl	8001ba0 <regulacija_brzine>

	  a = get_x();
 80025cc:	f7fe fdac 	bl	8001128 <get_x>
 80025d0:	eef0 7a40 	vmov.f32	s15, s0
 80025d4:	4b90      	ldr	r3, [pc, #576]	; (8002818 <TIM1_UP_TIM10_IRQHandler+0x26c>)
 80025d6:	edc3 7a00 	vstr	s15, [r3]
	  b = get_y();
 80025da:	f7fe fdb3 	bl	8001144 <get_y>
 80025de:	eef0 7a40 	vmov.f32	s15, s0
 80025e2:	4b8e      	ldr	r3, [pc, #568]	; (800281c <TIM1_UP_TIM10_IRQHandler+0x270>)
 80025e4:	edc3 7a00 	vstr	s15, [r3]
	  c = get_theta();
 80025e8:	f7fe fdba 	bl	8001160 <get_theta>
 80025ec:	eef0 7a40 	vmov.f32	s15, s0
 80025f0:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <TIM1_UP_TIM10_IRQHandler+0x274>)
 80025f2:	edc3 7a00 	vstr	s15, [r3]
	  if(test==1){
 80025f6:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <TIM1_UP_TIM10_IRQHandler+0x278>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <TIM1_UP_TIM10_IRQHandler+0x64>
		  pid_init();
 80025fe:	f7fe fdd9 	bl	80011b4 <pid_init>
		  racunanje_brzine(0,0);
 8002602:	eddf 0a89 	vldr	s1, [pc, #548]	; 8002828 <TIM1_UP_TIM10_IRQHandler+0x27c>
 8002606:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002828 <TIM1_UP_TIM10_IRQHandler+0x27c>
 800260a:	f7fe ff15 	bl	8001438 <racunanje_brzine>
 800260e:	e058      	b.n	80026c2 <TIM1_UP_TIM10_IRQHandler+0x116>
	  }
	  else{
	  if (sistemsko_vreme % vreme_pozicija == 0){
 8002610:	4b86      	ldr	r3, [pc, #536]	; (800282c <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a86      	ldr	r2, [pc, #536]	; (8002830 <TIM1_UP_TIM10_IRQHandler+0x284>)
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	fbb3 f1f2 	udiv	r1, r3, r2
 800261c:	fb02 f201 	mul.w	r2, r2, r1
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d14d      	bne.n	80026c2 <TIM1_UP_TIM10_IRQHandler+0x116>
		 if(faza1==0){
 8002626:	4b83      	ldr	r3, [pc, #524]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d126      	bne.n	800267c <TIM1_UP_TIM10_IRQHandler+0xd0>
		  		  regulacija_pozicije(get_x(), get_y(), get_theta(), get_x(),  get_y(),  get_theta());
 800262e:	f7fe fd7b 	bl	8001128 <get_x>
 8002632:	eeb0 8a40 	vmov.f32	s16, s0
 8002636:	f7fe fd85 	bl	8001144 <get_y>
 800263a:	eef0 8a40 	vmov.f32	s17, s0
 800263e:	f7fe fd8f 	bl	8001160 <get_theta>
 8002642:	eeb0 9a40 	vmov.f32	s18, s0
 8002646:	f7fe fd6f 	bl	8001128 <get_x>
 800264a:	eef0 9a40 	vmov.f32	s19, s0
 800264e:	f7fe fd79 	bl	8001144 <get_y>
 8002652:	eeb0 aa40 	vmov.f32	s20, s0
 8002656:	f7fe fd83 	bl	8001160 <get_theta>
 800265a:	eef0 7a40 	vmov.f32	s15, s0
 800265e:	eef0 2a67 	vmov.f32	s5, s15
 8002662:	eeb0 2a4a 	vmov.f32	s4, s20
 8002666:	eef0 1a69 	vmov.f32	s3, s19
 800266a:	eeb0 1a49 	vmov.f32	s2, s18
 800266e:	eef0 0a68 	vmov.f32	s1, s17
 8002672:	eeb0 0a48 	vmov.f32	s0, s16
 8002676:	f7fe ff47 	bl	8001508 <regulacija_pozicije>
 800267a:	e022      	b.n	80026c2 <TIM1_UP_TIM10_IRQHandler+0x116>
		  	  }
		  else
		  regulacija_pozicije(x, y, theta, get_x(),  get_y(),  get_theta());
 800267c:	4b6e      	ldr	r3, [pc, #440]	; (8002838 <TIM1_UP_TIM10_IRQHandler+0x28c>)
 800267e:	ed93 8a00 	vldr	s16, [r3]
 8002682:	4b6e      	ldr	r3, [pc, #440]	; (800283c <TIM1_UP_TIM10_IRQHandler+0x290>)
 8002684:	edd3 8a00 	vldr	s17, [r3]
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <TIM1_UP_TIM10_IRQHandler+0x294>)
 800268a:	ed93 9a00 	vldr	s18, [r3]
 800268e:	f7fe fd4b 	bl	8001128 <get_x>
 8002692:	eef0 9a40 	vmov.f32	s19, s0
 8002696:	f7fe fd55 	bl	8001144 <get_y>
 800269a:	eeb0 aa40 	vmov.f32	s20, s0
 800269e:	f7fe fd5f 	bl	8001160 <get_theta>
 80026a2:	eef0 7a40 	vmov.f32	s15, s0
 80026a6:	eef0 2a67 	vmov.f32	s5, s15
 80026aa:	eeb0 2a4a 	vmov.f32	s4, s20
 80026ae:	eef0 1a69 	vmov.f32	s3, s19
 80026b2:	eeb0 1a49 	vmov.f32	s2, s18
 80026b6:	eef0 0a68 	vmov.f32	s1, s17
 80026ba:	eeb0 0a48 	vmov.f32	s0, s16
 80026be:	f7fe ff23 	bl	8001508 <regulacija_pozicije>

		  }
	  }
	  if(!(GPIOC->IDR & (1<<11))){
 80026c2:	4b60      	ldr	r3, [pc, #384]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <TIM1_UP_TIM10_IRQHandler+0x13c>
		  sistemsko_vreme++;
 80026ce:	4b57      	ldr	r3, [pc, #348]	; (800282c <TIM1_UP_TIM10_IRQHandler+0x280>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a55      	ldr	r2, [pc, #340]	; (800282c <TIM1_UP_TIM10_IRQHandler+0x280>)
 80026d6:	6013      	str	r3, [r2, #0]
		  if(sistemsko_vreme == 100000)
 80026d8:	4b54      	ldr	r3, [pc, #336]	; (800282c <TIM1_UP_TIM10_IRQHandler+0x280>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d102      	bne.n	80026e8 <TIM1_UP_TIM10_IRQHandler+0x13c>
		     	 flag_100s=true;
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
	  }

	  if((GPIOC->IDR & (1<<0)) | (GPIOC->IDR & (1<<2)) | (GPIOC->IDR & (1<<14))){ //zadnja strana
 80026e8:	4b56      	ldr	r3, [pc, #344]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	431a      	orrs	r2, r3
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	4313      	orrs	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <TIM1_UP_TIM10_IRQHandler+0x18e>
		if(det==1){
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d117      	bne.n	8002740 <TIM1_UP_TIM10_IRQHandler+0x194>
			if(brojac==0){
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <TIM1_UP_TIM10_IRQHandler+0x174>

			 temp=faza1;
 8002718:	4b46      	ldr	r3, [pc, #280]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 800271e:	6013      	str	r3, [r2, #0]
		 }
		  faza1=0;
 8002720:	4b44      	ldr	r3, [pc, #272]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
		  brojac=1;
 8002726:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
		  z=0;
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
		  test=1;
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e002      	b.n	8002740 <TIM1_UP_TIM10_IRQHandler+0x194>
		}

	  }
	  else{
		  z=1;
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]
	  }



	  if((GPIOC->IDR & (1<<3)) | (GPIOC->IDR & (1<<12)) | (GPIOA->IDR & (1<<15))){ //prednja strana
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0208 	and.w	r2, r3, #8
 8002748:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <TIM1_UP_TIM10_IRQHandler+0x298>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	431a      	orrs	r2, r3
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275a:	4313      	orrs	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d018      	beq.n	8002792 <TIM1_UP_TIM10_IRQHandler+0x1e6>
		if(det==0){
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d117      	bne.n	8002798 <TIM1_UP_TIM10_IRQHandler+0x1ec>
			if(brojac==0){
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <TIM1_UP_TIM10_IRQHandler+0x1cc>
			 temp=faza1;
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a38      	ldr	r2, [pc, #224]	; (8002858 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002776:	6013      	str	r3, [r2, #0]
		 }
		   faza1=0;
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
		   brojac=1;
 800277e:	4b35      	ldr	r3, [pc, #212]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
		   p=0;
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
		   test=1;
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <TIM1_UP_TIM10_IRQHandler+0x278>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e002      	b.n	8002798 <TIM1_UP_TIM10_IRQHandler+0x1ec>
		}
	  }
	  else{
		  p=1;
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]
	  }

	  if((brojac==1) & ((z==1) & (p==1))){
 8002798:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4013      	ands	r3, r2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <TIM1_UP_TIM10_IRQHandler+0x240>
		  faza1=temp;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <TIM1_UP_TIM10_IRQHandler+0x288>)
 80027d4:	6013      	str	r3, [r2, #0]
		  temp=0;
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
		  brojac=0;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
		  pid_init();
 80027e2:	f7fe fce7 	bl	80011b4 <pid_init>
		  test=0;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <TIM1_UP_TIM10_IRQHandler+0x278>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
	  else
		  P1=0;
*/
	  }

      TIM1->SR &= ~(0b1 << 0);
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <TIM1_UP_TIM10_IRQHandler+0x268>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6113      	str	r3, [r2, #16]
      if(sistemsko_vreme == 100000)
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <TIM1_UP_TIM10_IRQHandler+0x280>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d102      	bne.n	8002808 <TIM1_UP_TIM10_IRQHandler+0x25c>
    	  flag_100s=true;
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]



}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	ecbd 8b06 	vpop	{d8-d10}
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000
 8002818:	2000015c 	.word	0x2000015c
 800281c:	20000160 	.word	0x20000160
 8002820:	20000164 	.word	0x20000164
 8002824:	20000158 	.word	0x20000158
 8002828:	00000000 	.word	0x00000000
 800282c:	20000190 	.word	0x20000190
 8002830:	20000008 	.word	0x20000008
 8002834:	20000004 	.word	0x20000004
 8002838:	20000138 	.word	0x20000138
 800283c:	2000013c 	.word	0x2000013c
 8002840:	20000140 	.word	0x20000140
 8002844:	40020800 	.word	0x40020800
 8002848:	000186a0 	.word	0x000186a0
 800284c:	20000134 	.word	0x20000134
 8002850:	20000154 	.word	0x20000154
 8002854:	20000144 	.word	0x20000144
 8002858:	20000148 	.word	0x20000148
 800285c:	20000150 	.word	0x20000150
 8002860:	40020000 	.word	0x40020000
 8002864:	2000014c 	.word	0x2000014c

08002868 <uart_init>:
static void
uart6_init ();

void
uart_init ()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  uart6_init ();
 800286c:	f000 f802 	bl	8002874 <uart6_init>
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <uart6_init>:

static void
uart6_init ()
{
 8002874:	b490      	push	{r4, r7}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (0b1 << 0); // Dozvola takta na GPIO Port-u A
 800287a:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <uart6_init+0x250>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a91      	ldr	r2, [pc, #580]	; (8002ac4 <uart6_init+0x250>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB2ENR |= (0b1 << 5); // Dozvola takta na USART6 periferiji
 8002886:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <uart6_init+0x250>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a8e      	ldr	r2, [pc, #568]	; (8002ac4 <uart6_init+0x250>)
 800288c:	f043 0320 	orr.w	r3, r3, #32
 8002890:	6453      	str	r3, [r2, #68]	; 0x44

  uint8_t const TX_PIN = 11; //PC6  PA11
 8002892:	230b      	movs	r3, #11
 8002894:	71fb      	strb	r3, [r7, #7]
  uint8_t const RX_PIN = 12; //PC7   PA12
 8002896:	230c      	movs	r3, #12
 8002898:	71bb      	strb	r3, [r7, #6]

  GPIOA->MODER &= ~(0b11 << TX_PIN * 2);
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <uart6_init+0x254>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	79fa      	ldrb	r2, [r7, #7]
 80028a0:	0052      	lsls	r2, r2, #1
 80028a2:	2103      	movs	r1, #3
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	43d2      	mvns	r2, r2
 80028aa:	4611      	mov	r1, r2
 80028ac:	4a86      	ldr	r2, [pc, #536]	; (8002ac8 <uart6_init+0x254>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << TX_PIN * 2);
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <uart6_init+0x254>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	79fa      	ldrb	r2, [r7, #7]
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	2102      	movs	r1, #2
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4611      	mov	r1, r2
 80028c2:	4a81      	ldr	r2, [pc, #516]	; (8002ac8 <uart6_init+0x254>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6013      	str	r3, [r2, #0]
 GPIOA->MODER &= ~(0b11 << RX_PIN * 2);
 80028c8:	4b7f      	ldr	r3, [pc, #508]	; (8002ac8 <uart6_init+0x254>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	79ba      	ldrb	r2, [r7, #6]
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	2103      	movs	r1, #3
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	43d2      	mvns	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4a7b      	ldr	r2, [pc, #492]	; (8002ac8 <uart6_init+0x254>)
 80028dc:	400b      	ands	r3, r1
 80028de:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << RX_PIN * 2);
 80028e0:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <uart6_init+0x254>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	79ba      	ldrb	r2, [r7, #6]
 80028e6:	0052      	lsls	r2, r2, #1
 80028e8:	2102      	movs	r1, #2
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4a75      	ldr	r2, [pc, #468]	; (8002ac8 <uart6_init+0x254>)
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6013      	str	r3, [r2, #0]

  // Podešavanje da TX pin bude pull up open drain
  // kako bi radio kao half duplex
  GPIOA->OTYPER |= (0b1 << TX_PIN);
 80028f6:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <uart6_init+0x254>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	79fa      	ldrb	r2, [r7, #7]
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <uart6_init+0x254>)
 8002906:	430b      	orrs	r3, r1
 8002908:	6053      	str	r3, [r2, #4]
  GPIOA->PUPDR &= ~(0b11 << TX_PIN * 2);
 800290a:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <uart6_init+0x254>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	0052      	lsls	r2, r2, #1
 8002912:	2103      	movs	r1, #3
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	43d2      	mvns	r2, r2
 800291a:	4611      	mov	r1, r2
 800291c:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <uart6_init+0x254>)
 800291e:	400b      	ands	r3, r1
 8002920:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (0b01 << TX_PIN * 2);
 8002922:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <uart6_init+0x254>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	0052      	lsls	r2, r2, #1
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4a65      	ldr	r2, [pc, #404]	; (8002ac8 <uart6_init+0x254>)
 8002934:	430b      	orrs	r3, r1
 8002936:	60d3      	str	r3, [r2, #12]

  uint8_t const AF = 8;
 8002938:	2308      	movs	r3, #8
 800293a:	717b      	strb	r3, [r7, #5]

  GPIOA->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 800293c:	4a62      	ldr	r2, [pc, #392]	; (8002ac8 <uart6_init+0x254>)
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3308      	adds	r3, #8
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	f002 0207 	and.w	r2, r2, #7
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	210f      	movs	r1, #15
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	43d2      	mvns	r2, r2
 800295a:	4614      	mov	r4, r2
 800295c:	495a      	ldr	r1, [pc, #360]	; (8002ac8 <uart6_init+0x254>)
 800295e:	79fa      	ldrb	r2, [r7, #7]
 8002960:	08d2      	lsrs	r2, r2, #3
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4610      	mov	r0, r2
 8002966:	ea03 0204 	and.w	r2, r3, r4
 800296a:	f100 0308 	add.w	r3, r0, #8
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[TX_PIN / 8] |= (AF << (TX_PIN % 8) * 4);
 8002972:	4a55      	ldr	r2, [pc, #340]	; (8002ac8 <uart6_init+0x254>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3308      	adds	r3, #8
 800297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002980:	7979      	ldrb	r1, [r7, #5]
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	f002 0207 	and.w	r2, r2, #7
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	4614      	mov	r4, r2
 8002990:	494d      	ldr	r1, [pc, #308]	; (8002ac8 <uart6_init+0x254>)
 8002992:	79fa      	ldrb	r2, [r7, #7]
 8002994:	08d2      	lsrs	r2, r2, #3
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4610      	mov	r0, r2
 800299a:	ea43 0204 	orr.w	r2, r3, r4
 800299e:	f100 0308 	add.w	r3, r0, #8
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 80029a6:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <uart6_init+0x254>)
 80029a8:	79bb      	ldrb	r3, [r7, #6]
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3308      	adds	r3, #8
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	79ba      	ldrb	r2, [r7, #6]
 80029b6:	f002 0207 	and.w	r2, r2, #7
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	210f      	movs	r1, #15
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	43d2      	mvns	r2, r2
 80029c4:	4614      	mov	r4, r2
 80029c6:	4940      	ldr	r1, [pc, #256]	; (8002ac8 <uart6_init+0x254>)
 80029c8:	79ba      	ldrb	r2, [r7, #6]
 80029ca:	08d2      	lsrs	r2, r2, #3
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	4610      	mov	r0, r2
 80029d0:	ea03 0204 	and.w	r2, r3, r4
 80029d4:	f100 0308 	add.w	r3, r0, #8
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] |= (AF << (RX_PIN % 8) * 4);
 80029dc:	4a3a      	ldr	r2, [pc, #232]	; (8002ac8 <uart6_init+0x254>)
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3308      	adds	r3, #8
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	7979      	ldrb	r1, [r7, #5]
 80029ec:	79ba      	ldrb	r2, [r7, #6]
 80029ee:	f002 0207 	and.w	r2, r2, #7
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4614      	mov	r4, r2
 80029fa:	4933      	ldr	r1, [pc, #204]	; (8002ac8 <uart6_init+0x254>)
 80029fc:	79ba      	ldrb	r2, [r7, #6]
 80029fe:	08d2      	lsrs	r2, r2, #3
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4610      	mov	r0, r2
 8002a04:	ea43 0204 	orr.w	r2, r3, r4
 8002a08:	f100 0308 	add.w	r3, r0, #8
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  USART6->CR1 &= ~(0b1 << 12); // Dužina poruke
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <uart6_init+0x258>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <uart6_init+0x258>)
 8002a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a1a:	60d3      	str	r3, [r2, #12]
  USART6->CR2 &= ~(0b11 << 12); // Broj stop bitova
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <uart6_init+0x258>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	; (8002acc <uart6_init+0x258>)
 8002a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a26:	6113      	str	r3, [r2, #16]

  // Baudrate = 9600
  //USART6->BRR = 0;
  USART6->BRR &= ~(0xFFFF);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <uart6_init+0x258>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <uart6_init+0x258>)
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	6093      	str	r3, [r2, #8]
  USART6->BRR |= ((546 << 4) | (14 << 0));
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <uart6_init+0x258>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <uart6_init+0x258>)
 8002a3a:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8002a3e:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8002a42:	6093      	str	r3, [r2, #8]

  // Uključivanje TX i RX pinova
  USART6->CR1 |= ((0b1 << 2) | (0b1 << 3));
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <uart6_init+0x258>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <uart6_init+0x258>)
 8002a4a:	f043 030c 	orr.w	r3, r3, #12
 8002a4e:	60d3      	str	r3, [r2, #12]

  // Uključivanje prekida za prihvatanje poruke
  USART6->CR1 |= (0b1 << 5);
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <uart6_init+0x258>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <uart6_init+0x258>)
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	60d3      	str	r3, [r2, #12]

  // Uključivanje Half-duplex komunikacije
  USART6->CR2 &= ~((0b1 << 11) | (0b1 << 14));
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <uart6_init+0x258>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <uart6_init+0x258>)
 8002a62:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a66:	6113      	str	r3, [r2, #16]
  USART6->CR3 &= ~((0b1 << 1) | (0b1 << 5));
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <uart6_init+0x258>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	; (8002acc <uart6_init+0x258>)
 8002a6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a72:	6153      	str	r3, [r2, #20]
  USART6->CR3 |= (0b1 << 3);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <uart6_init+0x258>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <uart6_init+0x258>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6153      	str	r3, [r2, #20]

  // Odabir prekidne rutike koja se izvršava
  uint8_t const USART6_PREKID = 71;
 8002a80:	2347      	movs	r3, #71	; 0x47
 8002a82:	713b      	strb	r3, [r7, #4]
  NVIC->ISER[USART6_PREKID / 32] |= (0b1 << USART6_PREKID % 32);
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <uart6_init+0x25c>)
 8002a86:	793b      	ldrb	r3, [r7, #4]
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	793a      	ldrb	r2, [r7, #4]
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	490c      	ldr	r1, [pc, #48]	; (8002ad0 <uart6_init+0x25c>)
 8002aa0:	793a      	ldrb	r2, [r7, #4]
 8002aa2:	0952      	lsrs	r2, r2, #5
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4303      	orrs	r3, r0
 8002aa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  // Uključivanje UART-a
  USART6->CR1 |= (0b1 << 13);
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <uart6_init+0x258>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <uart6_init+0x258>)
 8002ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc90      	pop	{r4, r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40011400 	.word	0x40011400
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <uart_pisi>:
}

// Piši u buffer
void
uart_pisi (uint8_t podatak)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if (velicina != MAX_VELICINA_BUFFERA)
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <uart_pisi+0xc0>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b1e      	cmp	r3, #30
 8002ae6:	d021      	beq.n	8002b2c <uart_pisi+0x58>
    {
      buffer[index_pisi] = podatak;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <uart_pisi+0xc4>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	4619      	mov	r1, r3
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <uart_pisi+0xc8>)
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <uart_pisi+0xc4>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <uart_pisi+0xcc>)
 8002b00:	fb83 1302 	smull	r1, r3, r3, r2
 8002b04:	4413      	add	r3, r2
 8002b06:	1119      	asrs	r1, r3, #4
 8002b08:	17d3      	asrs	r3, r2, #31
 8002b0a:	1ac9      	subs	r1, r1, r3
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a5b      	subs	r3, r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	1ad1      	subs	r1, r2, r3
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <uart_pisi+0xc4>)
 8002b1a:	701a      	strb	r2, [r3, #0]
      velicina++;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <uart_pisi+0xc0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <uart_pisi+0xc0>)
 8002b28:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_pisi] = podatak;
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
    }
}
 8002b2a:	e02c      	b.n	8002b86 <uart_pisi+0xb2>
      buffer[index_pisi] = podatak;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <uart_pisi+0xc4>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <uart_pisi+0xc8>)
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <uart_pisi+0xc4>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <uart_pisi+0xcc>)
 8002b44:	fb83 1302 	smull	r1, r3, r3, r2
 8002b48:	4413      	add	r3, r2
 8002b4a:	1119      	asrs	r1, r3, #4
 8002b4c:	17d3      	asrs	r3, r2, #31
 8002b4e:	1ac9      	subs	r1, r1, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a5b      	subs	r3, r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	1ad1      	subs	r1, r2, r3
 8002b5a:	b2ca      	uxtb	r2, r1
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <uart_pisi+0xc4>)
 8002b5e:	701a      	strb	r2, [r3, #0]
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <uart_pisi+0xd0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <uart_pisi+0xcc>)
 8002b6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b6e:	4413      	add	r3, r2
 8002b70:	1119      	asrs	r1, r3, #4
 8002b72:	17d3      	asrs	r3, r2, #31
 8002b74:	1ac9      	subs	r1, r1, r3
 8002b76:	460b      	mov	r3, r1
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a5b      	subs	r3, r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	1ad1      	subs	r1, r2, r3
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <uart_pisi+0xd0>)
 8002b84:	701a      	strb	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000186 	.word	0x20000186
 8002b98:	20000187 	.word	0x20000187
 8002b9c:	20000168 	.word	0x20000168
 8002ba0:	88888889 	.word	0x88888889
 8002ba4:	20000188 	.word	0x20000188

08002ba8 <USART6_IRQHandler>:
    }
}

void
USART6_IRQHandler ()
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  if (USART6->SR & (0b1 << 5))
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <USART6_IRQHandler+0x20>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <USART6_IRQHandler+0x1c>
    {
      //input = USART6->DR;
      uart_pisi(USART6->DR);
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <USART6_IRQHandler+0x20>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff88 	bl	8002ad4 <uart_pisi>
    }
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40011400 	.word	0x40011400

08002bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002bd2:	f000 f921 	bl	8002e18 <HAL_Init>

	/* USER CODE BEGIN Init */
	tajmer_init();
 8002bd6:	f7ff fb67 	bl	80022a8 <tajmer_init>
	enc_init();
 8002bda:	f7ff fb6b 	bl	80022b4 <enc_init>
	motor_init();
 8002bde:	f7fe f8c9 	bl	8000d74 <motor_init>
	pid_init();
 8002be2:	f7fe fae7 	bl	80011b4 <pid_init>
	init_PWM();
 8002be6:	f7ff f8ff 	bl	8001de8 <init_PWM>
	uart_init();
 8002bea:	f7ff fe3d 	bl	8002868 <uart_init>
	init_senzor();
 8002bee:	f7ff fa4f 	bl	8002090 <init_senzor>
	I2C1_Init();
 8002bf2:	f7fd ffd5 	bl	8000ba0 <I2C1_Init>
	PCA9685_Init();
 8002bf6:	f7ff fb26 	bl	8002246 <PCA9685_Init>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (0) {
 8002bfa:	bf00      	nop
		motor2_set_PWM(1000);  //TESTIRATI
		motor1_set_PWM(1000);

	}
	while (0) {
 8002bfc:	bf00      	nop
			j = 4;								// x-93 y+100
		}

	}
	while (1) {
		SetServoPWM(0, 1000);  // Set PWM to raw value 1000
 8002bfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff fb2b 	bl	800225e <SetServoPWM>
		for (volatile int i = 0; i < 1000000; i++);  // Delay
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	e002      	b.n	8002c14 <main+0x48>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3301      	adds	r3, #1
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <main+0x54>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	ddf8      	ble.n	8002c0e <main+0x42>
		SetServoPWM(0, 1000);  // Set PWM to raw value 1000
 8002c1c:	e7ef      	b.n	8002bfe <main+0x32>
 8002c1e:	bf00      	nop
 8002c20:	000f423f 	.word	0x000f423f

08002c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c36:	f000 f911 	bl	8002e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40014000 	.word	0x40014000

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_MspInit+0x54>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_MspInit+0x54>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_MspInit+0x54>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_MspInit+0x54>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_MspInit+0x54>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_MspInit+0x54>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	210f      	movs	r1, #15
 8002c8a:	f06f 0001 	mvn.w	r0, #1
 8002c8e:	f000 f9b1 	bl	8002ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0); 
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	2018      	movs	r0, #24
 8002cb6:	f000 f99d 	bl	8002ff4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn); 
 8002cba:	2018      	movs	r0, #24
 8002cbc:	f000 f9b6 	bl	800302c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_InitTick+0xa0>)
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_InitTick+0xa0>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_InitTick+0xa0>)
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cdc:	f107 0210 	add.w	r2, r7, #16
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f9ce 	bl	8003088 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cec:	f000 f9b8 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_InitTick+0xa4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_InitTick+0xac>)
 8002d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000 / 1000) - 1;
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d0c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8002d20:	4809      	ldr	r0, [pc, #36]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d22:	f000 f9e3 	bl	80030ec <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8002d2c:	4806      	ldr	r0, [pc, #24]	; (8002d48 <HAL_InitTick+0xa8>)
 8002d2e:	f000 fa12 	bl	8003156 <HAL_TIM_Base_Start_IT>
 8002d32:	4603      	mov	r3, r0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	200001b4 	.word	0x200001b4
 8002d4c:	40014000 	.word	0x40014000

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002d8a:	f000 fa08 	bl	800319e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200001b4 	.word	0x200001b4

08002d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SystemInit+0x28>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <SystemInit+0x28>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SystemInit+0x28>)
 8002dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db2:	609a      	str	r2, [r3, #8]
#endif
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dca:	e003      	b.n	8002dd4 <LoopCopyDataInit>

08002dcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dd2:	3104      	adds	r1, #4

08002dd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ddc:	d3f6      	bcc.n	8002dcc <CopyDataInit>
  ldr  r2, =_sbss
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002de0:	e002      	b.n	8002de8 <LoopFillZerobss>

08002de2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002de2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de4:	f842 3b04 	str.w	r3, [r2], #4

08002de8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dec:	d3f9      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dee:	f7ff ffd3 	bl	8002d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df2:	f000 fb9f 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df6:	f7ff fee9 	bl	8002bcc <main>
  bx  lr    
 8002dfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dfc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002e00:	08005e10 	.word	0x08005e10
  ldr  r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e08:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002e0c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002e10:	200001f8 	.word	0x200001f8

08002e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC_IRQHandler>
	...

08002e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_Init+0x40>)
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_Init+0x40>)
 8002e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_Init+0x40>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_Init+0x40>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e40:	2003      	movs	r0, #3
 8002e42:	f000 f8cc 	bl	8002fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7ff ff2a 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e4c:	f7ff fefc 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00

08002e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_IncTick+0x20>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_IncTick+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_IncTick+0x24>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000010 	.word	0x20000010
 8002e80:	200001f4 	.word	0x200001f4

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff4c 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003006:	f7ff ff61 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 800300a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f7ff ffb1 	bl	8002f78 <NVIC_EncodePriority>
 8003016:	4602      	mov	r2, r0
 8003018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff80 	bl	8002f24 <__NVIC_SetPriority>
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff54 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	2000000c 	.word	0x2000000c

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4601      	mov	r1, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	08005b98 	.word	0x08005b98

08003088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	220f      	movs	r2, #15
 8003096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCC_GetClockConfig+0x60>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40023c00 	.word	0x40023c00

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e01d      	b.n	800313a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f815 	bl	8003142 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 f968 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d007      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d122      	bne.n	80031fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d11b      	bne.n	80031fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0202 	mvn.w	r2, #2
 80031ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8ee 	bl	80033c2 <HAL_TIM_IC_CaptureCallback>
 80031e6:	e005      	b.n	80031f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8e0 	bl	80033ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8f1 	bl	80033d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d122      	bne.n	800324e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d11b      	bne.n	800324e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f06f 0204 	mvn.w	r2, #4
 800321e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f8c4 	bl	80033c2 <HAL_TIM_IC_CaptureCallback>
 800323a:	e005      	b.n	8003248 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8b6 	bl	80033ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8c7 	bl	80033d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b08      	cmp	r3, #8
 800325a:	d122      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11b      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0208 	mvn.w	r2, #8
 8003272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2204      	movs	r2, #4
 8003278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f89a 	bl	80033c2 <HAL_TIM_IC_CaptureCallback>
 800328e:	e005      	b.n	800329c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f88c 	bl	80033ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f89d 	bl	80033d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d122      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d11b      	bne.n	80032f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0210 	mvn.w	r2, #16
 80032c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2208      	movs	r2, #8
 80032cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f870 	bl	80033c2 <HAL_TIM_IC_CaptureCallback>
 80032e2:	e005      	b.n	80032f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f862 	bl	80033ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f873 	bl	80033d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10e      	bne.n	8003322 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0201 	mvn.w	r2, #1
 800331a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fc81 	bl	8002c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d10e      	bne.n	800334e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d107      	bne.n	800334e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8e3 	bl	8003514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d10e      	bne.n	800337a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d107      	bne.n	800337a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f838 	bl	80033ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b20      	cmp	r3, #32
 8003386:	d10e      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f06f 0220 	mvn.w	r2, #32
 800339e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8ad 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <TIM_Base_SetConfig+0xe4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a31      	ldr	r2, [pc, #196]	; (80034e8 <TIM_Base_SetConfig+0xe8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <TIM_Base_SetConfig+0xec>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <TIM_Base_SetConfig+0xf0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0xe4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01b      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d017      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <TIM_Base_SetConfig+0xe8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a21      	ldr	r2, [pc, #132]	; (80034ec <TIM_Base_SetConfig+0xec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00f      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <TIM_Base_SetConfig+0xf0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <TIM_Base_SetConfig+0xf4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <TIM_Base_SetConfig+0xf8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_Base_SetConfig+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <TIM_Base_SetConfig+0xfc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d108      	bne.n	800349c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <TIM_Base_SetConfig+0xe4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d103      	bne.n	80034d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	615a      	str	r2, [r3, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <__errno>:
 8003528:	4b01      	ldr	r3, [pc, #4]	; (8003530 <__errno+0x8>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000014 	.word	0x20000014

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4e0d      	ldr	r6, [pc, #52]	; (800356c <__libc_init_array+0x38>)
 8003538:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353a:	1ba4      	subs	r4, r4, r6
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	2500      	movs	r5, #0
 8003540:	42a5      	cmp	r5, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	4e0b      	ldr	r6, [pc, #44]	; (8003574 <__libc_init_array+0x40>)
 8003546:	4c0c      	ldr	r4, [pc, #48]	; (8003578 <__libc_init_array+0x44>)
 8003548:	f002 fb18 	bl	8005b7c <_init>
 800354c:	1ba4      	subs	r4, r4, r6
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	2500      	movs	r5, #0
 8003552:	42a5      	cmp	r5, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800355c:	4798      	blx	r3
 800355e:	3501      	adds	r5, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003566:	4798      	blx	r3
 8003568:	3501      	adds	r5, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	08005e08 	.word	0x08005e08
 8003570:	08005e08 	.word	0x08005e08
 8003574:	08005e08 	.word	0x08005e08
 8003578:	08005e0c 	.word	0x08005e0c
 800357c:	00000000 	.word	0x00000000

08003580 <cos>:
 8003580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003582:	ec51 0b10 	vmov	r0, r1, d0
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <cos+0x80>)
 8003588:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800358c:	4293      	cmp	r3, r2
 800358e:	dc06      	bgt.n	800359e <cos+0x1e>
 8003590:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80035f8 <cos+0x78>
 8003594:	f001 fae0 	bl	8004b58 <__kernel_cos>
 8003598:	ec51 0b10 	vmov	r0, r1, d0
 800359c:	e007      	b.n	80035ae <cos+0x2e>
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <cos+0x84>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	dd09      	ble.n	80035b8 <cos+0x38>
 80035a4:	ee10 2a10 	vmov	r2, s0
 80035a8:	460b      	mov	r3, r1
 80035aa:	f7fc fe19 	bl	80001e0 <__aeabi_dsub>
 80035ae:	ec41 0b10 	vmov	d0, r0, r1
 80035b2:	b005      	add	sp, #20
 80035b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b8:	4668      	mov	r0, sp
 80035ba:	f001 f829 	bl	8004610 <__ieee754_rem_pio2>
 80035be:	f000 0003 	and.w	r0, r0, #3
 80035c2:	2801      	cmp	r0, #1
 80035c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80035c8:	ed9d 0b00 	vldr	d0, [sp]
 80035cc:	d007      	beq.n	80035de <cos+0x5e>
 80035ce:	2802      	cmp	r0, #2
 80035d0:	d00e      	beq.n	80035f0 <cos+0x70>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d0de      	beq.n	8003594 <cos+0x14>
 80035d6:	2001      	movs	r0, #1
 80035d8:	f001 fec6 	bl	8005368 <__kernel_sin>
 80035dc:	e7dc      	b.n	8003598 <cos+0x18>
 80035de:	f001 fec3 	bl	8005368 <__kernel_sin>
 80035e2:	ec53 2b10 	vmov	r2, r3, d0
 80035e6:	ee10 0a10 	vmov	r0, s0
 80035ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80035ee:	e7de      	b.n	80035ae <cos+0x2e>
 80035f0:	f001 fab2 	bl	8004b58 <__kernel_cos>
 80035f4:	e7f5      	b.n	80035e2 <cos+0x62>
 80035f6:	bf00      	nop
	...
 8003600:	3fe921fb 	.word	0x3fe921fb
 8003604:	7fefffff 	.word	0x7fefffff

08003608 <sin>:
 8003608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800360a:	ec51 0b10 	vmov	r0, r1, d0
 800360e:	4a20      	ldr	r2, [pc, #128]	; (8003690 <sin+0x88>)
 8003610:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003614:	4293      	cmp	r3, r2
 8003616:	dc07      	bgt.n	8003628 <sin+0x20>
 8003618:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003688 <sin+0x80>
 800361c:	2000      	movs	r0, #0
 800361e:	f001 fea3 	bl	8005368 <__kernel_sin>
 8003622:	ec51 0b10 	vmov	r0, r1, d0
 8003626:	e007      	b.n	8003638 <sin+0x30>
 8003628:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <sin+0x8c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	dd09      	ble.n	8003642 <sin+0x3a>
 800362e:	ee10 2a10 	vmov	r2, s0
 8003632:	460b      	mov	r3, r1
 8003634:	f7fc fdd4 	bl	80001e0 <__aeabi_dsub>
 8003638:	ec41 0b10 	vmov	d0, r0, r1
 800363c:	b005      	add	sp, #20
 800363e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003642:	4668      	mov	r0, sp
 8003644:	f000 ffe4 	bl	8004610 <__ieee754_rem_pio2>
 8003648:	f000 0003 	and.w	r0, r0, #3
 800364c:	2801      	cmp	r0, #1
 800364e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003652:	ed9d 0b00 	vldr	d0, [sp]
 8003656:	d004      	beq.n	8003662 <sin+0x5a>
 8003658:	2802      	cmp	r0, #2
 800365a:	d005      	beq.n	8003668 <sin+0x60>
 800365c:	b970      	cbnz	r0, 800367c <sin+0x74>
 800365e:	2001      	movs	r0, #1
 8003660:	e7dd      	b.n	800361e <sin+0x16>
 8003662:	f001 fa79 	bl	8004b58 <__kernel_cos>
 8003666:	e7dc      	b.n	8003622 <sin+0x1a>
 8003668:	2001      	movs	r0, #1
 800366a:	f001 fe7d 	bl	8005368 <__kernel_sin>
 800366e:	ec53 2b10 	vmov	r2, r3, d0
 8003672:	ee10 0a10 	vmov	r0, s0
 8003676:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800367a:	e7dd      	b.n	8003638 <sin+0x30>
 800367c:	f001 fa6c 	bl	8004b58 <__kernel_cos>
 8003680:	e7f5      	b.n	800366e <sin+0x66>
 8003682:	bf00      	nop
 8003684:	f3af 8000 	nop.w
	...
 8003690:	3fe921fb 	.word	0x3fe921fb
 8003694:	7fefffff 	.word	0x7fefffff

08003698 <atan2>:
 8003698:	f000 b9ca 	b.w	8003a30 <__ieee754_atan2>

0800369c <pow>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	ed2d 8b04 	vpush	{d8-d9}
 80036a4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003978 <pow+0x2dc>
 80036a8:	b08d      	sub	sp, #52	; 0x34
 80036aa:	ec57 6b10 	vmov	r6, r7, d0
 80036ae:	ec55 4b11 	vmov	r4, r5, d1
 80036b2:	f000 fa9d 	bl	8003bf0 <__ieee754_pow>
 80036b6:	f999 3000 	ldrsb.w	r3, [r9]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	eeb0 8a40 	vmov.f32	s16, s0
 80036c2:	eef0 8a60 	vmov.f32	s17, s1
 80036c6:	46c8      	mov	r8, r9
 80036c8:	d05f      	beq.n	800378a <pow+0xee>
 80036ca:	4622      	mov	r2, r4
 80036cc:	462b      	mov	r3, r5
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f7fd f9d7 	bl	8000a84 <__aeabi_dcmpun>
 80036d6:	4683      	mov	fp, r0
 80036d8:	2800      	cmp	r0, #0
 80036da:	d156      	bne.n	800378a <pow+0xee>
 80036dc:	4632      	mov	r2, r6
 80036de:	463b      	mov	r3, r7
 80036e0:	4630      	mov	r0, r6
 80036e2:	4639      	mov	r1, r7
 80036e4:	f7fd f9ce 	bl	8000a84 <__aeabi_dcmpun>
 80036e8:	9001      	str	r0, [sp, #4]
 80036ea:	b1e8      	cbz	r0, 8003728 <pow+0x8c>
 80036ec:	2200      	movs	r2, #0
 80036ee:	2300      	movs	r3, #0
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fd f994 	bl	8000a20 <__aeabi_dcmpeq>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d046      	beq.n	800378a <pow+0xee>
 80036fc:	2301      	movs	r3, #1
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	4b96      	ldr	r3, [pc, #600]	; (800395c <pow+0x2c0>)
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	4b96      	ldr	r3, [pc, #600]	; (8003960 <pow+0x2c4>)
 8003706:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800370a:	2200      	movs	r2, #0
 800370c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003710:	9b00      	ldr	r3, [sp, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003718:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800371c:	d033      	beq.n	8003786 <pow+0xea>
 800371e:	a802      	add	r0, sp, #8
 8003720:	f002 f916 	bl	8005950 <matherr>
 8003724:	bb48      	cbnz	r0, 800377a <pow+0xde>
 8003726:	e05d      	b.n	80037e4 <pow+0x148>
 8003728:	f04f 0a00 	mov.w	sl, #0
 800372c:	f04f 0b00 	mov.w	fp, #0
 8003730:	4652      	mov	r2, sl
 8003732:	465b      	mov	r3, fp
 8003734:	4630      	mov	r0, r6
 8003736:	4639      	mov	r1, r7
 8003738:	f7fd f972 	bl	8000a20 <__aeabi_dcmpeq>
 800373c:	ec4b ab19 	vmov	d9, sl, fp
 8003740:	2800      	cmp	r0, #0
 8003742:	d054      	beq.n	80037ee <pow+0x152>
 8003744:	4652      	mov	r2, sl
 8003746:	465b      	mov	r3, fp
 8003748:	4620      	mov	r0, r4
 800374a:	4629      	mov	r1, r5
 800374c:	f7fd f968 	bl	8000a20 <__aeabi_dcmpeq>
 8003750:	4680      	mov	r8, r0
 8003752:	b318      	cbz	r0, 800379c <pow+0x100>
 8003754:	2301      	movs	r3, #1
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	4b80      	ldr	r3, [pc, #512]	; (800395c <pow+0x2c0>)
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	9b01      	ldr	r3, [sp, #4]
 800375e:	930a      	str	r3, [sp, #40]	; 0x28
 8003760:	9b00      	ldr	r3, [sp, #0]
 8003762:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003766:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800376a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0d5      	beq.n	800371e <pow+0x82>
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <pow+0x2c4>)
 8003774:	2200      	movs	r2, #0
 8003776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800377c:	b11b      	cbz	r3, 8003786 <pow+0xea>
 800377e:	f7ff fed3 	bl	8003528 <__errno>
 8003782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003784:	6003      	str	r3, [r0, #0]
 8003786:	ed9d 8b08 	vldr	d8, [sp, #32]
 800378a:	eeb0 0a48 	vmov.f32	s0, s16
 800378e:	eef0 0a68 	vmov.f32	s1, s17
 8003792:	b00d      	add	sp, #52	; 0x34
 8003794:	ecbd 8b04 	vpop	{d8-d9}
 8003798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379c:	ec45 4b10 	vmov	d0, r4, r5
 80037a0:	f002 f847 	bl	8005832 <finite>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0f0      	beq.n	800378a <pow+0xee>
 80037a8:	4652      	mov	r2, sl
 80037aa:	465b      	mov	r3, fp
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	f7fd f940 	bl	8000a34 <__aeabi_dcmplt>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d0e8      	beq.n	800378a <pow+0xee>
 80037b8:	2301      	movs	r3, #1
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	4b67      	ldr	r3, [pc, #412]	; (800395c <pow+0x2c0>)
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	f999 3000 	ldrsb.w	r3, [r9]
 80037c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80037c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80037cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80037d0:	b913      	cbnz	r3, 80037d8 <pow+0x13c>
 80037d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80037d6:	e7a2      	b.n	800371e <pow+0x82>
 80037d8:	4962      	ldr	r1, [pc, #392]	; (8003964 <pow+0x2c8>)
 80037da:	2000      	movs	r0, #0
 80037dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d19c      	bne.n	800371e <pow+0x82>
 80037e4:	f7ff fea0 	bl	8003528 <__errno>
 80037e8:	2321      	movs	r3, #33	; 0x21
 80037ea:	6003      	str	r3, [r0, #0]
 80037ec:	e7c5      	b.n	800377a <pow+0xde>
 80037ee:	eeb0 0a48 	vmov.f32	s0, s16
 80037f2:	eef0 0a68 	vmov.f32	s1, s17
 80037f6:	f002 f81c 	bl	8005832 <finite>
 80037fa:	9000      	str	r0, [sp, #0]
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f040 8081 	bne.w	8003904 <pow+0x268>
 8003802:	ec47 6b10 	vmov	d0, r6, r7
 8003806:	f002 f814 	bl	8005832 <finite>
 800380a:	2800      	cmp	r0, #0
 800380c:	d07a      	beq.n	8003904 <pow+0x268>
 800380e:	ec45 4b10 	vmov	d0, r4, r5
 8003812:	f002 f80e 	bl	8005832 <finite>
 8003816:	2800      	cmp	r0, #0
 8003818:	d074      	beq.n	8003904 <pow+0x268>
 800381a:	ec53 2b18 	vmov	r2, r3, d8
 800381e:	ee18 0a10 	vmov	r0, s16
 8003822:	4619      	mov	r1, r3
 8003824:	f7fd f92e 	bl	8000a84 <__aeabi_dcmpun>
 8003828:	f999 9000 	ldrsb.w	r9, [r9]
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <pow+0x2c0>)
 800382e:	b1b0      	cbz	r0, 800385e <pow+0x1c2>
 8003830:	2201      	movs	r2, #1
 8003832:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003836:	9b00      	ldr	r3, [sp, #0]
 8003838:	930a      	str	r3, [sp, #40]	; 0x28
 800383a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800383e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003842:	f1b9 0f00 	cmp.w	r9, #0
 8003846:	d0c4      	beq.n	80037d2 <pow+0x136>
 8003848:	4652      	mov	r2, sl
 800384a:	465b      	mov	r3, fp
 800384c:	4650      	mov	r0, sl
 800384e:	4659      	mov	r1, fp
 8003850:	f7fc ffa8 	bl	80007a4 <__aeabi_ddiv>
 8003854:	f1b9 0f02 	cmp.w	r9, #2
 8003858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800385c:	e7c1      	b.n	80037e2 <pow+0x146>
 800385e:	2203      	movs	r2, #3
 8003860:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003864:	900a      	str	r0, [sp, #40]	; 0x28
 8003866:	4629      	mov	r1, r5
 8003868:	4620      	mov	r0, r4
 800386a:	2200      	movs	r2, #0
 800386c:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <pow+0x2cc>)
 800386e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003872:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003876:	f7fc fe6b 	bl	8000550 <__aeabi_dmul>
 800387a:	4604      	mov	r4, r0
 800387c:	460d      	mov	r5, r1
 800387e:	f1b9 0f00 	cmp.w	r9, #0
 8003882:	d124      	bne.n	80038ce <pow+0x232>
 8003884:	4b39      	ldr	r3, [pc, #228]	; (800396c <pow+0x2d0>)
 8003886:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800388a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800388e:	4630      	mov	r0, r6
 8003890:	4652      	mov	r2, sl
 8003892:	465b      	mov	r3, fp
 8003894:	4639      	mov	r1, r7
 8003896:	f7fd f8cd 	bl	8000a34 <__aeabi_dcmplt>
 800389a:	2800      	cmp	r0, #0
 800389c:	d056      	beq.n	800394c <pow+0x2b0>
 800389e:	ec45 4b10 	vmov	d0, r4, r5
 80038a2:	f002 f861 	bl	8005968 <rint>
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	ec51 0b10 	vmov	r0, r1, d0
 80038ae:	f7fd f8b7 	bl	8000a20 <__aeabi_dcmpeq>
 80038b2:	b920      	cbnz	r0, 80038be <pow+0x222>
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <pow+0x2d4>)
 80038b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80038ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038be:	f998 3000 	ldrsb.w	r3, [r8]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d142      	bne.n	800394c <pow+0x2b0>
 80038c6:	f7ff fe2f 	bl	8003528 <__errno>
 80038ca:	2322      	movs	r3, #34	; 0x22
 80038cc:	e78d      	b.n	80037ea <pow+0x14e>
 80038ce:	4b29      	ldr	r3, [pc, #164]	; (8003974 <pow+0x2d8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038d6:	4630      	mov	r0, r6
 80038d8:	4652      	mov	r2, sl
 80038da:	465b      	mov	r3, fp
 80038dc:	4639      	mov	r1, r7
 80038de:	f7fd f8a9 	bl	8000a34 <__aeabi_dcmplt>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d0eb      	beq.n	80038be <pow+0x222>
 80038e6:	ec45 4b10 	vmov	d0, r4, r5
 80038ea:	f002 f83d 	bl	8005968 <rint>
 80038ee:	4622      	mov	r2, r4
 80038f0:	462b      	mov	r3, r5
 80038f2:	ec51 0b10 	vmov	r0, r1, d0
 80038f6:	f7fd f893 	bl	8000a20 <__aeabi_dcmpeq>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1df      	bne.n	80038be <pow+0x222>
 80038fe:	2200      	movs	r2, #0
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <pow+0x2c8>)
 8003902:	e7da      	b.n	80038ba <pow+0x21e>
 8003904:	2200      	movs	r2, #0
 8003906:	2300      	movs	r3, #0
 8003908:	ec51 0b18 	vmov	r0, r1, d8
 800390c:	f7fd f888 	bl	8000a20 <__aeabi_dcmpeq>
 8003910:	2800      	cmp	r0, #0
 8003912:	f43f af3a 	beq.w	800378a <pow+0xee>
 8003916:	ec47 6b10 	vmov	d0, r6, r7
 800391a:	f001 ff8a 	bl	8005832 <finite>
 800391e:	2800      	cmp	r0, #0
 8003920:	f43f af33 	beq.w	800378a <pow+0xee>
 8003924:	ec45 4b10 	vmov	d0, r4, r5
 8003928:	f001 ff83 	bl	8005832 <finite>
 800392c:	2800      	cmp	r0, #0
 800392e:	f43f af2c 	beq.w	800378a <pow+0xee>
 8003932:	2304      	movs	r3, #4
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <pow+0x2c0>)
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	2300      	movs	r3, #0
 800393c:	930a      	str	r3, [sp, #40]	; 0x28
 800393e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003942:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003946:	ed8d 9b08 	vstr	d9, [sp, #32]
 800394a:	e7b8      	b.n	80038be <pow+0x222>
 800394c:	a802      	add	r0, sp, #8
 800394e:	f001 ffff 	bl	8005950 <matherr>
 8003952:	2800      	cmp	r0, #0
 8003954:	f47f af11 	bne.w	800377a <pow+0xde>
 8003958:	e7b5      	b.n	80038c6 <pow+0x22a>
 800395a:	bf00      	nop
 800395c:	08005ba0 	.word	0x08005ba0
 8003960:	3ff00000 	.word	0x3ff00000
 8003964:	fff00000 	.word	0xfff00000
 8003968:	3fe00000 	.word	0x3fe00000
 800396c:	47efffff 	.word	0x47efffff
 8003970:	c7efffff 	.word	0xc7efffff
 8003974:	7ff00000 	.word	0x7ff00000
 8003978:	20000078 	.word	0x20000078

0800397c <sqrt>:
 800397c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003980:	ed2d 8b02 	vpush	{d8}
 8003984:	b08b      	sub	sp, #44	; 0x2c
 8003986:	ec55 4b10 	vmov	r4, r5, d0
 800398a:	f001 f833 	bl	80049f4 <__ieee754_sqrt>
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <sqrt+0xac>)
 8003990:	eeb0 8a40 	vmov.f32	s16, s0
 8003994:	eef0 8a60 	vmov.f32	s17, s1
 8003998:	f993 6000 	ldrsb.w	r6, [r3]
 800399c:	1c73      	adds	r3, r6, #1
 800399e:	d02a      	beq.n	80039f6 <sqrt+0x7a>
 80039a0:	4622      	mov	r2, r4
 80039a2:	462b      	mov	r3, r5
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fd f86c 	bl	8000a84 <__aeabi_dcmpun>
 80039ac:	4607      	mov	r7, r0
 80039ae:	bb10      	cbnz	r0, 80039f6 <sqrt+0x7a>
 80039b0:	f04f 0800 	mov.w	r8, #0
 80039b4:	f04f 0900 	mov.w	r9, #0
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	4620      	mov	r0, r4
 80039be:	4629      	mov	r1, r5
 80039c0:	f7fd f838 	bl	8000a34 <__aeabi_dcmplt>
 80039c4:	b1b8      	cbz	r0, 80039f6 <sqrt+0x7a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <sqrt+0xb0>)
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	9708      	str	r7, [sp, #32]
 80039d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80039d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80039d8:	b9b6      	cbnz	r6, 8003a08 <sqrt+0x8c>
 80039da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80039de:	4668      	mov	r0, sp
 80039e0:	f001 ffb6 	bl	8005950 <matherr>
 80039e4:	b1d0      	cbz	r0, 8003a1c <sqrt+0xa0>
 80039e6:	9b08      	ldr	r3, [sp, #32]
 80039e8:	b11b      	cbz	r3, 80039f2 <sqrt+0x76>
 80039ea:	f7ff fd9d 	bl	8003528 <__errno>
 80039ee:	9b08      	ldr	r3, [sp, #32]
 80039f0:	6003      	str	r3, [r0, #0]
 80039f2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80039f6:	eeb0 0a48 	vmov.f32	s0, s16
 80039fa:	eef0 0a68 	vmov.f32	s1, s17
 80039fe:	b00b      	add	sp, #44	; 0x2c
 8003a00:	ecbd 8b02 	vpop	{d8}
 8003a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fc fec8 	bl	80007a4 <__aeabi_ddiv>
 8003a14:	2e02      	cmp	r6, #2
 8003a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a1a:	d1e0      	bne.n	80039de <sqrt+0x62>
 8003a1c:	f7ff fd84 	bl	8003528 <__errno>
 8003a20:	2321      	movs	r3, #33	; 0x21
 8003a22:	6003      	str	r3, [r0, #0]
 8003a24:	e7df      	b.n	80039e6 <sqrt+0x6a>
 8003a26:	bf00      	nop
 8003a28:	20000078 	.word	0x20000078
 8003a2c:	08005ba4 	.word	0x08005ba4

08003a30 <__ieee754_atan2>:
 8003a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a34:	ec57 6b11 	vmov	r6, r7, d1
 8003a38:	4273      	negs	r3, r6
 8003a3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8003a3e:	4333      	orrs	r3, r6
 8003a40:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003be8 <__ieee754_atan2+0x1b8>
 8003a44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003a48:	4573      	cmp	r3, lr
 8003a4a:	ec51 0b10 	vmov	r0, r1, d0
 8003a4e:	ee11 8a10 	vmov	r8, s2
 8003a52:	d80a      	bhi.n	8003a6a <__ieee754_atan2+0x3a>
 8003a54:	4244      	negs	r4, r0
 8003a56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a5a:	4304      	orrs	r4, r0
 8003a5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8003a60:	4574      	cmp	r4, lr
 8003a62:	468c      	mov	ip, r1
 8003a64:	ee10 9a10 	vmov	r9, s0
 8003a68:	d907      	bls.n	8003a7a <__ieee754_atan2+0x4a>
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	f7fc fbb9 	bl	80001e4 <__adddf3>
 8003a72:	ec41 0b10 	vmov	d0, r0, r1
 8003a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8003a7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003a82:	4334      	orrs	r4, r6
 8003a84:	d103      	bne.n	8003a8e <__ieee754_atan2+0x5e>
 8003a86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8a:	f001 bd29 	b.w	80054e0 <atan>
 8003a8e:	17bc      	asrs	r4, r7, #30
 8003a90:	f004 0402 	and.w	r4, r4, #2
 8003a94:	ea53 0909 	orrs.w	r9, r3, r9
 8003a98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8003a9c:	d107      	bne.n	8003aae <__ieee754_atan2+0x7e>
 8003a9e:	2c02      	cmp	r4, #2
 8003aa0:	d073      	beq.n	8003b8a <__ieee754_atan2+0x15a>
 8003aa2:	2c03      	cmp	r4, #3
 8003aa4:	d1e5      	bne.n	8003a72 <__ieee754_atan2+0x42>
 8003aa6:	a13e      	add	r1, pc, #248	; (adr r1, 8003ba0 <__ieee754_atan2+0x170>)
 8003aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aac:	e7e1      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003aae:	ea52 0808 	orrs.w	r8, r2, r8
 8003ab2:	d106      	bne.n	8003ac2 <__ieee754_atan2+0x92>
 8003ab4:	f1bc 0f00 	cmp.w	ip, #0
 8003ab8:	da6b      	bge.n	8003b92 <__ieee754_atan2+0x162>
 8003aba:	a13b      	add	r1, pc, #236	; (adr r1, 8003ba8 <__ieee754_atan2+0x178>)
 8003abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ac0:	e7d7      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003ac2:	4572      	cmp	r2, lr
 8003ac4:	d120      	bne.n	8003b08 <__ieee754_atan2+0xd8>
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d111      	bne.n	8003aee <__ieee754_atan2+0xbe>
 8003aca:	2c02      	cmp	r4, #2
 8003acc:	d007      	beq.n	8003ade <__ieee754_atan2+0xae>
 8003ace:	2c03      	cmp	r4, #3
 8003ad0:	d009      	beq.n	8003ae6 <__ieee754_atan2+0xb6>
 8003ad2:	2c01      	cmp	r4, #1
 8003ad4:	d155      	bne.n	8003b82 <__ieee754_atan2+0x152>
 8003ad6:	a136      	add	r1, pc, #216	; (adr r1, 8003bb0 <__ieee754_atan2+0x180>)
 8003ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003adc:	e7c9      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003ade:	a136      	add	r1, pc, #216	; (adr r1, 8003bb8 <__ieee754_atan2+0x188>)
 8003ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae4:	e7c5      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003ae6:	a136      	add	r1, pc, #216	; (adr r1, 8003bc0 <__ieee754_atan2+0x190>)
 8003ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aec:	e7c1      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003aee:	2c02      	cmp	r4, #2
 8003af0:	d04b      	beq.n	8003b8a <__ieee754_atan2+0x15a>
 8003af2:	2c03      	cmp	r4, #3
 8003af4:	d0d7      	beq.n	8003aa6 <__ieee754_atan2+0x76>
 8003af6:	2c01      	cmp	r4, #1
 8003af8:	f04f 0000 	mov.w	r0, #0
 8003afc:	d102      	bne.n	8003b04 <__ieee754_atan2+0xd4>
 8003afe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b02:	e7b6      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b04:	2100      	movs	r1, #0
 8003b06:	e7b4      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b08:	4573      	cmp	r3, lr
 8003b0a:	d0d3      	beq.n	8003ab4 <__ieee754_atan2+0x84>
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	151b      	asrs	r3, r3, #20
 8003b10:	2b3c      	cmp	r3, #60	; 0x3c
 8003b12:	dc1e      	bgt.n	8003b52 <__ieee754_atan2+0x122>
 8003b14:	2f00      	cmp	r7, #0
 8003b16:	da01      	bge.n	8003b1c <__ieee754_atan2+0xec>
 8003b18:	333c      	adds	r3, #60	; 0x3c
 8003b1a:	db1e      	blt.n	8003b5a <__ieee754_atan2+0x12a>
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	463b      	mov	r3, r7
 8003b20:	f7fc fe40 	bl	80007a4 <__aeabi_ddiv>
 8003b24:	ec41 0b10 	vmov	d0, r0, r1
 8003b28:	f001 fe7a 	bl	8005820 <fabs>
 8003b2c:	f001 fcd8 	bl	80054e0 <atan>
 8003b30:	ec51 0b10 	vmov	r0, r1, d0
 8003b34:	2c01      	cmp	r4, #1
 8003b36:	d013      	beq.n	8003b60 <__ieee754_atan2+0x130>
 8003b38:	2c02      	cmp	r4, #2
 8003b3a:	d015      	beq.n	8003b68 <__ieee754_atan2+0x138>
 8003b3c:	2c00      	cmp	r4, #0
 8003b3e:	d098      	beq.n	8003a72 <__ieee754_atan2+0x42>
 8003b40:	a321      	add	r3, pc, #132	; (adr r3, 8003bc8 <__ieee754_atan2+0x198>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f7fc fb4b 	bl	80001e0 <__aeabi_dsub>
 8003b4a:	a321      	add	r3, pc, #132	; (adr r3, 8003bd0 <__ieee754_atan2+0x1a0>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	e014      	b.n	8003b7c <__ieee754_atan2+0x14c>
 8003b52:	a121      	add	r1, pc, #132	; (adr r1, 8003bd8 <__ieee754_atan2+0x1a8>)
 8003b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b58:	e7ec      	b.n	8003b34 <__ieee754_atan2+0x104>
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	e7e9      	b.n	8003b34 <__ieee754_atan2+0x104>
 8003b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b64:	4619      	mov	r1, r3
 8003b66:	e784      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b68:	a317      	add	r3, pc, #92	; (adr r3, 8003bc8 <__ieee754_atan2+0x198>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fb37 	bl	80001e0 <__aeabi_dsub>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	a116      	add	r1, pc, #88	; (adr r1, 8003bd0 <__ieee754_atan2+0x1a0>)
 8003b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b7c:	f7fc fb30 	bl	80001e0 <__aeabi_dsub>
 8003b80:	e777      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b82:	a117      	add	r1, pc, #92	; (adr r1, 8003be0 <__ieee754_atan2+0x1b0>)
 8003b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b88:	e773      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b8a:	a111      	add	r1, pc, #68	; (adr r1, 8003bd0 <__ieee754_atan2+0x1a0>)
 8003b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b90:	e76f      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b92:	a111      	add	r1, pc, #68	; (adr r1, 8003bd8 <__ieee754_atan2+0x1a8>)
 8003b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b98:	e76b      	b.n	8003a72 <__ieee754_atan2+0x42>
 8003b9a:	bf00      	nop
 8003b9c:	f3af 8000 	nop.w
 8003ba0:	54442d18 	.word	0x54442d18
 8003ba4:	c00921fb 	.word	0xc00921fb
 8003ba8:	54442d18 	.word	0x54442d18
 8003bac:	bff921fb 	.word	0xbff921fb
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	bfe921fb 	.word	0xbfe921fb
 8003bb8:	7f3321d2 	.word	0x7f3321d2
 8003bbc:	4002d97c 	.word	0x4002d97c
 8003bc0:	7f3321d2 	.word	0x7f3321d2
 8003bc4:	c002d97c 	.word	0xc002d97c
 8003bc8:	33145c07 	.word	0x33145c07
 8003bcc:	3ca1a626 	.word	0x3ca1a626
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	400921fb 	.word	0x400921fb
 8003bd8:	54442d18 	.word	0x54442d18
 8003bdc:	3ff921fb 	.word	0x3ff921fb
 8003be0:	54442d18 	.word	0x54442d18
 8003be4:	3fe921fb 	.word	0x3fe921fb
 8003be8:	7ff00000 	.word	0x7ff00000
 8003bec:	00000000 	.word	0x00000000

08003bf0 <__ieee754_pow>:
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	b091      	sub	sp, #68	; 0x44
 8003bf6:	ed8d 1b00 	vstr	d1, [sp]
 8003bfa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003bfe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003c02:	ea58 0302 	orrs.w	r3, r8, r2
 8003c06:	ec57 6b10 	vmov	r6, r7, d0
 8003c0a:	f000 84be 	beq.w	800458a <__ieee754_pow+0x99a>
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <__ieee754_pow+0x208>)
 8003c10:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003c14:	429c      	cmp	r4, r3
 8003c16:	463d      	mov	r5, r7
 8003c18:	ee10 aa10 	vmov	sl, s0
 8003c1c:	dc09      	bgt.n	8003c32 <__ieee754_pow+0x42>
 8003c1e:	d103      	bne.n	8003c28 <__ieee754_pow+0x38>
 8003c20:	b93e      	cbnz	r6, 8003c32 <__ieee754_pow+0x42>
 8003c22:	45a0      	cmp	r8, r4
 8003c24:	dc0d      	bgt.n	8003c42 <__ieee754_pow+0x52>
 8003c26:	e001      	b.n	8003c2c <__ieee754_pow+0x3c>
 8003c28:	4598      	cmp	r8, r3
 8003c2a:	dc02      	bgt.n	8003c32 <__ieee754_pow+0x42>
 8003c2c:	4598      	cmp	r8, r3
 8003c2e:	d10e      	bne.n	8003c4e <__ieee754_pow+0x5e>
 8003c30:	b16a      	cbz	r2, 8003c4e <__ieee754_pow+0x5e>
 8003c32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c3a:	ea54 030a 	orrs.w	r3, r4, sl
 8003c3e:	f000 84a4 	beq.w	800458a <__ieee754_pow+0x99a>
 8003c42:	486e      	ldr	r0, [pc, #440]	; (8003dfc <__ieee754_pow+0x20c>)
 8003c44:	b011      	add	sp, #68	; 0x44
 8003c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	f001 be85 	b.w	8005958 <nan>
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	da53      	bge.n	8003cfa <__ieee754_pow+0x10a>
 8003c52:	4b6b      	ldr	r3, [pc, #428]	; (8003e00 <__ieee754_pow+0x210>)
 8003c54:	4598      	cmp	r8, r3
 8003c56:	dc4d      	bgt.n	8003cf4 <__ieee754_pow+0x104>
 8003c58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003c5c:	4598      	cmp	r8, r3
 8003c5e:	dd4c      	ble.n	8003cfa <__ieee754_pow+0x10a>
 8003c60:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003c64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003c68:	2b14      	cmp	r3, #20
 8003c6a:	dd26      	ble.n	8003cba <__ieee754_pow+0xca>
 8003c6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003c70:	fa22 f103 	lsr.w	r1, r2, r3
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d13e      	bne.n	8003cfa <__ieee754_pow+0x10a>
 8003c7c:	f001 0101 	and.w	r1, r1, #1
 8003c80:	f1c1 0b02 	rsb	fp, r1, #2
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	d15b      	bne.n	8003d40 <__ieee754_pow+0x150>
 8003c88:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <__ieee754_pow+0x208>)
 8003c8a:	4598      	cmp	r8, r3
 8003c8c:	d124      	bne.n	8003cd8 <__ieee754_pow+0xe8>
 8003c8e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003c92:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003c96:	ea53 030a 	orrs.w	r3, r3, sl
 8003c9a:	f000 8476 	beq.w	800458a <__ieee754_pow+0x99a>
 8003c9e:	4b59      	ldr	r3, [pc, #356]	; (8003e04 <__ieee754_pow+0x214>)
 8003ca0:	429c      	cmp	r4, r3
 8003ca2:	dd2d      	ble.n	8003d00 <__ieee754_pow+0x110>
 8003ca4:	f1b9 0f00 	cmp.w	r9, #0
 8003ca8:	f280 8473 	bge.w	8004592 <__ieee754_pow+0x9a2>
 8003cac:	2000      	movs	r0, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	ec41 0b10 	vmov	d0, r0, r1
 8003cb4:	b011      	add	sp, #68	; 0x44
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d13e      	bne.n	8003d3c <__ieee754_pow+0x14c>
 8003cbe:	f1c3 0314 	rsb	r3, r3, #20
 8003cc2:	fa48 f103 	asr.w	r1, r8, r3
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	4543      	cmp	r3, r8
 8003ccc:	f040 8469 	bne.w	80045a2 <__ieee754_pow+0x9b2>
 8003cd0:	f001 0101 	and.w	r1, r1, #1
 8003cd4:	f1c1 0b02 	rsb	fp, r1, #2
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <__ieee754_pow+0x218>)
 8003cda:	4598      	cmp	r8, r3
 8003cdc:	d118      	bne.n	8003d10 <__ieee754_pow+0x120>
 8003cde:	f1b9 0f00 	cmp.w	r9, #0
 8003ce2:	f280 845a 	bge.w	800459a <__ieee754_pow+0x9aa>
 8003ce6:	4948      	ldr	r1, [pc, #288]	; (8003e08 <__ieee754_pow+0x218>)
 8003ce8:	4632      	mov	r2, r6
 8003cea:	463b      	mov	r3, r7
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fc fd59 	bl	80007a4 <__aeabi_ddiv>
 8003cf2:	e7dd      	b.n	8003cb0 <__ieee754_pow+0xc0>
 8003cf4:	f04f 0b02 	mov.w	fp, #2
 8003cf8:	e7c4      	b.n	8003c84 <__ieee754_pow+0x94>
 8003cfa:	f04f 0b00 	mov.w	fp, #0
 8003cfe:	e7c1      	b.n	8003c84 <__ieee754_pow+0x94>
 8003d00:	f1b9 0f00 	cmp.w	r9, #0
 8003d04:	dad2      	bge.n	8003cac <__ieee754_pow+0xbc>
 8003d06:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003d0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d0e:	e7cf      	b.n	8003cb0 <__ieee754_pow+0xc0>
 8003d10:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003d14:	d106      	bne.n	8003d24 <__ieee754_pow+0x134>
 8003d16:	4632      	mov	r2, r6
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f7fc fc17 	bl	8000550 <__aeabi_dmul>
 8003d22:	e7c5      	b.n	8003cb0 <__ieee754_pow+0xc0>
 8003d24:	4b39      	ldr	r3, [pc, #228]	; (8003e0c <__ieee754_pow+0x21c>)
 8003d26:	4599      	cmp	r9, r3
 8003d28:	d10a      	bne.n	8003d40 <__ieee754_pow+0x150>
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	db08      	blt.n	8003d40 <__ieee754_pow+0x150>
 8003d2e:	ec47 6b10 	vmov	d0, r6, r7
 8003d32:	b011      	add	sp, #68	; 0x44
 8003d34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	f000 be5c 	b.w	80049f4 <__ieee754_sqrt>
 8003d3c:	f04f 0b00 	mov.w	fp, #0
 8003d40:	ec47 6b10 	vmov	d0, r6, r7
 8003d44:	f001 fd6c 	bl	8005820 <fabs>
 8003d48:	ec51 0b10 	vmov	r0, r1, d0
 8003d4c:	f1ba 0f00 	cmp.w	sl, #0
 8003d50:	d127      	bne.n	8003da2 <__ieee754_pow+0x1b2>
 8003d52:	b124      	cbz	r4, 8003d5e <__ieee754_pow+0x16e>
 8003d54:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <__ieee754_pow+0x218>)
 8003d56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d121      	bne.n	8003da2 <__ieee754_pow+0x1b2>
 8003d5e:	f1b9 0f00 	cmp.w	r9, #0
 8003d62:	da05      	bge.n	8003d70 <__ieee754_pow+0x180>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	2000      	movs	r0, #0
 8003d6a:	4927      	ldr	r1, [pc, #156]	; (8003e08 <__ieee754_pow+0x218>)
 8003d6c:	f7fc fd1a 	bl	80007a4 <__aeabi_ddiv>
 8003d70:	2d00      	cmp	r5, #0
 8003d72:	da9d      	bge.n	8003cb0 <__ieee754_pow+0xc0>
 8003d74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003d78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003d7c:	ea54 030b 	orrs.w	r3, r4, fp
 8003d80:	d108      	bne.n	8003d94 <__ieee754_pow+0x1a4>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f7fc fa29 	bl	80001e0 <__aeabi_dsub>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	e7ac      	b.n	8003cee <__ieee754_pow+0xfe>
 8003d94:	f1bb 0f01 	cmp.w	fp, #1
 8003d98:	d18a      	bne.n	8003cb0 <__ieee754_pow+0xc0>
 8003d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d9e:	4619      	mov	r1, r3
 8003da0:	e786      	b.n	8003cb0 <__ieee754_pow+0xc0>
 8003da2:	0fed      	lsrs	r5, r5, #31
 8003da4:	1e6b      	subs	r3, r5, #1
 8003da6:	930d      	str	r3, [sp, #52]	; 0x34
 8003da8:	ea5b 0303 	orrs.w	r3, fp, r3
 8003dac:	d102      	bne.n	8003db4 <__ieee754_pow+0x1c4>
 8003dae:	4632      	mov	r2, r6
 8003db0:	463b      	mov	r3, r7
 8003db2:	e7e8      	b.n	8003d86 <__ieee754_pow+0x196>
 8003db4:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <__ieee754_pow+0x220>)
 8003db6:	4598      	cmp	r8, r3
 8003db8:	f340 80fe 	ble.w	8003fb8 <__ieee754_pow+0x3c8>
 8003dbc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003dc0:	4598      	cmp	r8, r3
 8003dc2:	dd0a      	ble.n	8003dda <__ieee754_pow+0x1ea>
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <__ieee754_pow+0x214>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	dc0d      	bgt.n	8003de6 <__ieee754_pow+0x1f6>
 8003dca:	f1b9 0f00 	cmp.w	r9, #0
 8003dce:	f6bf af6d 	bge.w	8003cac <__ieee754_pow+0xbc>
 8003dd2:	a307      	add	r3, pc, #28	; (adr r3, 8003df0 <__ieee754_pow+0x200>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	e79f      	b.n	8003d1a <__ieee754_pow+0x12a>
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <__ieee754_pow+0x224>)
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	ddf4      	ble.n	8003dca <__ieee754_pow+0x1da>
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <__ieee754_pow+0x218>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	dd18      	ble.n	8003e18 <__ieee754_pow+0x228>
 8003de6:	f1b9 0f00 	cmp.w	r9, #0
 8003dea:	dcf2      	bgt.n	8003dd2 <__ieee754_pow+0x1e2>
 8003dec:	e75e      	b.n	8003cac <__ieee754_pow+0xbc>
 8003dee:	bf00      	nop
 8003df0:	8800759c 	.word	0x8800759c
 8003df4:	7e37e43c 	.word	0x7e37e43c
 8003df8:	7ff00000 	.word	0x7ff00000
 8003dfc:	08005ba8 	.word	0x08005ba8
 8003e00:	433fffff 	.word	0x433fffff
 8003e04:	3fefffff 	.word	0x3fefffff
 8003e08:	3ff00000 	.word	0x3ff00000
 8003e0c:	3fe00000 	.word	0x3fe00000
 8003e10:	41e00000 	.word	0x41e00000
 8003e14:	3feffffe 	.word	0x3feffffe
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <__ieee754_pow+0x3b8>)
 8003e1c:	f7fc f9e0 	bl	80001e0 <__aeabi_dsub>
 8003e20:	a355      	add	r3, pc, #340	; (adr r3, 8003f78 <__ieee754_pow+0x388>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	4604      	mov	r4, r0
 8003e28:	460d      	mov	r5, r1
 8003e2a:	f7fc fb91 	bl	8000550 <__aeabi_dmul>
 8003e2e:	a354      	add	r3, pc, #336	; (adr r3, 8003f80 <__ieee754_pow+0x390>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fb88 	bl	8000550 <__aeabi_dmul>
 8003e40:	2200      	movs	r2, #0
 8003e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <__ieee754_pow+0x3bc>)
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc fb80 	bl	8000550 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	a14c      	add	r1, pc, #304	; (adr r1, 8003f88 <__ieee754_pow+0x398>)
 8003e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e5a:	f7fc f9c1 	bl	80001e0 <__aeabi_dsub>
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	f7fc fb75 	bl	8000550 <__aeabi_dmul>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	4950      	ldr	r1, [pc, #320]	; (8003fb0 <__ieee754_pow+0x3c0>)
 8003e6e:	f7fc f9b7 	bl	80001e0 <__aeabi_dsub>
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	4680      	mov	r8, r0
 8003e78:	4689      	mov	r9, r1
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f7fc fb67 	bl	8000550 <__aeabi_dmul>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4640      	mov	r0, r8
 8003e88:	4649      	mov	r1, r9
 8003e8a:	f7fc fb61 	bl	8000550 <__aeabi_dmul>
 8003e8e:	a340      	add	r3, pc, #256	; (adr r3, 8003f90 <__ieee754_pow+0x3a0>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fb5c 	bl	8000550 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ea0:	f7fc f99e 	bl	80001e0 <__aeabi_dsub>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460d      	mov	r5, r1
 8003eac:	4630      	mov	r0, r6
 8003eae:	4639      	mov	r1, r7
 8003eb0:	f7fc f998 	bl	80001e4 <__adddf3>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eba:	4632      	mov	r2, r6
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	f7fc f98f 	bl	80001e0 <__aeabi_dsub>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fc f989 	bl	80001e0 <__aeabi_dsub>
 8003ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ed0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	460f      	mov	r7, r1
 8003eda:	f040 81eb 	bne.w	80042b4 <__ieee754_pow+0x6c4>
 8003ede:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003f98 <__ieee754_pow+0x3a8>
 8003ee2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003ee6:	2400      	movs	r4, #0
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ef0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ef4:	f7fc f974 	bl	80001e0 <__aeabi_dsub>
 8003ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003efc:	f7fc fb28 	bl	8000550 <__aeabi_dmul>
 8003f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f04:	4680      	mov	r8, r0
 8003f06:	4689      	mov	r9, r1
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc fb20 	bl	8000550 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4640      	mov	r0, r8
 8003f16:	4649      	mov	r1, r9
 8003f18:	f7fc f964 	bl	80001e4 <__adddf3>
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	4680      	mov	r8, r0
 8003f22:	4689      	mov	r9, r1
 8003f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f28:	f7fc fb12 	bl	8000550 <__aeabi_dmul>
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4604      	mov	r4, r0
 8003f30:	460d      	mov	r5, r1
 8003f32:	4602      	mov	r2, r0
 8003f34:	4649      	mov	r1, r9
 8003f36:	4640      	mov	r0, r8
 8003f38:	e9cd 4500 	strd	r4, r5, [sp]
 8003f3c:	f7fc f952 	bl	80001e4 <__adddf3>
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <__ieee754_pow+0x3c4>)
 8003f42:	4299      	cmp	r1, r3
 8003f44:	4606      	mov	r6, r0
 8003f46:	460f      	mov	r7, r1
 8003f48:	468b      	mov	fp, r1
 8003f4a:	f340 82f7 	ble.w	800453c <__ieee754_pow+0x94c>
 8003f4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003f52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003f56:	4303      	orrs	r3, r0
 8003f58:	f000 81ea 	beq.w	8004330 <__ieee754_pow+0x740>
 8003f5c:	a310      	add	r3, pc, #64	; (adr r3, 8003fa0 <__ieee754_pow+0x3b0>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f66:	f7fc faf3 	bl	8000550 <__aeabi_dmul>
 8003f6a:	a30d      	add	r3, pc, #52	; (adr r3, 8003fa0 <__ieee754_pow+0x3b0>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	e6d5      	b.n	8003d1e <__ieee754_pow+0x12e>
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	60000000 	.word	0x60000000
 8003f7c:	3ff71547 	.word	0x3ff71547
 8003f80:	f85ddf44 	.word	0xf85ddf44
 8003f84:	3e54ae0b 	.word	0x3e54ae0b
 8003f88:	55555555 	.word	0x55555555
 8003f8c:	3fd55555 	.word	0x3fd55555
 8003f90:	652b82fe 	.word	0x652b82fe
 8003f94:	3ff71547 	.word	0x3ff71547
 8003f98:	00000000 	.word	0x00000000
 8003f9c:	bff00000 	.word	0xbff00000
 8003fa0:	8800759c 	.word	0x8800759c
 8003fa4:	7e37e43c 	.word	0x7e37e43c
 8003fa8:	3ff00000 	.word	0x3ff00000
 8003fac:	3fd00000 	.word	0x3fd00000
 8003fb0:	3fe00000 	.word	0x3fe00000
 8003fb4:	408fffff 	.word	0x408fffff
 8003fb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	da05      	bge.n	8003fce <__ieee754_pow+0x3de>
 8003fc2:	4bd3      	ldr	r3, [pc, #844]	; (8004310 <__ieee754_pow+0x720>)
 8003fc4:	f7fc fac4 	bl	8000550 <__aeabi_dmul>
 8003fc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003fcc:	460c      	mov	r4, r1
 8003fce:	1523      	asrs	r3, r4, #20
 8003fd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003fd4:	4413      	add	r3, r2
 8003fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd8:	4bce      	ldr	r3, [pc, #824]	; (8004314 <__ieee754_pow+0x724>)
 8003fda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003fde:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003fe8:	dd08      	ble.n	8003ffc <__ieee754_pow+0x40c>
 8003fea:	4bcb      	ldr	r3, [pc, #812]	; (8004318 <__ieee754_pow+0x728>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	f340 815e 	ble.w	80042ae <__ieee754_pow+0x6be>
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003ffc:	f04f 0a00 	mov.w	sl, #0
 8004000:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004004:	930c      	str	r3, [sp, #48]	; 0x30
 8004006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004008:	4bc4      	ldr	r3, [pc, #784]	; (800431c <__ieee754_pow+0x72c>)
 800400a:	4413      	add	r3, r2
 800400c:	ed93 7b00 	vldr	d7, [r3]
 8004010:	4629      	mov	r1, r5
 8004012:	ec53 2b17 	vmov	r2, r3, d7
 8004016:	ed8d 7b06 	vstr	d7, [sp, #24]
 800401a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800401e:	f7fc f8df 	bl	80001e0 <__aeabi_dsub>
 8004022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004026:	4606      	mov	r6, r0
 8004028:	460f      	mov	r7, r1
 800402a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800402e:	f7fc f8d9 	bl	80001e4 <__adddf3>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	2000      	movs	r0, #0
 8004038:	49b9      	ldr	r1, [pc, #740]	; (8004320 <__ieee754_pow+0x730>)
 800403a:	f7fc fbb3 	bl	80007a4 <__aeabi_ddiv>
 800403e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	f7fc fa81 	bl	8000550 <__aeabi_dmul>
 800404e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004052:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800405a:	2300      	movs	r3, #0
 800405c:	9302      	str	r3, [sp, #8]
 800405e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004062:	106d      	asrs	r5, r5, #1
 8004064:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004068:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800406c:	2200      	movs	r2, #0
 800406e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004072:	4640      	mov	r0, r8
 8004074:	4649      	mov	r1, r9
 8004076:	4614      	mov	r4, r2
 8004078:	461d      	mov	r5, r3
 800407a:	f7fc fa69 	bl	8000550 <__aeabi_dmul>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4630      	mov	r0, r6
 8004084:	4639      	mov	r1, r7
 8004086:	f7fc f8ab 	bl	80001e0 <__aeabi_dsub>
 800408a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800408e:	4606      	mov	r6, r0
 8004090:	460f      	mov	r7, r1
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc f8a3 	bl	80001e0 <__aeabi_dsub>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040a2:	f7fc f89d 	bl	80001e0 <__aeabi_dsub>
 80040a6:	4642      	mov	r2, r8
 80040a8:	464b      	mov	r3, r9
 80040aa:	f7fc fa51 	bl	8000550 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7fc f893 	bl	80001e0 <__aeabi_dsub>
 80040ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80040be:	f7fc fa47 	bl	8000550 <__aeabi_dmul>
 80040c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fa3f 	bl	8000550 <__aeabi_dmul>
 80040d2:	a37b      	add	r3, pc, #492	; (adr r3, 80042c0 <__ieee754_pow+0x6d0>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4604      	mov	r4, r0
 80040da:	460d      	mov	r5, r1
 80040dc:	f7fc fa38 	bl	8000550 <__aeabi_dmul>
 80040e0:	a379      	add	r3, pc, #484	; (adr r3, 80042c8 <__ieee754_pow+0x6d8>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc f87d 	bl	80001e4 <__adddf3>
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	f7fc fa2f 	bl	8000550 <__aeabi_dmul>
 80040f2:	a377      	add	r3, pc, #476	; (adr r3, 80042d0 <__ieee754_pow+0x6e0>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc f874 	bl	80001e4 <__adddf3>
 80040fc:	4622      	mov	r2, r4
 80040fe:	462b      	mov	r3, r5
 8004100:	f7fc fa26 	bl	8000550 <__aeabi_dmul>
 8004104:	a374      	add	r3, pc, #464	; (adr r3, 80042d8 <__ieee754_pow+0x6e8>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fc f86b 	bl	80001e4 <__adddf3>
 800410e:	4622      	mov	r2, r4
 8004110:	462b      	mov	r3, r5
 8004112:	f7fc fa1d 	bl	8000550 <__aeabi_dmul>
 8004116:	a372      	add	r3, pc, #456	; (adr r3, 80042e0 <__ieee754_pow+0x6f0>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc f862 	bl	80001e4 <__adddf3>
 8004120:	4622      	mov	r2, r4
 8004122:	462b      	mov	r3, r5
 8004124:	f7fc fa14 	bl	8000550 <__aeabi_dmul>
 8004128:	a36f      	add	r3, pc, #444	; (adr r3, 80042e8 <__ieee754_pow+0x6f8>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc f859 	bl	80001e4 <__adddf3>
 8004132:	4622      	mov	r2, r4
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	462b      	mov	r3, r5
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc fa07 	bl	8000550 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4630      	mov	r0, r6
 8004148:	4639      	mov	r1, r7
 800414a:	f7fc fa01 	bl	8000550 <__aeabi_dmul>
 800414e:	4642      	mov	r2, r8
 8004150:	4604      	mov	r4, r0
 8004152:	460d      	mov	r5, r1
 8004154:	464b      	mov	r3, r9
 8004156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800415a:	f7fc f843 	bl	80001e4 <__adddf3>
 800415e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004162:	f7fc f9f5 	bl	8000550 <__aeabi_dmul>
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f7fc f83b 	bl	80001e4 <__adddf3>
 800416e:	4642      	mov	r2, r8
 8004170:	4606      	mov	r6, r0
 8004172:	460f      	mov	r7, r1
 8004174:	464b      	mov	r3, r9
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f7fc f9e9 	bl	8000550 <__aeabi_dmul>
 800417e:	2200      	movs	r2, #0
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <__ieee754_pow+0x734>)
 8004182:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004186:	f7fc f82d 	bl	80001e4 <__adddf3>
 800418a:	4632      	mov	r2, r6
 800418c:	463b      	mov	r3, r7
 800418e:	f7fc f829 	bl	80001e4 <__adddf3>
 8004192:	9802      	ldr	r0, [sp, #8]
 8004194:	460d      	mov	r5, r1
 8004196:	4604      	mov	r4, r0
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4640      	mov	r0, r8
 800419e:	4649      	mov	r1, r9
 80041a0:	f7fc f9d6 	bl	8000550 <__aeabi_dmul>
 80041a4:	2200      	movs	r2, #0
 80041a6:	4680      	mov	r8, r0
 80041a8:	4689      	mov	r9, r1
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <__ieee754_pow+0x734>)
 80041ac:	4620      	mov	r0, r4
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7fc f816 	bl	80001e0 <__aeabi_dsub>
 80041b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041b8:	f7fc f812 	bl	80001e0 <__aeabi_dsub>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4630      	mov	r0, r6
 80041c2:	4639      	mov	r1, r7
 80041c4:	f7fc f80c 	bl	80001e0 <__aeabi_dsub>
 80041c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041cc:	f7fc f9c0 	bl	8000550 <__aeabi_dmul>
 80041d0:	4622      	mov	r2, r4
 80041d2:	4606      	mov	r6, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	462b      	mov	r3, r5
 80041d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041dc:	f7fc f9b8 	bl	8000550 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4630      	mov	r0, r6
 80041e6:	4639      	mov	r1, r7
 80041e8:	f7fb fffc 	bl	80001e4 <__adddf3>
 80041ec:	4606      	mov	r6, r0
 80041ee:	460f      	mov	r7, r1
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4640      	mov	r0, r8
 80041f6:	4649      	mov	r1, r9
 80041f8:	f7fb fff4 	bl	80001e4 <__adddf3>
 80041fc:	9802      	ldr	r0, [sp, #8]
 80041fe:	a33c      	add	r3, pc, #240	; (adr r3, 80042f0 <__ieee754_pow+0x700>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	4604      	mov	r4, r0
 8004206:	460d      	mov	r5, r1
 8004208:	f7fc f9a2 	bl	8000550 <__aeabi_dmul>
 800420c:	4642      	mov	r2, r8
 800420e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004212:	464b      	mov	r3, r9
 8004214:	4620      	mov	r0, r4
 8004216:	4629      	mov	r1, r5
 8004218:	f7fb ffe2 	bl	80001e0 <__aeabi_dsub>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4630      	mov	r0, r6
 8004222:	4639      	mov	r1, r7
 8004224:	f7fb ffdc 	bl	80001e0 <__aeabi_dsub>
 8004228:	a333      	add	r3, pc, #204	; (adr r3, 80042f8 <__ieee754_pow+0x708>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc f98f 	bl	8000550 <__aeabi_dmul>
 8004232:	a333      	add	r3, pc, #204	; (adr r3, 8004300 <__ieee754_pow+0x710>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc f986 	bl	8000550 <__aeabi_dmul>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fb ffca 	bl	80001e4 <__adddf3>
 8004250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004252:	4b35      	ldr	r3, [pc, #212]	; (8004328 <__ieee754_pow+0x738>)
 8004254:	4413      	add	r3, r2
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fb ffc3 	bl	80001e4 <__adddf3>
 800425e:	4604      	mov	r4, r0
 8004260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004262:	460d      	mov	r5, r1
 8004264:	f7fc f90a 	bl	800047c <__aeabi_i2d>
 8004268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <__ieee754_pow+0x73c>)
 800426c:	4413      	add	r3, r2
 800426e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004272:	4606      	mov	r6, r0
 8004274:	460f      	mov	r7, r1
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800427e:	f7fb ffb1 	bl	80001e4 <__adddf3>
 8004282:	4642      	mov	r2, r8
 8004284:	464b      	mov	r3, r9
 8004286:	f7fb ffad 	bl	80001e4 <__adddf3>
 800428a:	4632      	mov	r2, r6
 800428c:	463b      	mov	r3, r7
 800428e:	f7fb ffa9 	bl	80001e4 <__adddf3>
 8004292:	9802      	ldr	r0, [sp, #8]
 8004294:	4632      	mov	r2, r6
 8004296:	463b      	mov	r3, r7
 8004298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800429c:	f7fb ffa0 	bl	80001e0 <__aeabi_dsub>
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	f7fb ff9c 	bl	80001e0 <__aeabi_dsub>
 80042a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ac:	e607      	b.n	8003ebe <__ieee754_pow+0x2ce>
 80042ae:	f04f 0a01 	mov.w	sl, #1
 80042b2:	e6a5      	b.n	8004000 <__ieee754_pow+0x410>
 80042b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004308 <__ieee754_pow+0x718>
 80042b8:	e613      	b.n	8003ee2 <__ieee754_pow+0x2f2>
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w
 80042c0:	4a454eef 	.word	0x4a454eef
 80042c4:	3fca7e28 	.word	0x3fca7e28
 80042c8:	93c9db65 	.word	0x93c9db65
 80042cc:	3fcd864a 	.word	0x3fcd864a
 80042d0:	a91d4101 	.word	0xa91d4101
 80042d4:	3fd17460 	.word	0x3fd17460
 80042d8:	518f264d 	.word	0x518f264d
 80042dc:	3fd55555 	.word	0x3fd55555
 80042e0:	db6fabff 	.word	0xdb6fabff
 80042e4:	3fdb6db6 	.word	0x3fdb6db6
 80042e8:	33333303 	.word	0x33333303
 80042ec:	3fe33333 	.word	0x3fe33333
 80042f0:	e0000000 	.word	0xe0000000
 80042f4:	3feec709 	.word	0x3feec709
 80042f8:	dc3a03fd 	.word	0xdc3a03fd
 80042fc:	3feec709 	.word	0x3feec709
 8004300:	145b01f5 	.word	0x145b01f5
 8004304:	be3e2fe0 	.word	0xbe3e2fe0
 8004308:	00000000 	.word	0x00000000
 800430c:	3ff00000 	.word	0x3ff00000
 8004310:	43400000 	.word	0x43400000
 8004314:	0003988e 	.word	0x0003988e
 8004318:	000bb679 	.word	0x000bb679
 800431c:	08005bb0 	.word	0x08005bb0
 8004320:	3ff00000 	.word	0x3ff00000
 8004324:	40080000 	.word	0x40080000
 8004328:	08005bd0 	.word	0x08005bd0
 800432c:	08005bc0 	.word	0x08005bc0
 8004330:	a3b4      	add	r3, pc, #720	; (adr r3, 8004604 <__ieee754_pow+0xa14>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	4640      	mov	r0, r8
 8004338:	4649      	mov	r1, r9
 800433a:	f7fb ff53 	bl	80001e4 <__adddf3>
 800433e:	4622      	mov	r2, r4
 8004340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004344:	462b      	mov	r3, r5
 8004346:	4630      	mov	r0, r6
 8004348:	4639      	mov	r1, r7
 800434a:	f7fb ff49 	bl	80001e0 <__aeabi_dsub>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004356:	f7fc fb8b 	bl	8000a70 <__aeabi_dcmpgt>
 800435a:	2800      	cmp	r0, #0
 800435c:	f47f adfe 	bne.w	8003f5c <__ieee754_pow+0x36c>
 8004360:	4aa3      	ldr	r2, [pc, #652]	; (80045f0 <__ieee754_pow+0xa00>)
 8004362:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004366:	4293      	cmp	r3, r2
 8004368:	f340 810a 	ble.w	8004580 <__ieee754_pow+0x990>
 800436c:	151b      	asrs	r3, r3, #20
 800436e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004372:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004376:	fa4a f303 	asr.w	r3, sl, r3
 800437a:	445b      	add	r3, fp
 800437c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004380:	4e9c      	ldr	r6, [pc, #624]	; (80045f4 <__ieee754_pow+0xa04>)
 8004382:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004386:	4116      	asrs	r6, r2
 8004388:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800438c:	2000      	movs	r0, #0
 800438e:	ea23 0106 	bic.w	r1, r3, r6
 8004392:	f1c2 0214 	rsb	r2, r2, #20
 8004396:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800439a:	fa4a fa02 	asr.w	sl, sl, r2
 800439e:	f1bb 0f00 	cmp.w	fp, #0
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4620      	mov	r0, r4
 80043a8:	4629      	mov	r1, r5
 80043aa:	bfb8      	it	lt
 80043ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80043b0:	f7fb ff16 	bl	80001e0 <__aeabi_dsub>
 80043b4:	e9cd 0100 	strd	r0, r1, [sp]
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043c0:	f7fb ff10 	bl	80001e4 <__adddf3>
 80043c4:	2000      	movs	r0, #0
 80043c6:	a378      	add	r3, pc, #480	; (adr r3, 80045a8 <__ieee754_pow+0x9b8>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	4604      	mov	r4, r0
 80043ce:	460d      	mov	r5, r1
 80043d0:	f7fc f8be 	bl	8000550 <__aeabi_dmul>
 80043d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d8:	4606      	mov	r6, r0
 80043da:	460f      	mov	r7, r1
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fb fefe 	bl	80001e0 <__aeabi_dsub>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fb fef8 	bl	80001e0 <__aeabi_dsub>
 80043f0:	a36f      	add	r3, pc, #444	; (adr r3, 80045b0 <__ieee754_pow+0x9c0>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc f8ab 	bl	8000550 <__aeabi_dmul>
 80043fa:	a36f      	add	r3, pc, #444	; (adr r3, 80045b8 <__ieee754_pow+0x9c8>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	4680      	mov	r8, r0
 8004402:	4689      	mov	r9, r1
 8004404:	4620      	mov	r0, r4
 8004406:	4629      	mov	r1, r5
 8004408:	f7fc f8a2 	bl	8000550 <__aeabi_dmul>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fb fee6 	bl	80001e4 <__adddf3>
 8004418:	4604      	mov	r4, r0
 800441a:	460d      	mov	r5, r1
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4630      	mov	r0, r6
 8004422:	4639      	mov	r1, r7
 8004424:	f7fb fede 	bl	80001e4 <__adddf3>
 8004428:	4632      	mov	r2, r6
 800442a:	463b      	mov	r3, r7
 800442c:	4680      	mov	r8, r0
 800442e:	4689      	mov	r9, r1
 8004430:	f7fb fed6 	bl	80001e0 <__aeabi_dsub>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4620      	mov	r0, r4
 800443a:	4629      	mov	r1, r5
 800443c:	f7fb fed0 	bl	80001e0 <__aeabi_dsub>
 8004440:	4642      	mov	r2, r8
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	464b      	mov	r3, r9
 8004448:	4640      	mov	r0, r8
 800444a:	4649      	mov	r1, r9
 800444c:	f7fc f880 	bl	8000550 <__aeabi_dmul>
 8004450:	a35b      	add	r3, pc, #364	; (adr r3, 80045c0 <__ieee754_pow+0x9d0>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	f7fc f879 	bl	8000550 <__aeabi_dmul>
 800445e:	a35a      	add	r3, pc, #360	; (adr r3, 80045c8 <__ieee754_pow+0x9d8>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fb febc 	bl	80001e0 <__aeabi_dsub>
 8004468:	4622      	mov	r2, r4
 800446a:	462b      	mov	r3, r5
 800446c:	f7fc f870 	bl	8000550 <__aeabi_dmul>
 8004470:	a357      	add	r3, pc, #348	; (adr r3, 80045d0 <__ieee754_pow+0x9e0>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fb feb5 	bl	80001e4 <__adddf3>
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	f7fc f867 	bl	8000550 <__aeabi_dmul>
 8004482:	a355      	add	r3, pc, #340	; (adr r3, 80045d8 <__ieee754_pow+0x9e8>)
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f7fb feaa 	bl	80001e0 <__aeabi_dsub>
 800448c:	4622      	mov	r2, r4
 800448e:	462b      	mov	r3, r5
 8004490:	f7fc f85e 	bl	8000550 <__aeabi_dmul>
 8004494:	a352      	add	r3, pc, #328	; (adr r3, 80045e0 <__ieee754_pow+0x9f0>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fb fea3 	bl	80001e4 <__adddf3>
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f7fc f855 	bl	8000550 <__aeabi_dmul>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4640      	mov	r0, r8
 80044ac:	4649      	mov	r1, r9
 80044ae:	f7fb fe97 	bl	80001e0 <__aeabi_dsub>
 80044b2:	4604      	mov	r4, r0
 80044b4:	460d      	mov	r5, r1
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4640      	mov	r0, r8
 80044bc:	4649      	mov	r1, r9
 80044be:	f7fc f847 	bl	8000550 <__aeabi_dmul>
 80044c2:	2200      	movs	r2, #0
 80044c4:	e9cd 0100 	strd	r0, r1, [sp]
 80044c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044cc:	4620      	mov	r0, r4
 80044ce:	4629      	mov	r1, r5
 80044d0:	f7fb fe86 	bl	80001e0 <__aeabi_dsub>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044dc:	f7fc f962 	bl	80007a4 <__aeabi_ddiv>
 80044e0:	4632      	mov	r2, r6
 80044e2:	4604      	mov	r4, r0
 80044e4:	460d      	mov	r5, r1
 80044e6:	463b      	mov	r3, r7
 80044e8:	4640      	mov	r0, r8
 80044ea:	4649      	mov	r1, r9
 80044ec:	f7fc f830 	bl	8000550 <__aeabi_dmul>
 80044f0:	4632      	mov	r2, r6
 80044f2:	463b      	mov	r3, r7
 80044f4:	f7fb fe76 	bl	80001e4 <__adddf3>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fb fe6e 	bl	80001e0 <__aeabi_dsub>
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	f7fb fe6a 	bl	80001e0 <__aeabi_dsub>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	2000      	movs	r0, #0
 8004512:	4939      	ldr	r1, [pc, #228]	; (80045f8 <__ieee754_pow+0xa08>)
 8004514:	f7fb fe64 	bl	80001e0 <__aeabi_dsub>
 8004518:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800451c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	da2f      	bge.n	8004586 <__ieee754_pow+0x996>
 8004526:	4650      	mov	r0, sl
 8004528:	ec43 2b10 	vmov	d0, r2, r3
 800452c:	f001 faa0 	bl	8005a70 <scalbn>
 8004530:	ec51 0b10 	vmov	r0, r1, d0
 8004534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004538:	f7ff bbf1 	b.w	8003d1e <__ieee754_pow+0x12e>
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <__ieee754_pow+0xa0c>)
 800453e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004542:	429e      	cmp	r6, r3
 8004544:	f77f af0c 	ble.w	8004360 <__ieee754_pow+0x770>
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <__ieee754_pow+0xa10>)
 800454a:	440b      	add	r3, r1
 800454c:	4303      	orrs	r3, r0
 800454e:	d00b      	beq.n	8004568 <__ieee754_pow+0x978>
 8004550:	a325      	add	r3, pc, #148	; (adr r3, 80045e8 <__ieee754_pow+0x9f8>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800455a:	f7fb fff9 	bl	8000550 <__aeabi_dmul>
 800455e:	a322      	add	r3, pc, #136	; (adr r3, 80045e8 <__ieee754_pow+0x9f8>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7ff bbdb 	b.w	8003d1e <__ieee754_pow+0x12e>
 8004568:	4622      	mov	r2, r4
 800456a:	462b      	mov	r3, r5
 800456c:	f7fb fe38 	bl	80001e0 <__aeabi_dsub>
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	f7fc fa72 	bl	8000a5c <__aeabi_dcmpge>
 8004578:	2800      	cmp	r0, #0
 800457a:	f43f aef1 	beq.w	8004360 <__ieee754_pow+0x770>
 800457e:	e7e7      	b.n	8004550 <__ieee754_pow+0x960>
 8004580:	f04f 0a00 	mov.w	sl, #0
 8004584:	e718      	b.n	80043b8 <__ieee754_pow+0x7c8>
 8004586:	4621      	mov	r1, r4
 8004588:	e7d4      	b.n	8004534 <__ieee754_pow+0x944>
 800458a:	2000      	movs	r0, #0
 800458c:	491a      	ldr	r1, [pc, #104]	; (80045f8 <__ieee754_pow+0xa08>)
 800458e:	f7ff bb8f 	b.w	8003cb0 <__ieee754_pow+0xc0>
 8004592:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004596:	f7ff bb8b 	b.w	8003cb0 <__ieee754_pow+0xc0>
 800459a:	4630      	mov	r0, r6
 800459c:	4639      	mov	r1, r7
 800459e:	f7ff bb87 	b.w	8003cb0 <__ieee754_pow+0xc0>
 80045a2:	4693      	mov	fp, r2
 80045a4:	f7ff bb98 	b.w	8003cd8 <__ieee754_pow+0xe8>
 80045a8:	00000000 	.word	0x00000000
 80045ac:	3fe62e43 	.word	0x3fe62e43
 80045b0:	fefa39ef 	.word	0xfefa39ef
 80045b4:	3fe62e42 	.word	0x3fe62e42
 80045b8:	0ca86c39 	.word	0x0ca86c39
 80045bc:	be205c61 	.word	0xbe205c61
 80045c0:	72bea4d0 	.word	0x72bea4d0
 80045c4:	3e663769 	.word	0x3e663769
 80045c8:	c5d26bf1 	.word	0xc5d26bf1
 80045cc:	3ebbbd41 	.word	0x3ebbbd41
 80045d0:	af25de2c 	.word	0xaf25de2c
 80045d4:	3f11566a 	.word	0x3f11566a
 80045d8:	16bebd93 	.word	0x16bebd93
 80045dc:	3f66c16c 	.word	0x3f66c16c
 80045e0:	5555553e 	.word	0x5555553e
 80045e4:	3fc55555 	.word	0x3fc55555
 80045e8:	c2f8f359 	.word	0xc2f8f359
 80045ec:	01a56e1f 	.word	0x01a56e1f
 80045f0:	3fe00000 	.word	0x3fe00000
 80045f4:	000fffff 	.word	0x000fffff
 80045f8:	3ff00000 	.word	0x3ff00000
 80045fc:	4090cbff 	.word	0x4090cbff
 8004600:	3f6f3400 	.word	0x3f6f3400
 8004604:	652b82fe 	.word	0x652b82fe
 8004608:	3c971547 	.word	0x3c971547
 800460c:	00000000 	.word	0x00000000

08004610 <__ieee754_rem_pio2>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	ec57 6b10 	vmov	r6, r7, d0
 8004618:	4bc3      	ldr	r3, [pc, #780]	; (8004928 <__ieee754_rem_pio2+0x318>)
 800461a:	b08d      	sub	sp, #52	; 0x34
 800461c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004620:	4598      	cmp	r8, r3
 8004622:	4604      	mov	r4, r0
 8004624:	9704      	str	r7, [sp, #16]
 8004626:	dc07      	bgt.n	8004638 <__ieee754_rem_pio2+0x28>
 8004628:	2200      	movs	r2, #0
 800462a:	2300      	movs	r3, #0
 800462c:	ed84 0b00 	vstr	d0, [r4]
 8004630:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004634:	2500      	movs	r5, #0
 8004636:	e027      	b.n	8004688 <__ieee754_rem_pio2+0x78>
 8004638:	4bbc      	ldr	r3, [pc, #752]	; (800492c <__ieee754_rem_pio2+0x31c>)
 800463a:	4598      	cmp	r8, r3
 800463c:	dc75      	bgt.n	800472a <__ieee754_rem_pio2+0x11a>
 800463e:	9b04      	ldr	r3, [sp, #16]
 8004640:	4dbb      	ldr	r5, [pc, #748]	; (8004930 <__ieee754_rem_pio2+0x320>)
 8004642:	2b00      	cmp	r3, #0
 8004644:	ee10 0a10 	vmov	r0, s0
 8004648:	a3a9      	add	r3, pc, #676	; (adr r3, 80048f0 <__ieee754_rem_pio2+0x2e0>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	4639      	mov	r1, r7
 8004650:	dd36      	ble.n	80046c0 <__ieee754_rem_pio2+0xb0>
 8004652:	f7fb fdc5 	bl	80001e0 <__aeabi_dsub>
 8004656:	45a8      	cmp	r8, r5
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	d018      	beq.n	8004690 <__ieee754_rem_pio2+0x80>
 800465e:	a3a6      	add	r3, pc, #664	; (adr r3, 80048f8 <__ieee754_rem_pio2+0x2e8>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fdbc 	bl	80001e0 <__aeabi_dsub>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	e9c4 2300 	strd	r2, r3, [r4]
 8004670:	4630      	mov	r0, r6
 8004672:	4639      	mov	r1, r7
 8004674:	f7fb fdb4 	bl	80001e0 <__aeabi_dsub>
 8004678:	a39f      	add	r3, pc, #636	; (adr r3, 80048f8 <__ieee754_rem_pio2+0x2e8>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fb fdaf 	bl	80001e0 <__aeabi_dsub>
 8004682:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004686:	2501      	movs	r5, #1
 8004688:	4628      	mov	r0, r5
 800468a:	b00d      	add	sp, #52	; 0x34
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004690:	a39b      	add	r3, pc, #620	; (adr r3, 8004900 <__ieee754_rem_pio2+0x2f0>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb fda3 	bl	80001e0 <__aeabi_dsub>
 800469a:	a39b      	add	r3, pc, #620	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2f8>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	4606      	mov	r6, r0
 80046a2:	460f      	mov	r7, r1
 80046a4:	f7fb fd9c 	bl	80001e0 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9c4 2300 	strd	r2, r3, [r4]
 80046b0:	4630      	mov	r0, r6
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fb fd94 	bl	80001e0 <__aeabi_dsub>
 80046b8:	a393      	add	r3, pc, #588	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2f8>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	e7de      	b.n	800467e <__ieee754_rem_pio2+0x6e>
 80046c0:	f7fb fd90 	bl	80001e4 <__adddf3>
 80046c4:	45a8      	cmp	r8, r5
 80046c6:	4606      	mov	r6, r0
 80046c8:	460f      	mov	r7, r1
 80046ca:	d016      	beq.n	80046fa <__ieee754_rem_pio2+0xea>
 80046cc:	a38a      	add	r3, pc, #552	; (adr r3, 80048f8 <__ieee754_rem_pio2+0x2e8>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f7fb fd87 	bl	80001e4 <__adddf3>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	e9c4 2300 	strd	r2, r3, [r4]
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f7fb fd7d 	bl	80001e0 <__aeabi_dsub>
 80046e6:	a384      	add	r3, pc, #528	; (adr r3, 80048f8 <__ieee754_rem_pio2+0x2e8>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb fd7a 	bl	80001e4 <__adddf3>
 80046f0:	f04f 35ff 	mov.w	r5, #4294967295
 80046f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046f8:	e7c6      	b.n	8004688 <__ieee754_rem_pio2+0x78>
 80046fa:	a381      	add	r3, pc, #516	; (adr r3, 8004900 <__ieee754_rem_pio2+0x2f0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fb fd70 	bl	80001e4 <__adddf3>
 8004704:	a380      	add	r3, pc, #512	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2f8>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	f7fb fd69 	bl	80001e4 <__adddf3>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	e9c4 2300 	strd	r2, r3, [r4]
 800471a:	4630      	mov	r0, r6
 800471c:	4639      	mov	r1, r7
 800471e:	f7fb fd5f 	bl	80001e0 <__aeabi_dsub>
 8004722:	a379      	add	r3, pc, #484	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2f8>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	e7e0      	b.n	80046ec <__ieee754_rem_pio2+0xdc>
 800472a:	4b82      	ldr	r3, [pc, #520]	; (8004934 <__ieee754_rem_pio2+0x324>)
 800472c:	4598      	cmp	r8, r3
 800472e:	f300 80d0 	bgt.w	80048d2 <__ieee754_rem_pio2+0x2c2>
 8004732:	f001 f875 	bl	8005820 <fabs>
 8004736:	ec57 6b10 	vmov	r6, r7, d0
 800473a:	ee10 0a10 	vmov	r0, s0
 800473e:	a374      	add	r3, pc, #464	; (adr r3, 8004910 <__ieee754_rem_pio2+0x300>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	4639      	mov	r1, r7
 8004746:	f7fb ff03 	bl	8000550 <__aeabi_dmul>
 800474a:	2200      	movs	r2, #0
 800474c:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <__ieee754_rem_pio2+0x328>)
 800474e:	f7fb fd49 	bl	80001e4 <__adddf3>
 8004752:	f7fc f9ad 	bl	8000ab0 <__aeabi_d2iz>
 8004756:	4605      	mov	r5, r0
 8004758:	f7fb fe90 	bl	800047c <__aeabi_i2d>
 800475c:	a364      	add	r3, pc, #400	; (adr r3, 80048f0 <__ieee754_rem_pio2+0x2e0>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004766:	f7fb fef3 	bl	8000550 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7fb fd35 	bl	80001e0 <__aeabi_dsub>
 8004776:	a360      	add	r3, pc, #384	; (adr r3, 80048f8 <__ieee754_rem_pio2+0x2e8>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	4682      	mov	sl, r0
 800477e:	468b      	mov	fp, r1
 8004780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004784:	f7fb fee4 	bl	8000550 <__aeabi_dmul>
 8004788:	2d1f      	cmp	r5, #31
 800478a:	4606      	mov	r6, r0
 800478c:	460f      	mov	r7, r1
 800478e:	dc0c      	bgt.n	80047aa <__ieee754_rem_pio2+0x19a>
 8004790:	1e6a      	subs	r2, r5, #1
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <__ieee754_rem_pio2+0x32c>)
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	4543      	cmp	r3, r8
 800479a:	d006      	beq.n	80047aa <__ieee754_rem_pio2+0x19a>
 800479c:	4632      	mov	r2, r6
 800479e:	463b      	mov	r3, r7
 80047a0:	4650      	mov	r0, sl
 80047a2:	4659      	mov	r1, fp
 80047a4:	f7fb fd1c 	bl	80001e0 <__aeabi_dsub>
 80047a8:	e00e      	b.n	80047c8 <__ieee754_rem_pio2+0x1b8>
 80047aa:	4632      	mov	r2, r6
 80047ac:	463b      	mov	r3, r7
 80047ae:	4650      	mov	r0, sl
 80047b0:	4659      	mov	r1, fp
 80047b2:	f7fb fd15 	bl	80001e0 <__aeabi_dsub>
 80047b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	9a05      	ldr	r2, [sp, #20]
 80047be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	dc02      	bgt.n	80047ce <__ieee754_rem_pio2+0x1be>
 80047c8:	e9c4 0100 	strd	r0, r1, [r4]
 80047cc:	e039      	b.n	8004842 <__ieee754_rem_pio2+0x232>
 80047ce:	a34c      	add	r3, pc, #304	; (adr r3, 8004900 <__ieee754_rem_pio2+0x2f0>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047d8:	f7fb feba 	bl	8000550 <__aeabi_dmul>
 80047dc:	4606      	mov	r6, r0
 80047de:	460f      	mov	r7, r1
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4650      	mov	r0, sl
 80047e6:	4659      	mov	r1, fp
 80047e8:	f7fb fcfa 	bl	80001e0 <__aeabi_dsub>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4680      	mov	r8, r0
 80047f2:	4689      	mov	r9, r1
 80047f4:	4650      	mov	r0, sl
 80047f6:	4659      	mov	r1, fp
 80047f8:	f7fb fcf2 	bl	80001e0 <__aeabi_dsub>
 80047fc:	4632      	mov	r2, r6
 80047fe:	463b      	mov	r3, r7
 8004800:	f7fb fcee 	bl	80001e0 <__aeabi_dsub>
 8004804:	a340      	add	r3, pc, #256	; (adr r3, 8004908 <__ieee754_rem_pio2+0x2f8>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	4606      	mov	r6, r0
 800480c:	460f      	mov	r7, r1
 800480e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004812:	f7fb fe9d 	bl	8000550 <__aeabi_dmul>
 8004816:	4632      	mov	r2, r6
 8004818:	463b      	mov	r3, r7
 800481a:	f7fb fce1 	bl	80001e0 <__aeabi_dsub>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4606      	mov	r6, r0
 8004824:	460f      	mov	r7, r1
 8004826:	4640      	mov	r0, r8
 8004828:	4649      	mov	r1, r9
 800482a:	f7fb fcd9 	bl	80001e0 <__aeabi_dsub>
 800482e:	9a05      	ldr	r2, [sp, #20]
 8004830:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b31      	cmp	r3, #49	; 0x31
 8004838:	dc20      	bgt.n	800487c <__ieee754_rem_pio2+0x26c>
 800483a:	e9c4 0100 	strd	r0, r1, [r4]
 800483e:	46c2      	mov	sl, r8
 8004840:	46cb      	mov	fp, r9
 8004842:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004846:	4650      	mov	r0, sl
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	4659      	mov	r1, fp
 800484e:	f7fb fcc7 	bl	80001e0 <__aeabi_dsub>
 8004852:	463b      	mov	r3, r7
 8004854:	4632      	mov	r2, r6
 8004856:	f7fb fcc3 	bl	80001e0 <__aeabi_dsub>
 800485a:	9b04      	ldr	r3, [sp, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004862:	f6bf af11 	bge.w	8004688 <__ieee754_rem_pio2+0x78>
 8004866:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800486a:	6063      	str	r3, [r4, #4]
 800486c:	f8c4 8000 	str.w	r8, [r4]
 8004870:	60a0      	str	r0, [r4, #8]
 8004872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004876:	60e3      	str	r3, [r4, #12]
 8004878:	426d      	negs	r5, r5
 800487a:	e705      	b.n	8004688 <__ieee754_rem_pio2+0x78>
 800487c:	a326      	add	r3, pc, #152	; (adr r3, 8004918 <__ieee754_rem_pio2+0x308>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004886:	f7fb fe63 	bl	8000550 <__aeabi_dmul>
 800488a:	4606      	mov	r6, r0
 800488c:	460f      	mov	r7, r1
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4640      	mov	r0, r8
 8004894:	4649      	mov	r1, r9
 8004896:	f7fb fca3 	bl	80001e0 <__aeabi_dsub>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4682      	mov	sl, r0
 80048a0:	468b      	mov	fp, r1
 80048a2:	4640      	mov	r0, r8
 80048a4:	4649      	mov	r1, r9
 80048a6:	f7fb fc9b 	bl	80001e0 <__aeabi_dsub>
 80048aa:	4632      	mov	r2, r6
 80048ac:	463b      	mov	r3, r7
 80048ae:	f7fb fc97 	bl	80001e0 <__aeabi_dsub>
 80048b2:	a31b      	add	r3, pc, #108	; (adr r3, 8004920 <__ieee754_rem_pio2+0x310>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c0:	f7fb fe46 	bl	8000550 <__aeabi_dmul>
 80048c4:	4632      	mov	r2, r6
 80048c6:	463b      	mov	r3, r7
 80048c8:	f7fb fc8a 	bl	80001e0 <__aeabi_dsub>
 80048cc:	4606      	mov	r6, r0
 80048ce:	460f      	mov	r7, r1
 80048d0:	e764      	b.n	800479c <__ieee754_rem_pio2+0x18c>
 80048d2:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <__ieee754_rem_pio2+0x330>)
 80048d4:	4598      	cmp	r8, r3
 80048d6:	dd35      	ble.n	8004944 <__ieee754_rem_pio2+0x334>
 80048d8:	ee10 2a10 	vmov	r2, s0
 80048dc:	463b      	mov	r3, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fc7d 	bl	80001e0 <__aeabi_dsub>
 80048e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80048ea:	e9c4 0100 	strd	r0, r1, [r4]
 80048ee:	e6a1      	b.n	8004634 <__ieee754_rem_pio2+0x24>
 80048f0:	54400000 	.word	0x54400000
 80048f4:	3ff921fb 	.word	0x3ff921fb
 80048f8:	1a626331 	.word	0x1a626331
 80048fc:	3dd0b461 	.word	0x3dd0b461
 8004900:	1a600000 	.word	0x1a600000
 8004904:	3dd0b461 	.word	0x3dd0b461
 8004908:	2e037073 	.word	0x2e037073
 800490c:	3ba3198a 	.word	0x3ba3198a
 8004910:	6dc9c883 	.word	0x6dc9c883
 8004914:	3fe45f30 	.word	0x3fe45f30
 8004918:	2e000000 	.word	0x2e000000
 800491c:	3ba3198a 	.word	0x3ba3198a
 8004920:	252049c1 	.word	0x252049c1
 8004924:	397b839a 	.word	0x397b839a
 8004928:	3fe921fb 	.word	0x3fe921fb
 800492c:	4002d97b 	.word	0x4002d97b
 8004930:	3ff921fb 	.word	0x3ff921fb
 8004934:	413921fb 	.word	0x413921fb
 8004938:	3fe00000 	.word	0x3fe00000
 800493c:	08005be0 	.word	0x08005be0
 8004940:	7fefffff 	.word	0x7fefffff
 8004944:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004948:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800494c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004950:	4630      	mov	r0, r6
 8004952:	460f      	mov	r7, r1
 8004954:	f7fc f8ac 	bl	8000ab0 <__aeabi_d2iz>
 8004958:	f7fb fd90 	bl	800047c <__aeabi_i2d>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4630      	mov	r0, r6
 8004962:	4639      	mov	r1, r7
 8004964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004968:	f7fb fc3a 	bl	80001e0 <__aeabi_dsub>
 800496c:	2200      	movs	r2, #0
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <__ieee754_rem_pio2+0x3dc>)
 8004970:	f7fb fdee 	bl	8000550 <__aeabi_dmul>
 8004974:	460f      	mov	r7, r1
 8004976:	4606      	mov	r6, r0
 8004978:	f7fc f89a 	bl	8000ab0 <__aeabi_d2iz>
 800497c:	f7fb fd7e 	bl	800047c <__aeabi_i2d>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800498c:	f7fb fc28 	bl	80001e0 <__aeabi_dsub>
 8004990:	2200      	movs	r2, #0
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <__ieee754_rem_pio2+0x3dc>)
 8004994:	f7fb fddc 	bl	8000550 <__aeabi_dmul>
 8004998:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800499c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80049a0:	f04f 0803 	mov.w	r8, #3
 80049a4:	2600      	movs	r6, #0
 80049a6:	2700      	movs	r7, #0
 80049a8:	4632      	mov	r2, r6
 80049aa:	463b      	mov	r3, r7
 80049ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80049b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80049b4:	f7fc f834 	bl	8000a20 <__aeabi_dcmpeq>
 80049b8:	b9b0      	cbnz	r0, 80049e8 <__ieee754_rem_pio2+0x3d8>
 80049ba:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <__ieee754_rem_pio2+0x3e0>)
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	2302      	movs	r3, #2
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	462a      	mov	r2, r5
 80049c4:	4643      	mov	r3, r8
 80049c6:	4621      	mov	r1, r4
 80049c8:	a806      	add	r0, sp, #24
 80049ca:	f000 f98d 	bl	8004ce8 <__kernel_rem_pio2>
 80049ce:	9b04      	ldr	r3, [sp, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	4605      	mov	r5, r0
 80049d4:	f6bf ae58 	bge.w	8004688 <__ieee754_rem_pio2+0x78>
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	68e3      	ldr	r3, [r4, #12]
 80049e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	e746      	b.n	8004876 <__ieee754_rem_pio2+0x266>
 80049e8:	46d0      	mov	r8, sl
 80049ea:	e7dd      	b.n	80049a8 <__ieee754_rem_pio2+0x398>
 80049ec:	41700000 	.word	0x41700000
 80049f0:	08005c60 	.word	0x08005c60

080049f4 <__ieee754_sqrt>:
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	4955      	ldr	r1, [pc, #340]	; (8004b50 <__ieee754_sqrt+0x15c>)
 80049fa:	ec55 4b10 	vmov	r4, r5, d0
 80049fe:	43a9      	bics	r1, r5
 8004a00:	462b      	mov	r3, r5
 8004a02:	462a      	mov	r2, r5
 8004a04:	d112      	bne.n	8004a2c <__ieee754_sqrt+0x38>
 8004a06:	ee10 2a10 	vmov	r2, s0
 8004a0a:	ee10 0a10 	vmov	r0, s0
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fd9e 	bl	8000550 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fb fbe2 	bl	80001e4 <__adddf3>
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
 8004a24:	ec45 4b10 	vmov	d0, r4, r5
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	2d00      	cmp	r5, #0
 8004a2e:	ee10 0a10 	vmov	r0, s0
 8004a32:	4621      	mov	r1, r4
 8004a34:	dc0f      	bgt.n	8004a56 <__ieee754_sqrt+0x62>
 8004a36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004a3a:	4330      	orrs	r0, r6
 8004a3c:	d0f2      	beq.n	8004a24 <__ieee754_sqrt+0x30>
 8004a3e:	b155      	cbz	r5, 8004a56 <__ieee754_sqrt+0x62>
 8004a40:	ee10 2a10 	vmov	r2, s0
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fbca 	bl	80001e0 <__aeabi_dsub>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	f7fb fea8 	bl	80007a4 <__aeabi_ddiv>
 8004a54:	e7e4      	b.n	8004a20 <__ieee754_sqrt+0x2c>
 8004a56:	151b      	asrs	r3, r3, #20
 8004a58:	d073      	beq.n	8004b42 <__ieee754_sqrt+0x14e>
 8004a5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a5e:	07dd      	lsls	r5, r3, #31
 8004a60:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004a64:	bf48      	it	mi
 8004a66:	0fc8      	lsrmi	r0, r1, #31
 8004a68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a6c:	bf44      	itt	mi
 8004a6e:	0049      	lslmi	r1, r1, #1
 8004a70:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004a74:	2500      	movs	r5, #0
 8004a76:	1058      	asrs	r0, r3, #1
 8004a78:	0fcb      	lsrs	r3, r1, #31
 8004a7a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004a7e:	0049      	lsls	r1, r1, #1
 8004a80:	2316      	movs	r3, #22
 8004a82:	462c      	mov	r4, r5
 8004a84:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004a88:	19a7      	adds	r7, r4, r6
 8004a8a:	4297      	cmp	r7, r2
 8004a8c:	bfde      	ittt	le
 8004a8e:	19bc      	addle	r4, r7, r6
 8004a90:	1bd2      	suble	r2, r2, r7
 8004a92:	19ad      	addle	r5, r5, r6
 8004a94:	0fcf      	lsrs	r7, r1, #31
 8004a96:	3b01      	subs	r3, #1
 8004a98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004a9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004aa0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004aa4:	d1f0      	bne.n	8004a88 <__ieee754_sqrt+0x94>
 8004aa6:	f04f 0c20 	mov.w	ip, #32
 8004aaa:	469e      	mov	lr, r3
 8004aac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004ab0:	42a2      	cmp	r2, r4
 8004ab2:	eb06 070e 	add.w	r7, r6, lr
 8004ab6:	dc02      	bgt.n	8004abe <__ieee754_sqrt+0xca>
 8004ab8:	d112      	bne.n	8004ae0 <__ieee754_sqrt+0xec>
 8004aba:	428f      	cmp	r7, r1
 8004abc:	d810      	bhi.n	8004ae0 <__ieee754_sqrt+0xec>
 8004abe:	2f00      	cmp	r7, #0
 8004ac0:	eb07 0e06 	add.w	lr, r7, r6
 8004ac4:	da42      	bge.n	8004b4c <__ieee754_sqrt+0x158>
 8004ac6:	f1be 0f00 	cmp.w	lr, #0
 8004aca:	db3f      	blt.n	8004b4c <__ieee754_sqrt+0x158>
 8004acc:	f104 0801 	add.w	r8, r4, #1
 8004ad0:	1b12      	subs	r2, r2, r4
 8004ad2:	428f      	cmp	r7, r1
 8004ad4:	bf88      	it	hi
 8004ad6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004ada:	1bc9      	subs	r1, r1, r7
 8004adc:	4433      	add	r3, r6
 8004ade:	4644      	mov	r4, r8
 8004ae0:	0052      	lsls	r2, r2, #1
 8004ae2:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ae6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004aea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004aee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004af2:	d1dd      	bne.n	8004ab0 <__ieee754_sqrt+0xbc>
 8004af4:	430a      	orrs	r2, r1
 8004af6:	d006      	beq.n	8004b06 <__ieee754_sqrt+0x112>
 8004af8:	1c5c      	adds	r4, r3, #1
 8004afa:	bf13      	iteet	ne
 8004afc:	3301      	addne	r3, #1
 8004afe:	3501      	addeq	r5, #1
 8004b00:	4663      	moveq	r3, ip
 8004b02:	f023 0301 	bicne.w	r3, r3, #1
 8004b06:	106a      	asrs	r2, r5, #1
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	07e9      	lsls	r1, r5, #31
 8004b0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004b10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004b14:	bf48      	it	mi
 8004b16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004b1e:	461c      	mov	r4, r3
 8004b20:	e780      	b.n	8004a24 <__ieee754_sqrt+0x30>
 8004b22:	0aca      	lsrs	r2, r1, #11
 8004b24:	3815      	subs	r0, #21
 8004b26:	0549      	lsls	r1, r1, #21
 8004b28:	2a00      	cmp	r2, #0
 8004b2a:	d0fa      	beq.n	8004b22 <__ieee754_sqrt+0x12e>
 8004b2c:	02d6      	lsls	r6, r2, #11
 8004b2e:	d50a      	bpl.n	8004b46 <__ieee754_sqrt+0x152>
 8004b30:	f1c3 0420 	rsb	r4, r3, #32
 8004b34:	fa21 f404 	lsr.w	r4, r1, r4
 8004b38:	1e5d      	subs	r5, r3, #1
 8004b3a:	4099      	lsls	r1, r3
 8004b3c:	4322      	orrs	r2, r4
 8004b3e:	1b43      	subs	r3, r0, r5
 8004b40:	e78b      	b.n	8004a5a <__ieee754_sqrt+0x66>
 8004b42:	4618      	mov	r0, r3
 8004b44:	e7f0      	b.n	8004b28 <__ieee754_sqrt+0x134>
 8004b46:	0052      	lsls	r2, r2, #1
 8004b48:	3301      	adds	r3, #1
 8004b4a:	e7ef      	b.n	8004b2c <__ieee754_sqrt+0x138>
 8004b4c:	46a0      	mov	r8, r4
 8004b4e:	e7bf      	b.n	8004ad0 <__ieee754_sqrt+0xdc>
 8004b50:	7ff00000 	.word	0x7ff00000
 8004b54:	00000000 	.word	0x00000000

08004b58 <__kernel_cos>:
 8004b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	ec59 8b10 	vmov	r8, r9, d0
 8004b60:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004b64:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004b68:	ed2d 8b02 	vpush	{d8}
 8004b6c:	eeb0 8a41 	vmov.f32	s16, s2
 8004b70:	eef0 8a61 	vmov.f32	s17, s3
 8004b74:	da07      	bge.n	8004b86 <__kernel_cos+0x2e>
 8004b76:	ee10 0a10 	vmov	r0, s0
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb ff98 	bl	8000ab0 <__aeabi_d2iz>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 8089 	beq.w	8004c98 <__kernel_cos+0x140>
 8004b86:	4642      	mov	r2, r8
 8004b88:	464b      	mov	r3, r9
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	f7fb fcdf 	bl	8000550 <__aeabi_dmul>
 8004b92:	2200      	movs	r2, #0
 8004b94:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <__kernel_cos+0x178>)
 8004b96:	4604      	mov	r4, r0
 8004b98:	460d      	mov	r5, r1
 8004b9a:	f7fb fcd9 	bl	8000550 <__aeabi_dmul>
 8004b9e:	a340      	add	r3, pc, #256	; (adr r3, 8004ca0 <__kernel_cos+0x148>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	468b      	mov	fp, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7fb fcd0 	bl	8000550 <__aeabi_dmul>
 8004bb0:	a33d      	add	r3, pc, #244	; (adr r3, 8004ca8 <__kernel_cos+0x150>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fb15 	bl	80001e4 <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fcc7 	bl	8000550 <__aeabi_dmul>
 8004bc2:	a33b      	add	r3, pc, #236	; (adr r3, 8004cb0 <__kernel_cos+0x158>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f7fb fb0a 	bl	80001e0 <__aeabi_dsub>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	462b      	mov	r3, r5
 8004bd0:	f7fb fcbe 	bl	8000550 <__aeabi_dmul>
 8004bd4:	a338      	add	r3, pc, #224	; (adr r3, 8004cb8 <__kernel_cos+0x160>)
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f7fb fb03 	bl	80001e4 <__adddf3>
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f7fb fcb5 	bl	8000550 <__aeabi_dmul>
 8004be6:	a336      	add	r3, pc, #216	; (adr r3, 8004cc0 <__kernel_cos+0x168>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb faf8 	bl	80001e0 <__aeabi_dsub>
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	462b      	mov	r3, r5
 8004bf4:	f7fb fcac 	bl	8000550 <__aeabi_dmul>
 8004bf8:	a333      	add	r3, pc, #204	; (adr r3, 8004cc8 <__kernel_cos+0x170>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb faf1 	bl	80001e4 <__adddf3>
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f7fb fca3 	bl	8000550 <__aeabi_dmul>
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f7fb fc9f 	bl	8000550 <__aeabi_dmul>
 8004c12:	ec53 2b18 	vmov	r2, r3, d8
 8004c16:	4604      	mov	r4, r0
 8004c18:	460d      	mov	r5, r1
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	f7fb fc97 	bl	8000550 <__aeabi_dmul>
 8004c22:	460b      	mov	r3, r1
 8004c24:	4602      	mov	r2, r0
 8004c26:	4629      	mov	r1, r5
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7fb fad9 	bl	80001e0 <__aeabi_dsub>
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <__kernel_cos+0x17c>)
 8004c30:	429e      	cmp	r6, r3
 8004c32:	4680      	mov	r8, r0
 8004c34:	4689      	mov	r9, r1
 8004c36:	dc11      	bgt.n	8004c5c <__kernel_cos+0x104>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	4659      	mov	r1, fp
 8004c40:	f7fb face 	bl	80001e0 <__aeabi_dsub>
 8004c44:	460b      	mov	r3, r1
 8004c46:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <__kernel_cos+0x180>)
 8004c48:	4602      	mov	r2, r0
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f7fb fac8 	bl	80001e0 <__aeabi_dsub>
 8004c50:	ecbd 8b02 	vpop	{d8}
 8004c54:	ec41 0b10 	vmov	d0, r0, r1
 8004c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <__kernel_cos+0x184>)
 8004c5e:	491e      	ldr	r1, [pc, #120]	; (8004cd8 <__kernel_cos+0x180>)
 8004c60:	429e      	cmp	r6, r3
 8004c62:	bfcc      	ite	gt
 8004c64:	4d1e      	ldrgt	r5, [pc, #120]	; (8004ce0 <__kernel_cos+0x188>)
 8004c66:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004c6a:	2400      	movs	r4, #0
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	462b      	mov	r3, r5
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fb fab5 	bl	80001e0 <__aeabi_dsub>
 8004c76:	4622      	mov	r2, r4
 8004c78:	4606      	mov	r6, r0
 8004c7a:	460f      	mov	r7, r1
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	4650      	mov	r0, sl
 8004c80:	4659      	mov	r1, fp
 8004c82:	f7fb faad 	bl	80001e0 <__aeabi_dsub>
 8004c86:	4642      	mov	r2, r8
 8004c88:	464b      	mov	r3, r9
 8004c8a:	f7fb faa9 	bl	80001e0 <__aeabi_dsub>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4630      	mov	r0, r6
 8004c94:	4639      	mov	r1, r7
 8004c96:	e7d9      	b.n	8004c4c <__kernel_cos+0xf4>
 8004c98:	2000      	movs	r0, #0
 8004c9a:	490f      	ldr	r1, [pc, #60]	; (8004cd8 <__kernel_cos+0x180>)
 8004c9c:	e7d8      	b.n	8004c50 <__kernel_cos+0xf8>
 8004c9e:	bf00      	nop
 8004ca0:	be8838d4 	.word	0xbe8838d4
 8004ca4:	bda8fae9 	.word	0xbda8fae9
 8004ca8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004cac:	3e21ee9e 	.word	0x3e21ee9e
 8004cb0:	809c52ad 	.word	0x809c52ad
 8004cb4:	3e927e4f 	.word	0x3e927e4f
 8004cb8:	19cb1590 	.word	0x19cb1590
 8004cbc:	3efa01a0 	.word	0x3efa01a0
 8004cc0:	16c15177 	.word	0x16c15177
 8004cc4:	3f56c16c 	.word	0x3f56c16c
 8004cc8:	5555554c 	.word	0x5555554c
 8004ccc:	3fa55555 	.word	0x3fa55555
 8004cd0:	3fe00000 	.word	0x3fe00000
 8004cd4:	3fd33332 	.word	0x3fd33332
 8004cd8:	3ff00000 	.word	0x3ff00000
 8004cdc:	3fe90000 	.word	0x3fe90000
 8004ce0:	3fd20000 	.word	0x3fd20000
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <__kernel_rem_pio2>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	ed2d 8b02 	vpush	{d8}
 8004cf0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004cf4:	1ed4      	subs	r4, r2, #3
 8004cf6:	9308      	str	r3, [sp, #32]
 8004cf8:	9101      	str	r1, [sp, #4]
 8004cfa:	4bc5      	ldr	r3, [pc, #788]	; (8005010 <__kernel_rem_pio2+0x328>)
 8004cfc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8004d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	9b08      	ldr	r3, [sp, #32]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	9307      	str	r3, [sp, #28]
 8004d0c:	2318      	movs	r3, #24
 8004d0e:	fb94 f4f3 	sdiv	r4, r4, r3
 8004d12:	f06f 0317 	mvn.w	r3, #23
 8004d16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004d1a:	fb04 3303 	mla	r3, r4, r3, r3
 8004d1e:	eb03 0a02 	add.w	sl, r3, r2
 8004d22:	9b04      	ldr	r3, [sp, #16]
 8004d24:	9a07      	ldr	r2, [sp, #28]
 8004d26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005000 <__kernel_rem_pio2+0x318>
 8004d2a:	eb03 0802 	add.w	r8, r3, r2
 8004d2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004d30:	1aa7      	subs	r7, r4, r2
 8004d32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004d36:	ae22      	add	r6, sp, #136	; 0x88
 8004d38:	2500      	movs	r5, #0
 8004d3a:	4545      	cmp	r5, r8
 8004d3c:	dd13      	ble.n	8004d66 <__kernel_rem_pio2+0x7e>
 8004d3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005000 <__kernel_rem_pio2+0x318>
 8004d42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004d46:	2600      	movs	r6, #0
 8004d48:	9b04      	ldr	r3, [sp, #16]
 8004d4a:	429e      	cmp	r6, r3
 8004d4c:	dc32      	bgt.n	8004db4 <__kernel_rem_pio2+0xcc>
 8004d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d50:	9302      	str	r3, [sp, #8]
 8004d52:	9b08      	ldr	r3, [sp, #32]
 8004d54:	199d      	adds	r5, r3, r6
 8004d56:	ab22      	add	r3, sp, #136	; 0x88
 8004d58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004d5c:	9306      	str	r3, [sp, #24]
 8004d5e:	ec59 8b18 	vmov	r8, r9, d8
 8004d62:	2700      	movs	r7, #0
 8004d64:	e01f      	b.n	8004da6 <__kernel_rem_pio2+0xbe>
 8004d66:	42ef      	cmn	r7, r5
 8004d68:	d407      	bmi.n	8004d7a <__kernel_rem_pio2+0x92>
 8004d6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d6e:	f7fb fb85 	bl	800047c <__aeabi_i2d>
 8004d72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d76:	3501      	adds	r5, #1
 8004d78:	e7df      	b.n	8004d3a <__kernel_rem_pio2+0x52>
 8004d7a:	ec51 0b18 	vmov	r0, r1, d8
 8004d7e:	e7f8      	b.n	8004d72 <__kernel_rem_pio2+0x8a>
 8004d80:	9906      	ldr	r1, [sp, #24]
 8004d82:	9d02      	ldr	r5, [sp, #8]
 8004d84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004d88:	9106      	str	r1, [sp, #24]
 8004d8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004d8e:	9502      	str	r5, [sp, #8]
 8004d90:	f7fb fbde 	bl	8000550 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4640      	mov	r0, r8
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	f7fb fa22 	bl	80001e4 <__adddf3>
 8004da0:	3701      	adds	r7, #1
 8004da2:	4680      	mov	r8, r0
 8004da4:	4689      	mov	r9, r1
 8004da6:	9b07      	ldr	r3, [sp, #28]
 8004da8:	429f      	cmp	r7, r3
 8004daa:	dde9      	ble.n	8004d80 <__kernel_rem_pio2+0x98>
 8004dac:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004db0:	3601      	adds	r6, #1
 8004db2:	e7c9      	b.n	8004d48 <__kernel_rem_pio2+0x60>
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	aa0e      	add	r2, sp, #56	; 0x38
 8004db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8004dbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004dc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004dc4:	9c04      	ldr	r4, [sp, #16]
 8004dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dc8:	ab9a      	add	r3, sp, #616	; 0x268
 8004dca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004dce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dd6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004dda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004dde:	ab9a      	add	r3, sp, #616	; 0x268
 8004de0:	445b      	add	r3, fp
 8004de2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004de6:	2500      	movs	r5, #0
 8004de8:	1b63      	subs	r3, r4, r5
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dc78      	bgt.n	8004ee0 <__kernel_rem_pio2+0x1f8>
 8004dee:	4650      	mov	r0, sl
 8004df0:	ec49 8b10 	vmov	d0, r8, r9
 8004df4:	f000 fe3c 	bl	8005a70 <scalbn>
 8004df8:	ec57 6b10 	vmov	r6, r7, d0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004e02:	ee10 0a10 	vmov	r0, s0
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fba2 	bl	8000550 <__aeabi_dmul>
 8004e0c:	ec41 0b10 	vmov	d0, r0, r1
 8004e10:	f000 fd1a 	bl	8005848 <floor>
 8004e14:	2200      	movs	r2, #0
 8004e16:	ec51 0b10 	vmov	r0, r1, d0
 8004e1a:	4b7e      	ldr	r3, [pc, #504]	; (8005014 <__kernel_rem_pio2+0x32c>)
 8004e1c:	f7fb fb98 	bl	8000550 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb f9da 	bl	80001e0 <__aeabi_dsub>
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	4606      	mov	r6, r0
 8004e30:	f7fb fe3e 	bl	8000ab0 <__aeabi_d2iz>
 8004e34:	9006      	str	r0, [sp, #24]
 8004e36:	f7fb fb21 	bl	800047c <__aeabi_i2d>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4639      	mov	r1, r7
 8004e42:	f7fb f9cd 	bl	80001e0 <__aeabi_dsub>
 8004e46:	f1ba 0f00 	cmp.w	sl, #0
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460f      	mov	r7, r1
 8004e4e:	dd6c      	ble.n	8004f2a <__kernel_rem_pio2+0x242>
 8004e50:	1e62      	subs	r2, r4, #1
 8004e52:	ab0e      	add	r3, sp, #56	; 0x38
 8004e54:	f1ca 0118 	rsb	r1, sl, #24
 8004e58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e5c:	9d06      	ldr	r5, [sp, #24]
 8004e5e:	fa40 f301 	asr.w	r3, r0, r1
 8004e62:	441d      	add	r5, r3
 8004e64:	408b      	lsls	r3, r1
 8004e66:	1ac0      	subs	r0, r0, r3
 8004e68:	ab0e      	add	r3, sp, #56	; 0x38
 8004e6a:	9506      	str	r5, [sp, #24]
 8004e6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004e70:	f1ca 0317 	rsb	r3, sl, #23
 8004e74:	fa40 f303 	asr.w	r3, r0, r3
 8004e78:	9302      	str	r3, [sp, #8]
 8004e7a:	9b02      	ldr	r3, [sp, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd62      	ble.n	8004f46 <__kernel_rem_pio2+0x25e>
 8004e80:	9b06      	ldr	r3, [sp, #24]
 8004e82:	2200      	movs	r2, #0
 8004e84:	3301      	adds	r3, #1
 8004e86:	9306      	str	r3, [sp, #24]
 8004e88:	4615      	mov	r5, r2
 8004e8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e8e:	4294      	cmp	r4, r2
 8004e90:	f300 8095 	bgt.w	8004fbe <__kernel_rem_pio2+0x2d6>
 8004e94:	f1ba 0f00 	cmp.w	sl, #0
 8004e98:	dd07      	ble.n	8004eaa <__kernel_rem_pio2+0x1c2>
 8004e9a:	f1ba 0f01 	cmp.w	sl, #1
 8004e9e:	f000 80a2 	beq.w	8004fe6 <__kernel_rem_pio2+0x2fe>
 8004ea2:	f1ba 0f02 	cmp.w	sl, #2
 8004ea6:	f000 80c1 	beq.w	800502c <__kernel_rem_pio2+0x344>
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d14a      	bne.n	8004f46 <__kernel_rem_pio2+0x25e>
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	4958      	ldr	r1, [pc, #352]	; (8005018 <__kernel_rem_pio2+0x330>)
 8004eb8:	f7fb f992 	bl	80001e0 <__aeabi_dsub>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	2d00      	cmp	r5, #0
 8004ec2:	d040      	beq.n	8004f46 <__kernel_rem_pio2+0x25e>
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005008 <__kernel_rem_pio2+0x320>
 8004eca:	f000 fdd1 	bl	8005a70 <scalbn>
 8004ece:	4630      	mov	r0, r6
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	ec53 2b10 	vmov	r2, r3, d0
 8004ed6:	f7fb f983 	bl	80001e0 <__aeabi_dsub>
 8004eda:	4606      	mov	r6, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	e032      	b.n	8004f46 <__kernel_rem_pio2+0x25e>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4b4e      	ldr	r3, [pc, #312]	; (800501c <__kernel_rem_pio2+0x334>)
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	f7fb fb32 	bl	8000550 <__aeabi_dmul>
 8004eec:	f7fb fde0 	bl	8000ab0 <__aeabi_d2iz>
 8004ef0:	f7fb fac4 	bl	800047c <__aeabi_i2d>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <__kernel_rem_pio2+0x338>)
 8004ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004efc:	f7fb fb28 	bl	8000550 <__aeabi_dmul>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb f96a 	bl	80001e0 <__aeabi_dsub>
 8004f0c:	f7fb fdd0 	bl	8000ab0 <__aeabi_d2iz>
 8004f10:	ab0e      	add	r3, sp, #56	; 0x38
 8004f12:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8004f16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f1e:	f7fb f961 	bl	80001e4 <__adddf3>
 8004f22:	3501      	adds	r5, #1
 8004f24:	4680      	mov	r8, r0
 8004f26:	4689      	mov	r9, r1
 8004f28:	e75e      	b.n	8004de8 <__kernel_rem_pio2+0x100>
 8004f2a:	d105      	bne.n	8004f38 <__kernel_rem_pio2+0x250>
 8004f2c:	1e63      	subs	r3, r4, #1
 8004f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8004f30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f34:	15c3      	asrs	r3, r0, #23
 8004f36:	e79f      	b.n	8004e78 <__kernel_rem_pio2+0x190>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <__kernel_rem_pio2+0x33c>)
 8004f3c:	f7fb fd8e 	bl	8000a5c <__aeabi_dcmpge>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d139      	bne.n	8004fb8 <__kernel_rem_pio2+0x2d0>
 8004f44:	9002      	str	r0, [sp, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	f7fb fd67 	bl	8000a20 <__aeabi_dcmpeq>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f000 80c7 	beq.w	80050e6 <__kernel_rem_pio2+0x3fe>
 8004f58:	1e65      	subs	r5, r4, #1
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	9904      	ldr	r1, [sp, #16]
 8004f60:	428b      	cmp	r3, r1
 8004f62:	da6a      	bge.n	800503a <__kernel_rem_pio2+0x352>
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	f000 8088 	beq.w	800507a <__kernel_rem_pio2+0x392>
 8004f6a:	ab0e      	add	r3, sp, #56	; 0x38
 8004f6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004f70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80b4 	beq.w	80050e2 <__kernel_rem_pio2+0x3fa>
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005008 <__kernel_rem_pio2+0x320>
 8004f80:	f000 fd76 	bl	8005a70 <scalbn>
 8004f84:	00ec      	lsls	r4, r5, #3
 8004f86:	ab72      	add	r3, sp, #456	; 0x1c8
 8004f88:	191e      	adds	r6, r3, r4
 8004f8a:	ec59 8b10 	vmov	r8, r9, d0
 8004f8e:	f106 0a08 	add.w	sl, r6, #8
 8004f92:	462f      	mov	r7, r5
 8004f94:	2f00      	cmp	r7, #0
 8004f96:	f280 80df 	bge.w	8005158 <__kernel_rem_pio2+0x470>
 8004f9a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005000 <__kernel_rem_pio2+0x318>
 8004f9e:	f04f 0a00 	mov.w	sl, #0
 8004fa2:	eba5 030a 	sub.w	r3, r5, sl
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f2c0 810a 	blt.w	80051c0 <__kernel_rem_pio2+0x4d8>
 8004fac:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005028 <__kernel_rem_pio2+0x340>
 8004fb0:	ec59 8b18 	vmov	r8, r9, d8
 8004fb4:	2700      	movs	r7, #0
 8004fb6:	e0f5      	b.n	80051a4 <__kernel_rem_pio2+0x4bc>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	9302      	str	r3, [sp, #8]
 8004fbc:	e760      	b.n	8004e80 <__kernel_rem_pio2+0x198>
 8004fbe:	ab0e      	add	r3, sp, #56	; 0x38
 8004fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc4:	b94d      	cbnz	r5, 8004fda <__kernel_rem_pio2+0x2f2>
 8004fc6:	b12b      	cbz	r3, 8004fd4 <__kernel_rem_pio2+0x2ec>
 8004fc8:	a80e      	add	r0, sp, #56	; 0x38
 8004fca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004fce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	3201      	adds	r2, #1
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	e759      	b.n	8004e8e <__kernel_rem_pio2+0x1a6>
 8004fda:	a80e      	add	r0, sp, #56	; 0x38
 8004fdc:	1acb      	subs	r3, r1, r3
 8004fde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	e7f6      	b.n	8004fd4 <__kernel_rem_pio2+0x2ec>
 8004fe6:	1e62      	subs	r2, r4, #1
 8004fe8:	ab0e      	add	r3, sp, #56	; 0x38
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ff2:	a90e      	add	r1, sp, #56	; 0x38
 8004ff4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ff8:	e757      	b.n	8004eaa <__kernel_rem_pio2+0x1c2>
 8004ffa:	bf00      	nop
 8004ffc:	f3af 8000 	nop.w
	...
 800500c:	3ff00000 	.word	0x3ff00000
 8005010:	08005da8 	.word	0x08005da8
 8005014:	40200000 	.word	0x40200000
 8005018:	3ff00000 	.word	0x3ff00000
 800501c:	3e700000 	.word	0x3e700000
 8005020:	41700000 	.word	0x41700000
 8005024:	3fe00000 	.word	0x3fe00000
 8005028:	08005d68 	.word	0x08005d68
 800502c:	1e62      	subs	r2, r4, #1
 800502e:	ab0e      	add	r3, sp, #56	; 0x38
 8005030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005034:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005038:	e7db      	b.n	8004ff2 <__kernel_rem_pio2+0x30a>
 800503a:	a90e      	add	r1, sp, #56	; 0x38
 800503c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005040:	3b01      	subs	r3, #1
 8005042:	430a      	orrs	r2, r1
 8005044:	e78b      	b.n	8004f5e <__kernel_rem_pio2+0x276>
 8005046:	3301      	adds	r3, #1
 8005048:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800504c:	2900      	cmp	r1, #0
 800504e:	d0fa      	beq.n	8005046 <__kernel_rem_pio2+0x35e>
 8005050:	9a08      	ldr	r2, [sp, #32]
 8005052:	4422      	add	r2, r4
 8005054:	00d2      	lsls	r2, r2, #3
 8005056:	a922      	add	r1, sp, #136	; 0x88
 8005058:	18e3      	adds	r3, r4, r3
 800505a:	9206      	str	r2, [sp, #24]
 800505c:	440a      	add	r2, r1
 800505e:	9302      	str	r3, [sp, #8]
 8005060:	f10b 0108 	add.w	r1, fp, #8
 8005064:	f102 0308 	add.w	r3, r2, #8
 8005068:	1c66      	adds	r6, r4, #1
 800506a:	910a      	str	r1, [sp, #40]	; 0x28
 800506c:	2500      	movs	r5, #0
 800506e:	930d      	str	r3, [sp, #52]	; 0x34
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	42b3      	cmp	r3, r6
 8005074:	da04      	bge.n	8005080 <__kernel_rem_pio2+0x398>
 8005076:	461c      	mov	r4, r3
 8005078:	e6a6      	b.n	8004dc8 <__kernel_rem_pio2+0xe0>
 800507a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800507c:	2301      	movs	r3, #1
 800507e:	e7e3      	b.n	8005048 <__kernel_rem_pio2+0x360>
 8005080:	9b06      	ldr	r3, [sp, #24]
 8005082:	18ef      	adds	r7, r5, r3
 8005084:	ab22      	add	r3, sp, #136	; 0x88
 8005086:	441f      	add	r7, r3
 8005088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800508e:	f7fb f9f5 	bl	800047c <__aeabi_i2d>
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	461c      	mov	r4, r3
 8005096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005098:	e9c7 0100 	strd	r0, r1, [r7]
 800509c:	eb03 0b05 	add.w	fp, r3, r5
 80050a0:	2700      	movs	r7, #0
 80050a2:	f04f 0800 	mov.w	r8, #0
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	9b07      	ldr	r3, [sp, #28]
 80050ac:	429f      	cmp	r7, r3
 80050ae:	dd08      	ble.n	80050c2 <__kernel_rem_pio2+0x3da>
 80050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b2:	aa72      	add	r2, sp, #456	; 0x1c8
 80050b4:	18eb      	adds	r3, r5, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80050bc:	3601      	adds	r6, #1
 80050be:	3508      	adds	r5, #8
 80050c0:	e7d6      	b.n	8005070 <__kernel_rem_pio2+0x388>
 80050c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80050c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80050ca:	f7fb fa41 	bl	8000550 <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb f885 	bl	80001e4 <__adddf3>
 80050da:	3701      	adds	r7, #1
 80050dc:	4680      	mov	r8, r0
 80050de:	4689      	mov	r9, r1
 80050e0:	e7e3      	b.n	80050aa <__kernel_rem_pio2+0x3c2>
 80050e2:	3d01      	subs	r5, #1
 80050e4:	e741      	b.n	8004f6a <__kernel_rem_pio2+0x282>
 80050e6:	f1ca 0000 	rsb	r0, sl, #0
 80050ea:	ec47 6b10 	vmov	d0, r6, r7
 80050ee:	f000 fcbf 	bl	8005a70 <scalbn>
 80050f2:	ec57 6b10 	vmov	r6, r7, d0
 80050f6:	2200      	movs	r2, #0
 80050f8:	4b99      	ldr	r3, [pc, #612]	; (8005360 <__kernel_rem_pio2+0x678>)
 80050fa:	ee10 0a10 	vmov	r0, s0
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fcac 	bl	8000a5c <__aeabi_dcmpge>
 8005104:	b1f8      	cbz	r0, 8005146 <__kernel_rem_pio2+0x45e>
 8005106:	2200      	movs	r2, #0
 8005108:	4b96      	ldr	r3, [pc, #600]	; (8005364 <__kernel_rem_pio2+0x67c>)
 800510a:	4630      	mov	r0, r6
 800510c:	4639      	mov	r1, r7
 800510e:	f7fb fa1f 	bl	8000550 <__aeabi_dmul>
 8005112:	f7fb fccd 	bl	8000ab0 <__aeabi_d2iz>
 8005116:	4680      	mov	r8, r0
 8005118:	f7fb f9b0 	bl	800047c <__aeabi_i2d>
 800511c:	2200      	movs	r2, #0
 800511e:	4b90      	ldr	r3, [pc, #576]	; (8005360 <__kernel_rem_pio2+0x678>)
 8005120:	f7fb fa16 	bl	8000550 <__aeabi_dmul>
 8005124:	460b      	mov	r3, r1
 8005126:	4602      	mov	r2, r0
 8005128:	4639      	mov	r1, r7
 800512a:	4630      	mov	r0, r6
 800512c:	f7fb f858 	bl	80001e0 <__aeabi_dsub>
 8005130:	f7fb fcbe 	bl	8000ab0 <__aeabi_d2iz>
 8005134:	1c65      	adds	r5, r4, #1
 8005136:	ab0e      	add	r3, sp, #56	; 0x38
 8005138:	f10a 0a18 	add.w	sl, sl, #24
 800513c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005140:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005144:	e719      	b.n	8004f7a <__kernel_rem_pio2+0x292>
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb fcb1 	bl	8000ab0 <__aeabi_d2iz>
 800514e:	ab0e      	add	r3, sp, #56	; 0x38
 8005150:	4625      	mov	r5, r4
 8005152:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005156:	e710      	b.n	8004f7a <__kernel_rem_pio2+0x292>
 8005158:	ab0e      	add	r3, sp, #56	; 0x38
 800515a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800515e:	f7fb f98d 	bl	800047c <__aeabi_i2d>
 8005162:	4642      	mov	r2, r8
 8005164:	464b      	mov	r3, r9
 8005166:	f7fb f9f3 	bl	8000550 <__aeabi_dmul>
 800516a:	2200      	movs	r2, #0
 800516c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005170:	4b7c      	ldr	r3, [pc, #496]	; (8005364 <__kernel_rem_pio2+0x67c>)
 8005172:	4640      	mov	r0, r8
 8005174:	4649      	mov	r1, r9
 8005176:	f7fb f9eb 	bl	8000550 <__aeabi_dmul>
 800517a:	3f01      	subs	r7, #1
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	e708      	b.n	8004f94 <__kernel_rem_pio2+0x2ac>
 8005182:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800518e:	f7fb f9df 	bl	8000550 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb f823 	bl	80001e4 <__adddf3>
 800519e:	3701      	adds	r7, #1
 80051a0:	4680      	mov	r8, r0
 80051a2:	4689      	mov	r9, r1
 80051a4:	9b04      	ldr	r3, [sp, #16]
 80051a6:	429f      	cmp	r7, r3
 80051a8:	dc01      	bgt.n	80051ae <__kernel_rem_pio2+0x4c6>
 80051aa:	45ba      	cmp	sl, r7
 80051ac:	dae9      	bge.n	8005182 <__kernel_rem_pio2+0x49a>
 80051ae:	ab4a      	add	r3, sp, #296	; 0x128
 80051b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051b4:	e9c3 8900 	strd	r8, r9, [r3]
 80051b8:	f10a 0a01 	add.w	sl, sl, #1
 80051bc:	3e08      	subs	r6, #8
 80051be:	e6f0      	b.n	8004fa2 <__kernel_rem_pio2+0x2ba>
 80051c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d85b      	bhi.n	800527e <__kernel_rem_pio2+0x596>
 80051c6:	e8df f003 	tbb	[pc, r3]
 80051ca:	264a      	.short	0x264a
 80051cc:	0226      	.short	0x0226
 80051ce:	ab9a      	add	r3, sp, #616	; 0x268
 80051d0:	441c      	add	r4, r3
 80051d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80051d6:	46a2      	mov	sl, r4
 80051d8:	46ab      	mov	fp, r5
 80051da:	f1bb 0f00 	cmp.w	fp, #0
 80051de:	dc6c      	bgt.n	80052ba <__kernel_rem_pio2+0x5d2>
 80051e0:	46a2      	mov	sl, r4
 80051e2:	46ab      	mov	fp, r5
 80051e4:	f1bb 0f01 	cmp.w	fp, #1
 80051e8:	f300 8086 	bgt.w	80052f8 <__kernel_rem_pio2+0x610>
 80051ec:	2000      	movs	r0, #0
 80051ee:	2100      	movs	r1, #0
 80051f0:	2d01      	cmp	r5, #1
 80051f2:	f300 80a0 	bgt.w	8005336 <__kernel_rem_pio2+0x64e>
 80051f6:	9b02      	ldr	r3, [sp, #8]
 80051f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80051fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 809e 	bne.w	8005342 <__kernel_rem_pio2+0x65a>
 8005206:	9b01      	ldr	r3, [sp, #4]
 8005208:	e9c3 7800 	strd	r7, r8, [r3]
 800520c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005210:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005214:	e033      	b.n	800527e <__kernel_rem_pio2+0x596>
 8005216:	3408      	adds	r4, #8
 8005218:	ab4a      	add	r3, sp, #296	; 0x128
 800521a:	441c      	add	r4, r3
 800521c:	462e      	mov	r6, r5
 800521e:	2000      	movs	r0, #0
 8005220:	2100      	movs	r1, #0
 8005222:	2e00      	cmp	r6, #0
 8005224:	da3a      	bge.n	800529c <__kernel_rem_pio2+0x5b4>
 8005226:	9b02      	ldr	r3, [sp, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d03d      	beq.n	80052a8 <__kernel_rem_pio2+0x5c0>
 800522c:	4602      	mov	r2, r0
 800522e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005232:	9c01      	ldr	r4, [sp, #4]
 8005234:	e9c4 2300 	strd	r2, r3, [r4]
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005240:	f7fa ffce 	bl	80001e0 <__aeabi_dsub>
 8005244:	ae4c      	add	r6, sp, #304	; 0x130
 8005246:	2401      	movs	r4, #1
 8005248:	42a5      	cmp	r5, r4
 800524a:	da30      	bge.n	80052ae <__kernel_rem_pio2+0x5c6>
 800524c:	9b02      	ldr	r3, [sp, #8]
 800524e:	b113      	cbz	r3, 8005256 <__kernel_rem_pio2+0x56e>
 8005250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005254:	4619      	mov	r1, r3
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800525c:	e00f      	b.n	800527e <__kernel_rem_pio2+0x596>
 800525e:	ab9a      	add	r3, sp, #616	; 0x268
 8005260:	441c      	add	r4, r3
 8005262:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005266:	2000      	movs	r0, #0
 8005268:	2100      	movs	r1, #0
 800526a:	2d00      	cmp	r5, #0
 800526c:	da10      	bge.n	8005290 <__kernel_rem_pio2+0x5a8>
 800526e:	9b02      	ldr	r3, [sp, #8]
 8005270:	b113      	cbz	r3, 8005278 <__kernel_rem_pio2+0x590>
 8005272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005276:	4619      	mov	r1, r3
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	e9c3 0100 	strd	r0, r1, [r3]
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	f003 0007 	and.w	r0, r3, #7
 8005284:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005288:	ecbd 8b02 	vpop	{d8}
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005294:	f7fa ffa6 	bl	80001e4 <__adddf3>
 8005298:	3d01      	subs	r5, #1
 800529a:	e7e6      	b.n	800526a <__kernel_rem_pio2+0x582>
 800529c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80052a0:	f7fa ffa0 	bl	80001e4 <__adddf3>
 80052a4:	3e01      	subs	r6, #1
 80052a6:	e7bc      	b.n	8005222 <__kernel_rem_pio2+0x53a>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	e7c1      	b.n	8005232 <__kernel_rem_pio2+0x54a>
 80052ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80052b2:	f7fa ff97 	bl	80001e4 <__adddf3>
 80052b6:	3401      	adds	r4, #1
 80052b8:	e7c6      	b.n	8005248 <__kernel_rem_pio2+0x560>
 80052ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80052be:	ed3a 7b02 	vldmdb	sl!, {d7}
 80052c2:	4640      	mov	r0, r8
 80052c4:	ec53 2b17 	vmov	r2, r3, d7
 80052c8:	4649      	mov	r1, r9
 80052ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80052ce:	f7fa ff89 	bl	80001e4 <__adddf3>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4606      	mov	r6, r0
 80052d8:	460f      	mov	r7, r1
 80052da:	4640      	mov	r0, r8
 80052dc:	4649      	mov	r1, r9
 80052de:	f7fa ff7f 	bl	80001e0 <__aeabi_dsub>
 80052e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e6:	f7fa ff7d 	bl	80001e4 <__adddf3>
 80052ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052ee:	e9ca 0100 	strd	r0, r1, [sl]
 80052f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80052f6:	e770      	b.n	80051da <__kernel_rem_pio2+0x4f2>
 80052f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80052fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005300:	4630      	mov	r0, r6
 8005302:	ec53 2b17 	vmov	r2, r3, d7
 8005306:	4639      	mov	r1, r7
 8005308:	ed8d 7b04 	vstr	d7, [sp, #16]
 800530c:	f7fa ff6a 	bl	80001e4 <__adddf3>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4680      	mov	r8, r0
 8005316:	4689      	mov	r9, r1
 8005318:	4630      	mov	r0, r6
 800531a:	4639      	mov	r1, r7
 800531c:	f7fa ff60 	bl	80001e0 <__aeabi_dsub>
 8005320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005324:	f7fa ff5e 	bl	80001e4 <__adddf3>
 8005328:	f10b 3bff 	add.w	fp, fp, #4294967295
 800532c:	e9ca 0100 	strd	r0, r1, [sl]
 8005330:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005334:	e756      	b.n	80051e4 <__kernel_rem_pio2+0x4fc>
 8005336:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800533a:	f7fa ff53 	bl	80001e4 <__adddf3>
 800533e:	3d01      	subs	r5, #1
 8005340:	e756      	b.n	80051f0 <__kernel_rem_pio2+0x508>
 8005342:	9b01      	ldr	r3, [sp, #4]
 8005344:	9a01      	ldr	r2, [sp, #4]
 8005346:	601f      	str	r7, [r3, #0]
 8005348:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800534c:	605c      	str	r4, [r3, #4]
 800534e:	609d      	str	r5, [r3, #8]
 8005350:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005354:	60d3      	str	r3, [r2, #12]
 8005356:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800535a:	6110      	str	r0, [r2, #16]
 800535c:	6153      	str	r3, [r2, #20]
 800535e:	e78e      	b.n	800527e <__kernel_rem_pio2+0x596>
 8005360:	41700000 	.word	0x41700000
 8005364:	3e700000 	.word	0x3e700000

08005368 <__kernel_sin>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	ec55 4b10 	vmov	r4, r5, d0
 8005370:	b085      	sub	sp, #20
 8005372:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005376:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800537a:	ed8d 1b00 	vstr	d1, [sp]
 800537e:	9002      	str	r0, [sp, #8]
 8005380:	da06      	bge.n	8005390 <__kernel_sin+0x28>
 8005382:	ee10 0a10 	vmov	r0, s0
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb fb92 	bl	8000ab0 <__aeabi_d2iz>
 800538c:	2800      	cmp	r0, #0
 800538e:	d051      	beq.n	8005434 <__kernel_sin+0xcc>
 8005390:	4622      	mov	r2, r4
 8005392:	462b      	mov	r3, r5
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fb f8da 	bl	8000550 <__aeabi_dmul>
 800539c:	4682      	mov	sl, r0
 800539e:	468b      	mov	fp, r1
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4620      	mov	r0, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	f7fb f8d2 	bl	8000550 <__aeabi_dmul>
 80053ac:	a341      	add	r3, pc, #260	; (adr r3, 80054b4 <__kernel_sin+0x14c>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4680      	mov	r8, r0
 80053b4:	4689      	mov	r9, r1
 80053b6:	4650      	mov	r0, sl
 80053b8:	4659      	mov	r1, fp
 80053ba:	f7fb f8c9 	bl	8000550 <__aeabi_dmul>
 80053be:	a33f      	add	r3, pc, #252	; (adr r3, 80054bc <__kernel_sin+0x154>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fa ff0c 	bl	80001e0 <__aeabi_dsub>
 80053c8:	4652      	mov	r2, sl
 80053ca:	465b      	mov	r3, fp
 80053cc:	f7fb f8c0 	bl	8000550 <__aeabi_dmul>
 80053d0:	a33c      	add	r3, pc, #240	; (adr r3, 80054c4 <__kernel_sin+0x15c>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fa ff05 	bl	80001e4 <__adddf3>
 80053da:	4652      	mov	r2, sl
 80053dc:	465b      	mov	r3, fp
 80053de:	f7fb f8b7 	bl	8000550 <__aeabi_dmul>
 80053e2:	a33a      	add	r3, pc, #232	; (adr r3, 80054cc <__kernel_sin+0x164>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fa fefa 	bl	80001e0 <__aeabi_dsub>
 80053ec:	4652      	mov	r2, sl
 80053ee:	465b      	mov	r3, fp
 80053f0:	f7fb f8ae 	bl	8000550 <__aeabi_dmul>
 80053f4:	a337      	add	r3, pc, #220	; (adr r3, 80054d4 <__kernel_sin+0x16c>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fa fef3 	bl	80001e4 <__adddf3>
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	4606      	mov	r6, r0
 8005402:	460f      	mov	r7, r1
 8005404:	b9db      	cbnz	r3, 800543e <__kernel_sin+0xd6>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4650      	mov	r0, sl
 800540c:	4659      	mov	r1, fp
 800540e:	f7fb f89f 	bl	8000550 <__aeabi_dmul>
 8005412:	a325      	add	r3, pc, #148	; (adr r3, 80054a8 <__kernel_sin+0x140>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa fee2 	bl	80001e0 <__aeabi_dsub>
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f7fb f896 	bl	8000550 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	f7fa feda 	bl	80001e4 <__adddf3>
 8005430:	4604      	mov	r4, r0
 8005432:	460d      	mov	r5, r1
 8005434:	ec45 4b10 	vmov	d0, r4, r5
 8005438:	b005      	add	sp, #20
 800543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543e:	2200      	movs	r2, #0
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <__kernel_sin+0x148>)
 8005442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005446:	f7fb f883 	bl	8000550 <__aeabi_dmul>
 800544a:	4632      	mov	r2, r6
 800544c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005450:	463b      	mov	r3, r7
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb f87b 	bl	8000550 <__aeabi_dmul>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	f7fa febd 	bl	80001e0 <__aeabi_dsub>
 8005466:	4652      	mov	r2, sl
 8005468:	465b      	mov	r3, fp
 800546a:	f7fb f871 	bl	8000550 <__aeabi_dmul>
 800546e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005472:	f7fa feb5 	bl	80001e0 <__aeabi_dsub>
 8005476:	a30c      	add	r3, pc, #48	; (adr r3, 80054a8 <__kernel_sin+0x140>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb f864 	bl	8000550 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fa fea8 	bl	80001e4 <__adddf3>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fa fea0 	bl	80001e0 <__aeabi_dsub>
 80054a0:	e7c6      	b.n	8005430 <__kernel_sin+0xc8>
 80054a2:	bf00      	nop
 80054a4:	f3af 8000 	nop.w
 80054a8:	55555549 	.word	0x55555549
 80054ac:	3fc55555 	.word	0x3fc55555
 80054b0:	3fe00000 	.word	0x3fe00000
 80054b4:	5acfd57c 	.word	0x5acfd57c
 80054b8:	3de5d93a 	.word	0x3de5d93a
 80054bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80054c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80054c4:	57b1fe7d 	.word	0x57b1fe7d
 80054c8:	3ec71de3 	.word	0x3ec71de3
 80054cc:	19c161d5 	.word	0x19c161d5
 80054d0:	3f2a01a0 	.word	0x3f2a01a0
 80054d4:	1110f8a6 	.word	0x1110f8a6
 80054d8:	3f811111 	.word	0x3f811111
 80054dc:	00000000 	.word	0x00000000

080054e0 <atan>:
 80054e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec55 4b10 	vmov	r4, r5, d0
 80054e8:	4bc3      	ldr	r3, [pc, #780]	; (80057f8 <atan+0x318>)
 80054ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054ee:	429e      	cmp	r6, r3
 80054f0:	46ab      	mov	fp, r5
 80054f2:	dd18      	ble.n	8005526 <atan+0x46>
 80054f4:	4bc1      	ldr	r3, [pc, #772]	; (80057fc <atan+0x31c>)
 80054f6:	429e      	cmp	r6, r3
 80054f8:	dc01      	bgt.n	80054fe <atan+0x1e>
 80054fa:	d109      	bne.n	8005510 <atan+0x30>
 80054fc:	b144      	cbz	r4, 8005510 <atan+0x30>
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fa fe6d 	bl	80001e4 <__adddf3>
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	e006      	b.n	800551e <atan+0x3e>
 8005510:	f1bb 0f00 	cmp.w	fp, #0
 8005514:	f340 8131 	ble.w	800577a <atan+0x29a>
 8005518:	a59b      	add	r5, pc, #620	; (adr r5, 8005788 <atan+0x2a8>)
 800551a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800551e:	ec45 4b10 	vmov	d0, r4, r5
 8005522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	4bb6      	ldr	r3, [pc, #728]	; (8005800 <atan+0x320>)
 8005528:	429e      	cmp	r6, r3
 800552a:	dc14      	bgt.n	8005556 <atan+0x76>
 800552c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005530:	429e      	cmp	r6, r3
 8005532:	dc0d      	bgt.n	8005550 <atan+0x70>
 8005534:	a396      	add	r3, pc, #600	; (adr r3, 8005790 <atan+0x2b0>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	ee10 0a10 	vmov	r0, s0
 800553e:	4629      	mov	r1, r5
 8005540:	f7fa fe50 	bl	80001e4 <__adddf3>
 8005544:	2200      	movs	r2, #0
 8005546:	4baf      	ldr	r3, [pc, #700]	; (8005804 <atan+0x324>)
 8005548:	f7fb fa92 	bl	8000a70 <__aeabi_dcmpgt>
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e6      	bne.n	800551e <atan+0x3e>
 8005550:	f04f 3aff 	mov.w	sl, #4294967295
 8005554:	e02b      	b.n	80055ae <atan+0xce>
 8005556:	f000 f963 	bl	8005820 <fabs>
 800555a:	4bab      	ldr	r3, [pc, #684]	; (8005808 <atan+0x328>)
 800555c:	429e      	cmp	r6, r3
 800555e:	ec55 4b10 	vmov	r4, r5, d0
 8005562:	f300 80bf 	bgt.w	80056e4 <atan+0x204>
 8005566:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800556a:	429e      	cmp	r6, r3
 800556c:	f300 80a0 	bgt.w	80056b0 <atan+0x1d0>
 8005570:	ee10 2a10 	vmov	r2, s0
 8005574:	ee10 0a10 	vmov	r0, s0
 8005578:	462b      	mov	r3, r5
 800557a:	4629      	mov	r1, r5
 800557c:	f7fa fe32 	bl	80001e4 <__adddf3>
 8005580:	2200      	movs	r2, #0
 8005582:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <atan+0x324>)
 8005584:	f7fa fe2c 	bl	80001e0 <__aeabi_dsub>
 8005588:	2200      	movs	r2, #0
 800558a:	4606      	mov	r6, r0
 800558c:	460f      	mov	r7, r1
 800558e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fa fe25 	bl	80001e4 <__adddf3>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb f8ff 	bl	80007a4 <__aeabi_ddiv>
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa ffcb 	bl	8000550 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4680      	mov	r8, r0
 80055c0:	4689      	mov	r9, r1
 80055c2:	f7fa ffc5 	bl	8000550 <__aeabi_dmul>
 80055c6:	a374      	add	r3, pc, #464	; (adr r3, 8005798 <atan+0x2b8>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	f7fa ffbe 	bl	8000550 <__aeabi_dmul>
 80055d4:	a372      	add	r3, pc, #456	; (adr r3, 80057a0 <atan+0x2c0>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa fe03 	bl	80001e4 <__adddf3>
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	f7fa ffb5 	bl	8000550 <__aeabi_dmul>
 80055e6:	a370      	add	r3, pc, #448	; (adr r3, 80057a8 <atan+0x2c8>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fdfa 	bl	80001e4 <__adddf3>
 80055f0:	4632      	mov	r2, r6
 80055f2:	463b      	mov	r3, r7
 80055f4:	f7fa ffac 	bl	8000550 <__aeabi_dmul>
 80055f8:	a36d      	add	r3, pc, #436	; (adr r3, 80057b0 <atan+0x2d0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fdf1 	bl	80001e4 <__adddf3>
 8005602:	4632      	mov	r2, r6
 8005604:	463b      	mov	r3, r7
 8005606:	f7fa ffa3 	bl	8000550 <__aeabi_dmul>
 800560a:	a36b      	add	r3, pc, #428	; (adr r3, 80057b8 <atan+0x2d8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fde8 	bl	80001e4 <__adddf3>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	f7fa ff9a 	bl	8000550 <__aeabi_dmul>
 800561c:	a368      	add	r3, pc, #416	; (adr r3, 80057c0 <atan+0x2e0>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fddf 	bl	80001e4 <__adddf3>
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	f7fa ff91 	bl	8000550 <__aeabi_dmul>
 800562e:	a366      	add	r3, pc, #408	; (adr r3, 80057c8 <atan+0x2e8>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa ff88 	bl	8000550 <__aeabi_dmul>
 8005640:	a363      	add	r3, pc, #396	; (adr r3, 80057d0 <atan+0x2f0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa fdcb 	bl	80001e0 <__aeabi_dsub>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa ff7f 	bl	8000550 <__aeabi_dmul>
 8005652:	a361      	add	r3, pc, #388	; (adr r3, 80057d8 <atan+0x2f8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fdc2 	bl	80001e0 <__aeabi_dsub>
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	f7fa ff76 	bl	8000550 <__aeabi_dmul>
 8005664:	a35e      	add	r3, pc, #376	; (adr r3, 80057e0 <atan+0x300>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fdb9 	bl	80001e0 <__aeabi_dsub>
 800566e:	4632      	mov	r2, r6
 8005670:	463b      	mov	r3, r7
 8005672:	f7fa ff6d 	bl	8000550 <__aeabi_dmul>
 8005676:	a35c      	add	r3, pc, #368	; (adr r3, 80057e8 <atan+0x308>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa fdb0 	bl	80001e0 <__aeabi_dsub>
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	f7fa ff64 	bl	8000550 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4640      	mov	r0, r8
 800568e:	4649      	mov	r1, r9
 8005690:	f7fa fda8 	bl	80001e4 <__adddf3>
 8005694:	4622      	mov	r2, r4
 8005696:	462b      	mov	r3, r5
 8005698:	f7fa ff5a 	bl	8000550 <__aeabi_dmul>
 800569c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	d14b      	bne.n	800573e <atan+0x25e>
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fa fd99 	bl	80001e0 <__aeabi_dsub>
 80056ae:	e72c      	b.n	800550a <atan+0x2a>
 80056b0:	ee10 0a10 	vmov	r0, s0
 80056b4:	2200      	movs	r2, #0
 80056b6:	4b53      	ldr	r3, [pc, #332]	; (8005804 <atan+0x324>)
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7fa fd91 	bl	80001e0 <__aeabi_dsub>
 80056be:	2200      	movs	r2, #0
 80056c0:	4606      	mov	r6, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <atan+0x324>)
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fd8b 	bl	80001e4 <__adddf3>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb f865 	bl	80007a4 <__aeabi_ddiv>
 80056da:	f04f 0a01 	mov.w	sl, #1
 80056de:	4604      	mov	r4, r0
 80056e0:	460d      	mov	r5, r1
 80056e2:	e764      	b.n	80055ae <atan+0xce>
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <atan+0x32c>)
 80056e6:	429e      	cmp	r6, r3
 80056e8:	dc1d      	bgt.n	8005726 <atan+0x246>
 80056ea:	ee10 0a10 	vmov	r0, s0
 80056ee:	2200      	movs	r2, #0
 80056f0:	4b47      	ldr	r3, [pc, #284]	; (8005810 <atan+0x330>)
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd74 	bl	80001e0 <__aeabi_dsub>
 80056f8:	2200      	movs	r2, #0
 80056fa:	4606      	mov	r6, r0
 80056fc:	460f      	mov	r7, r1
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <atan+0x330>)
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fa ff24 	bl	8000550 <__aeabi_dmul>
 8005708:	2200      	movs	r2, #0
 800570a:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <atan+0x324>)
 800570c:	f7fa fd6a 	bl	80001e4 <__adddf3>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fb f844 	bl	80007a4 <__aeabi_ddiv>
 800571c:	f04f 0a02 	mov.w	sl, #2
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	e743      	b.n	80055ae <atan+0xce>
 8005726:	462b      	mov	r3, r5
 8005728:	ee10 2a10 	vmov	r2, s0
 800572c:	2000      	movs	r0, #0
 800572e:	4939      	ldr	r1, [pc, #228]	; (8005814 <atan+0x334>)
 8005730:	f7fb f838 	bl	80007a4 <__aeabi_ddiv>
 8005734:	f04f 0a03 	mov.w	sl, #3
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	e737      	b.n	80055ae <atan+0xce>
 800573e:	4b36      	ldr	r3, [pc, #216]	; (8005818 <atan+0x338>)
 8005740:	4e36      	ldr	r6, [pc, #216]	; (800581c <atan+0x33c>)
 8005742:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005746:	4456      	add	r6, sl
 8005748:	449a      	add	sl, r3
 800574a:	e9da 2300 	ldrd	r2, r3, [sl]
 800574e:	f7fa fd47 	bl	80001e0 <__aeabi_dsub>
 8005752:	4622      	mov	r2, r4
 8005754:	462b      	mov	r3, r5
 8005756:	f7fa fd43 	bl	80001e0 <__aeabi_dsub>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005762:	f7fa fd3d 	bl	80001e0 <__aeabi_dsub>
 8005766:	f1bb 0f00 	cmp.w	fp, #0
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	f6bf aed6 	bge.w	800551e <atan+0x3e>
 8005772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005776:	461d      	mov	r5, r3
 8005778:	e6d1      	b.n	800551e <atan+0x3e>
 800577a:	a51d      	add	r5, pc, #116	; (adr r5, 80057f0 <atan+0x310>)
 800577c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005780:	e6cd      	b.n	800551e <atan+0x3e>
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	54442d18 	.word	0x54442d18
 800578c:	3ff921fb 	.word	0x3ff921fb
 8005790:	8800759c 	.word	0x8800759c
 8005794:	7e37e43c 	.word	0x7e37e43c
 8005798:	e322da11 	.word	0xe322da11
 800579c:	3f90ad3a 	.word	0x3f90ad3a
 80057a0:	24760deb 	.word	0x24760deb
 80057a4:	3fa97b4b 	.word	0x3fa97b4b
 80057a8:	a0d03d51 	.word	0xa0d03d51
 80057ac:	3fb10d66 	.word	0x3fb10d66
 80057b0:	c54c206e 	.word	0xc54c206e
 80057b4:	3fb745cd 	.word	0x3fb745cd
 80057b8:	920083ff 	.word	0x920083ff
 80057bc:	3fc24924 	.word	0x3fc24924
 80057c0:	5555550d 	.word	0x5555550d
 80057c4:	3fd55555 	.word	0x3fd55555
 80057c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80057cc:	bfa2b444 	.word	0xbfa2b444
 80057d0:	52defd9a 	.word	0x52defd9a
 80057d4:	3fadde2d 	.word	0x3fadde2d
 80057d8:	af749a6d 	.word	0xaf749a6d
 80057dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80057e0:	fe231671 	.word	0xfe231671
 80057e4:	3fbc71c6 	.word	0x3fbc71c6
 80057e8:	9998ebc4 	.word	0x9998ebc4
 80057ec:	3fc99999 	.word	0x3fc99999
 80057f0:	54442d18 	.word	0x54442d18
 80057f4:	bff921fb 	.word	0xbff921fb
 80057f8:	440fffff 	.word	0x440fffff
 80057fc:	7ff00000 	.word	0x7ff00000
 8005800:	3fdbffff 	.word	0x3fdbffff
 8005804:	3ff00000 	.word	0x3ff00000
 8005808:	3ff2ffff 	.word	0x3ff2ffff
 800580c:	40037fff 	.word	0x40037fff
 8005810:	3ff80000 	.word	0x3ff80000
 8005814:	bff00000 	.word	0xbff00000
 8005818:	08005dd8 	.word	0x08005dd8
 800581c:	08005db8 	.word	0x08005db8

08005820 <fabs>:
 8005820:	ec51 0b10 	vmov	r0, r1, d0
 8005824:	ee10 2a10 	vmov	r2, s0
 8005828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800582c:	ec43 2b10 	vmov	d0, r2, r3
 8005830:	4770      	bx	lr

08005832 <finite>:
 8005832:	ee10 3a90 	vmov	r3, s1
 8005836:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800583a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800583e:	0fc0      	lsrs	r0, r0, #31
 8005840:	4770      	bx	lr
 8005842:	0000      	movs	r0, r0
 8005844:	0000      	movs	r0, r0
	...

08005848 <floor>:
 8005848:	ec51 0b10 	vmov	r0, r1, d0
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005854:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005858:	2e13      	cmp	r6, #19
 800585a:	460c      	mov	r4, r1
 800585c:	ee10 5a10 	vmov	r5, s0
 8005860:	4680      	mov	r8, r0
 8005862:	dc34      	bgt.n	80058ce <floor+0x86>
 8005864:	2e00      	cmp	r6, #0
 8005866:	da16      	bge.n	8005896 <floor+0x4e>
 8005868:	a335      	add	r3, pc, #212	; (adr r3, 8005940 <floor+0xf8>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f7fa fcb9 	bl	80001e4 <__adddf3>
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	f7fb f8fb 	bl	8000a70 <__aeabi_dcmpgt>
 800587a:	b148      	cbz	r0, 8005890 <floor+0x48>
 800587c:	2c00      	cmp	r4, #0
 800587e:	da59      	bge.n	8005934 <floor+0xec>
 8005880:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005884:	4a30      	ldr	r2, [pc, #192]	; (8005948 <floor+0x100>)
 8005886:	432b      	orrs	r3, r5
 8005888:	2500      	movs	r5, #0
 800588a:	42ab      	cmp	r3, r5
 800588c:	bf18      	it	ne
 800588e:	4614      	movne	r4, r2
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	e025      	b.n	80058e2 <floor+0x9a>
 8005896:	4f2d      	ldr	r7, [pc, #180]	; (800594c <floor+0x104>)
 8005898:	4137      	asrs	r7, r6
 800589a:	ea01 0307 	and.w	r3, r1, r7
 800589e:	4303      	orrs	r3, r0
 80058a0:	d01f      	beq.n	80058e2 <floor+0x9a>
 80058a2:	a327      	add	r3, pc, #156	; (adr r3, 8005940 <floor+0xf8>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f7fa fc9c 	bl	80001e4 <__adddf3>
 80058ac:	2200      	movs	r2, #0
 80058ae:	2300      	movs	r3, #0
 80058b0:	f7fb f8de 	bl	8000a70 <__aeabi_dcmpgt>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d0eb      	beq.n	8005890 <floor+0x48>
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	bfbe      	ittt	lt
 80058bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80058c4:	19a4      	addlt	r4, r4, r6
 80058c6:	ea24 0407 	bic.w	r4, r4, r7
 80058ca:	2500      	movs	r5, #0
 80058cc:	e7e0      	b.n	8005890 <floor+0x48>
 80058ce:	2e33      	cmp	r6, #51	; 0x33
 80058d0:	dd0b      	ble.n	80058ea <floor+0xa2>
 80058d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80058d6:	d104      	bne.n	80058e2 <floor+0x9a>
 80058d8:	ee10 2a10 	vmov	r2, s0
 80058dc:	460b      	mov	r3, r1
 80058de:	f7fa fc81 	bl	80001e4 <__adddf3>
 80058e2:	ec41 0b10 	vmov	d0, r0, r1
 80058e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295
 80058f2:	fa23 f707 	lsr.w	r7, r3, r7
 80058f6:	4207      	tst	r7, r0
 80058f8:	d0f3      	beq.n	80058e2 <floor+0x9a>
 80058fa:	a311      	add	r3, pc, #68	; (adr r3, 8005940 <floor+0xf8>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f7fa fc70 	bl	80001e4 <__adddf3>
 8005904:	2200      	movs	r2, #0
 8005906:	2300      	movs	r3, #0
 8005908:	f7fb f8b2 	bl	8000a70 <__aeabi_dcmpgt>
 800590c:	2800      	cmp	r0, #0
 800590e:	d0bf      	beq.n	8005890 <floor+0x48>
 8005910:	2c00      	cmp	r4, #0
 8005912:	da02      	bge.n	800591a <floor+0xd2>
 8005914:	2e14      	cmp	r6, #20
 8005916:	d103      	bne.n	8005920 <floor+0xd8>
 8005918:	3401      	adds	r4, #1
 800591a:	ea25 0507 	bic.w	r5, r5, r7
 800591e:	e7b7      	b.n	8005890 <floor+0x48>
 8005920:	2301      	movs	r3, #1
 8005922:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005926:	fa03 f606 	lsl.w	r6, r3, r6
 800592a:	4435      	add	r5, r6
 800592c:	4545      	cmp	r5, r8
 800592e:	bf38      	it	cc
 8005930:	18e4      	addcc	r4, r4, r3
 8005932:	e7f2      	b.n	800591a <floor+0xd2>
 8005934:	2500      	movs	r5, #0
 8005936:	462c      	mov	r4, r5
 8005938:	e7aa      	b.n	8005890 <floor+0x48>
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w
 8005940:	8800759c 	.word	0x8800759c
 8005944:	7e37e43c 	.word	0x7e37e43c
 8005948:	bff00000 	.word	0xbff00000
 800594c:	000fffff 	.word	0x000fffff

08005950 <matherr>:
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr
 8005954:	0000      	movs	r0, r0
	...

08005958 <nan>:
 8005958:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005960 <nan+0x8>
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00000000 	.word	0x00000000
 8005964:	7ff80000 	.word	0x7ff80000

08005968 <rint>:
 8005968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596a:	ec51 0b10 	vmov	r0, r1, d0
 800596e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005972:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005976:	2e13      	cmp	r6, #19
 8005978:	460b      	mov	r3, r1
 800597a:	ee10 4a10 	vmov	r4, s0
 800597e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005982:	dc56      	bgt.n	8005a32 <rint+0xca>
 8005984:	2e00      	cmp	r6, #0
 8005986:	da2b      	bge.n	80059e0 <rint+0x78>
 8005988:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800598c:	4302      	orrs	r2, r0
 800598e:	d023      	beq.n	80059d8 <rint+0x70>
 8005990:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005994:	4302      	orrs	r2, r0
 8005996:	4254      	negs	r4, r2
 8005998:	4314      	orrs	r4, r2
 800599a:	0c4b      	lsrs	r3, r1, #17
 800599c:	0b24      	lsrs	r4, r4, #12
 800599e:	045b      	lsls	r3, r3, #17
 80059a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80059a4:	ea44 0103 	orr.w	r1, r4, r3
 80059a8:	460b      	mov	r3, r1
 80059aa:	492f      	ldr	r1, [pc, #188]	; (8005a68 <rint+0x100>)
 80059ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80059b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80059b4:	4602      	mov	r2, r0
 80059b6:	4639      	mov	r1, r7
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7fa fc13 	bl	80001e4 <__adddf3>
 80059be:	e9cd 0100 	strd	r0, r1, [sp]
 80059c2:	463b      	mov	r3, r7
 80059c4:	4632      	mov	r2, r6
 80059c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ca:	f7fa fc09 	bl	80001e0 <__aeabi_dsub>
 80059ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80059d6:	4639      	mov	r1, r7
 80059d8:	ec41 0b10 	vmov	d0, r0, r1
 80059dc:	b003      	add	sp, #12
 80059de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e0:	4a22      	ldr	r2, [pc, #136]	; (8005a6c <rint+0x104>)
 80059e2:	4132      	asrs	r2, r6
 80059e4:	ea01 0702 	and.w	r7, r1, r2
 80059e8:	4307      	orrs	r7, r0
 80059ea:	d0f5      	beq.n	80059d8 <rint+0x70>
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	4011      	ands	r1, r2
 80059f0:	430c      	orrs	r4, r1
 80059f2:	d00b      	beq.n	8005a0c <rint+0xa4>
 80059f4:	ea23 0202 	bic.w	r2, r3, r2
 80059f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059fc:	2e13      	cmp	r6, #19
 80059fe:	fa43 f306 	asr.w	r3, r3, r6
 8005a02:	bf0c      	ite	eq
 8005a04:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005a08:	2400      	movne	r4, #0
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	4916      	ldr	r1, [pc, #88]	; (8005a68 <rint+0x100>)
 8005a0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005a12:	4622      	mov	r2, r4
 8005a14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fa fbe2 	bl	80001e4 <__adddf3>
 8005a20:	e9cd 0100 	strd	r0, r1, [sp]
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a2c:	f7fa fbd8 	bl	80001e0 <__aeabi_dsub>
 8005a30:	e7d2      	b.n	80059d8 <rint+0x70>
 8005a32:	2e33      	cmp	r6, #51	; 0x33
 8005a34:	dd07      	ble.n	8005a46 <rint+0xde>
 8005a36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005a3a:	d1cd      	bne.n	80059d8 <rint+0x70>
 8005a3c:	ee10 2a10 	vmov	r2, s0
 8005a40:	f7fa fbd0 	bl	80001e4 <__adddf3>
 8005a44:	e7c8      	b.n	80059d8 <rint+0x70>
 8005a46:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	40f2      	lsrs	r2, r6
 8005a50:	4210      	tst	r0, r2
 8005a52:	d0c1      	beq.n	80059d8 <rint+0x70>
 8005a54:	0852      	lsrs	r2, r2, #1
 8005a56:	4210      	tst	r0, r2
 8005a58:	bf1f      	itttt	ne
 8005a5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005a5e:	ea20 0202 	bicne.w	r2, r0, r2
 8005a62:	4134      	asrne	r4, r6
 8005a64:	4314      	orrne	r4, r2
 8005a66:	e7d1      	b.n	8005a0c <rint+0xa4>
 8005a68:	08005df8 	.word	0x08005df8
 8005a6c:	000fffff 	.word	0x000fffff

08005a70 <scalbn>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	ec55 4b10 	vmov	r4, r5, d0
 8005a76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	b9aa      	cbnz	r2, 8005aac <scalbn+0x3c>
 8005a80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a84:	4323      	orrs	r3, r4
 8005a86:	d03b      	beq.n	8005b00 <scalbn+0x90>
 8005a88:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <scalbn+0xe0>)
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	ee10 0a10 	vmov	r0, s0
 8005a92:	f7fa fd5d 	bl	8000550 <__aeabi_dmul>
 8005a96:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <scalbn+0xe4>)
 8005a98:	429e      	cmp	r6, r3
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	da12      	bge.n	8005ac6 <scalbn+0x56>
 8005aa0:	a327      	add	r3, pc, #156	; (adr r3, 8005b40 <scalbn+0xd0>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f7fa fd53 	bl	8000550 <__aeabi_dmul>
 8005aaa:	e009      	b.n	8005ac0 <scalbn+0x50>
 8005aac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005ab0:	428a      	cmp	r2, r1
 8005ab2:	d10c      	bne.n	8005ace <scalbn+0x5e>
 8005ab4:	ee10 2a10 	vmov	r2, s0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	f7fa fb92 	bl	80001e4 <__adddf3>
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	460d      	mov	r5, r1
 8005ac4:	e01c      	b.n	8005b00 <scalbn+0x90>
 8005ac6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005aca:	460b      	mov	r3, r1
 8005acc:	3a36      	subs	r2, #54	; 0x36
 8005ace:	4432      	add	r2, r6
 8005ad0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	dd0b      	ble.n	8005af0 <scalbn+0x80>
 8005ad8:	ec45 4b11 	vmov	d1, r4, r5
 8005adc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005b48 <scalbn+0xd8>
 8005ae0:	f000 f83c 	bl	8005b5c <copysign>
 8005ae4:	a318      	add	r3, pc, #96	; (adr r3, 8005b48 <scalbn+0xd8>)
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	ec51 0b10 	vmov	r0, r1, d0
 8005aee:	e7da      	b.n	8005aa6 <scalbn+0x36>
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	dd08      	ble.n	8005b06 <scalbn+0x96>
 8005af4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005af8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005afc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b00:	ec45 4b10 	vmov	d0, r4, r5
 8005b04:	bd70      	pop	{r4, r5, r6, pc}
 8005b06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b0a:	da0d      	bge.n	8005b28 <scalbn+0xb8>
 8005b0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b10:	429e      	cmp	r6, r3
 8005b12:	ec45 4b11 	vmov	d1, r4, r5
 8005b16:	dce1      	bgt.n	8005adc <scalbn+0x6c>
 8005b18:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005b40 <scalbn+0xd0>
 8005b1c:	f000 f81e 	bl	8005b5c <copysign>
 8005b20:	a307      	add	r3, pc, #28	; (adr r3, 8005b40 <scalbn+0xd0>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	e7e0      	b.n	8005aea <scalbn+0x7a>
 8005b28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b2c:	3236      	adds	r2, #54	; 0x36
 8005b2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <scalbn+0xe8>)
 8005b3e:	e7b2      	b.n	8005aa6 <scalbn+0x36>
 8005b40:	c2f8f359 	.word	0xc2f8f359
 8005b44:	01a56e1f 	.word	0x01a56e1f
 8005b48:	8800759c 	.word	0x8800759c
 8005b4c:	7e37e43c 	.word	0x7e37e43c
 8005b50:	43500000 	.word	0x43500000
 8005b54:	ffff3cb0 	.word	0xffff3cb0
 8005b58:	3c900000 	.word	0x3c900000

08005b5c <copysign>:
 8005b5c:	ec51 0b10 	vmov	r0, r1, d0
 8005b60:	ee11 0a90 	vmov	r0, s3
 8005b64:	ee10 2a10 	vmov	r2, s0
 8005b68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005b70:	ea41 0300 	orr.w	r3, r1, r0
 8005b74:	ec43 2b10 	vmov	d0, r2, r3
 8005b78:	4770      	bx	lr
	...

08005b7c <_init>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

08005b88 <_fini>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr
