
kretanje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08006710  08006710  00016710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006990  08006990  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006998  08006998  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080069a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000080  08006a20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08006a20  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e93f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002719  00000000  00000000  0002e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00031108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017633  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf1f  00000000  00000000  00049e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a7b6  00000000  00000000  00055d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000e0594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066f4 	.word	0x080066f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080066f4 	.word	0x080066f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <I2C1_Init>:

/*
 * Standard mode (100kHz) on PB8 (SCL) and PB9 (SDA)
 * Configures GPIO pins, enables I2C1 clock, and sets required register values.
 */
void I2C1_Init(void) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // Enable I2C1 clock
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <I2C1_Init+0x94>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <I2C1_Init+0x94>)
 8000eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <I2C1_Init+0x94>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <I2C1_Init+0x94>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
     RCC_AHB1ENR_GPIOBEN bit used to enable the clock for GPIO port B

     */

    // Configure PB6 and PB7 as alternate function I2C1
    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9); //Clear mode bits for PB8 PB9,other unchanged,force them to 00,input mode
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <I2C1_Init+0x98>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <I2C1_Init+0x98>)
 8000ec2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ec6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1); // Set bits 1 for pins PB8 and PB9 to 1,while leaving bits 0 to 0
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <I2C1_Init+0x98>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <I2C1_Init+0x98>)
 8000ece:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000ed2:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9); // Open-drain mode,required for i2c for bidirectional comm
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <I2C1_Init+0x98>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <I2C1_Init+0x98>)
 8000eda:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ede:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR |= (1 << (8 * 2)) | (1 << (9 * 2));
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <I2C1_Init+0x98>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <I2C1_Init+0x98>)
 8000ee6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000eea:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)); // Set alternate function I2C1
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <I2C1_Init+0x98>)
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <I2C1_Init+0x98>)
 8000ef2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000ef6:	6253      	str	r3, [r2, #36]	; 0x24
	4 << 0 → Places 0100 in bits 0-3
	This configures PB8 and PB9 to Alternate Function 4 (AF4), which is the I2C1 SCL/SDA function
 *
 */
    // Reset and configure I2C1
    I2C1->CR1 = I2C_CR1_SWRST; //Clears all settings and resets the I2C1 to its default state
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <I2C1_Init+0x9c>)
 8000efa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000efe:	601a      	str	r2, [r3, #0]
   // I2C1->CR1 = 0; //Clears the reset bit, bringing I2C1 back to normal operation
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <I2C1_Init+0x9c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <I2C1_Init+0x9c>)
 8000f06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f0a:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = 16; // Set peripheral clock frequency (16MHz)
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <I2C1_Init+0x9c>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80; // Configure standard mode (100kHz)
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <I2C1_Init+0x9c>)
 8000f14:	2250      	movs	r2, #80	; 0x50
 8000f16:	61da      	str	r2, [r3, #28]
    //Formula for Standard Mode CCR = PCLK1 / (2*I2C Clock speed)

    I2C1->TRISE = 17; //Configure maximum rise time
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <I2C1_Init+0x9c>)
 8000f1a:	2211      	movs	r2, #17
 8000f1c:	621a      	str	r2, [r3, #32]
    PCLK1 Peripheral clock frequency APB1 clock
    t_r = Max rise time in nanoseconds
    Pull-up resistors and bus capacitance affect rise time
    If rise time is too slow, communication fails or slows down
    */
    I2C1->CR1 |= I2C_CR1_PE; // Enable I2C1
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <I2C1_Init+0x9c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <I2C1_Init+0x9c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6013      	str	r3, [r2, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40005400 	.word	0x40005400

08000f40 <I2C1_Start>:

void I2C1_Start(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <I2C1_Start+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <I2C1_Start+0x28>)
 8000f4a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000f4e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB)); // Wait for start condition flag
 8000f50:	bf00      	nop
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <I2C1_Start+0x28>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <I2C1_Start+0x12>
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40005400 	.word	0x40005400

08000f6c <I2C1_Stop>:
	I2C_SR1_SB (Bit 0) is the Start Bit (SB) flag
	While loop waits until SB is set to 1, meaning the start condition has been successfully sent
 */


void I2C1_Stop(void) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <I2C1_Stop+0x1c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <I2C1_Stop+0x1c>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40005400 	.word	0x40005400

08000f8c <I2C1_Write>:
	I2C_CR1_STOP (Bit 9) is used to generate a Stop Condition on the I2C bus
	The |= operation ensures only the STOP bit is set, keeping other settings unchanged
 */


void I2C1_Write(uint8_t data) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = data;
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <I2C1_Write+0x2c>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE)); // Wait for data to be transmitted
 8000f9c:	bf00      	nop
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <I2C1_Write+0x2c>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <I2C1_Write+0x12>
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40005400 	.word	0x40005400

08000fbc <motor_init>:
#include <stdbool.h>
#include "biblioteka/pwm.h"
#include "stm32f4xx.h"
#include "biblioteka/motor.h"

void motor_init(){
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0);
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <motor_init+0xe8>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a37      	ldr	r2, [pc, #220]	; (80010a4 <motor_init+0xe8>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1);
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <motor_init+0xe8>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <motor_init+0xe8>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(0b11 << 8 * 2);
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <motor_init+0xec>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <motor_init+0xec>)
 8000fde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fe2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 8 * 2);  // DIR A8
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <motor_init+0xec>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <motor_init+0xec>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(0b11 << 10 * 2);
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <motor_init+0xf0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2d      	ldr	r2, [pc, #180]	; (80010ac <motor_init+0xf0>)
 8000ff6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ffa:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0b11 << 10 * 2);
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <motor_init+0xf0>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <motor_init+0xf0>)
 8001002:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001006:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0b01 << 10 * 2);  // FLT B10
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <motor_init+0xf0>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <motor_init+0xf0>)
 800100e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001012:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 10 * 2);
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <motor_init+0xec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <motor_init+0xec>)
 800101a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800101e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 10 * 2);
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <motor_init+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <motor_init+0xec>)
 8001026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800102a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (0b1 << 10); 			//SLP A10
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <motor_init+0xec>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <motor_init+0xec>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6153      	str	r3, [r2, #20]


	GPIOA->MODER &= ~(0b11 << 9 * 2);	// DIR A9
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <motor_init+0xec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <motor_init+0xec>)
 800103e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001042:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 9 * 2);
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <motor_init+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <motor_init+0xec>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0b11 << 6 * 2);    // FLT A6
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <motor_init+0xec>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <motor_init+0xec>)
 8001056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0b11 << 6 * 2);
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <motor_init+0xec>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <motor_init+0xec>)
 8001062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001066:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b01 << 6 * 2);
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <motor_init+0xec>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <motor_init+0xec>)
 800106e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001072:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~(0b11 << 8 * 2);
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <motor_init+0xf0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <motor_init+0xf0>)
 800107a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800107e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0b01 << 8 * 2); 	// SLP B8
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <motor_init+0xf0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <motor_init+0xf0>)
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (0b1 << 8);
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <motor_init+0xf0>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <motor_init+0xf0>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6153      	str	r3, [r2, #20]

}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400

080010b0 <inc_2_rad>:
static	float y;
static	float theta;
static	float v;
static	float w;

 float inc_2_rad(){
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	return ((2*M_PI)/(2048*4));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <inc_2_rad+0x18>)
 80010b6:	ee07 3a90 	vmov	s15, r3
}
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	3a490fdb 	.word	0x3a490fdb

080010cc <odometrija>:
	theta=0;
	v=0;
	w=0;
}

void odometrija(int dt){
 80010cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d0:	ed2d 8b02 	vpush	{d8}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]

	  theta += w;
	  x+= v*(cos(theta));
	  y+= v*(sin(theta));*/

	    dt_sec = dt / 1000.;
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f9ce 	bl	800047c <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b94      	ldr	r3, [pc, #592]	; (8001338 <odometrija+0x26c>)
 80010e6:	f7ff fb5d 	bl	80007a4 <__aeabi_ddiv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f7ff fd05 	bl	8000b00 <__aeabi_d2f>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b90      	ldr	r3, [pc, #576]	; (800133c <odometrija+0x270>)
 80010fa:	601a      	str	r2, [r3, #0]

		 enc_r = enc1_GetInc();
 80010fc:	f001 fada 	bl	80026b4 <enc1_GetInc>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b8e      	ldr	r3, [pc, #568]	; (8001340 <odometrija+0x274>)
 8001106:	601a      	str	r2, [r3, #0]
		 enc_l = enc2_GetInc();
 8001108:	f001 fb5c 	bl	80027c4 <enc2_GetInc>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	4b8c      	ldr	r3, [pc, #560]	; (8001344 <odometrija+0x278>)
 8001112:	601a      	str	r2, [r3, #0]



		// INC * RAD/INC * 1/s * m
		w_r = enc_r * inc_2_rad() / dt_sec;
 8001114:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <odometrija+0x274>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001120:	f7ff ffc6 	bl	80010b0 <inc_2_rad>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	ee68 6a27 	vmul.f32	s13, s16, s15
 800112c:	4b83      	ldr	r3, [pc, #524]	; (800133c <odometrija+0x270>)
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001136:	4b84      	ldr	r3, [pc, #528]	; (8001348 <odometrija+0x27c>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
		w_l = enc_l * inc_2_rad() / dt_sec;
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <odometrija+0x278>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001148:	f7ff ffb2 	bl	80010b0 <inc_2_rad>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001154:	4b79      	ldr	r3, [pc, #484]	; (800133c <odometrija+0x270>)
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115e:	4b7b      	ldr	r3, [pc, #492]	; (800134c <odometrija+0x280>)
 8001160:	edc3 7a00 	vstr	s15, [r3]

		v_r = w_r * (d_tocka/2);
 8001164:	4b78      	ldr	r3, [pc, #480]	; (8001348 <odometrija+0x27c>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	4b77      	ldr	r3, [pc, #476]	; (8001350 <odometrija+0x284>)
 8001174:	edc3 7a00 	vstr	s15, [r3]
		v_l = w_l * (d_tocka/2);
 8001178:	4b74      	ldr	r3, [pc, #464]	; (800134c <odometrija+0x280>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <odometrija+0x288>)
 8001188:	edc3 7a00 	vstr	s15, [r3]

		 v = (v_r + v_l)/2;
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <odometrija+0x284>)
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <odometrija+0x288>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <odometrija+0x28c>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
		 w = (v_r - v_l)/razmak_tockova;
 80011aa:	4b69      	ldr	r3, [pc, #420]	; (8001350 <odometrija+0x284>)
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <odometrija+0x288>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ba:	eddf 6a68 	vldr	s13, [pc, #416]	; 800135c <odometrija+0x290>
 80011be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <odometrija+0x294>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]

		 theta = normalize_angle(theta+ w * dt_sec);
 80011c8:	4b65      	ldr	r3, [pc, #404]	; (8001360 <odometrija+0x294>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <odometrija+0x270>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <odometrija+0x298>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f000 f957 	bl	8001498 <normalize_angle>
 80011ea:	eef0 7a40 	vmov.f32	s15, s0
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <odometrija+0x298>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
		x +=v* cos(theta + (w*dt_sec/2)) * dt_sec;
 80011f4:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <odometrija+0x29c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f951 	bl	80004a0 <__aeabi_f2d>
 80011fe:	4604      	mov	r4, r0
 8001200:	460d      	mov	r5, r1
 8001202:	4b55      	ldr	r3, [pc, #340]	; (8001358 <odometrija+0x28c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f94a 	bl	80004a0 <__aeabi_f2d>
 800120c:	4680      	mov	r8, r0
 800120e:	4689      	mov	r9, r1
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <odometrija+0x294>)
 8001212:	ed93 7a00 	vldr	s14, [r3]
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <odometrija+0x270>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001224:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <odometrija+0x298>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	ee17 0a90 	vmov	r0, s15
 8001236:	f7ff f933 	bl	80004a0 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	ec43 2b10 	vmov	d0, r2, r3
 8001242:	f002 ff59 	bl	80040f8 <cos>
 8001246:	ec53 2b10 	vmov	r2, r3, d0
 800124a:	4640      	mov	r0, r8
 800124c:	4649      	mov	r1, r9
 800124e:	f7ff f97f 	bl	8000550 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4690      	mov	r8, r2
 8001258:	4699      	mov	r9, r3
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <odometrija+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f91e 	bl	80004a0 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4640      	mov	r0, r8
 800126a:	4649      	mov	r1, r9
 800126c:	f7ff f970 	bl	8000550 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7fe ffb4 	bl	80001e4 <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f7ff fc3c 	bl	8000b00 <__aeabi_d2f>
 8001288:	4602      	mov	r2, r0
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <odometrija+0x29c>)
 800128c:	601a      	str	r2, [r3, #0]
		y += v * sin(theta + (w*dt_sec/2)) * dt_sec;
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <odometrija+0x2a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f904 	bl	80004a0 <__aeabi_f2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <odometrija+0x28c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8fd 	bl	80004a0 <__aeabi_f2d>
 80012a6:	4680      	mov	r8, r0
 80012a8:	4689      	mov	r9, r1
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <odometrija+0x294>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <odometrija+0x270>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <odometrija+0x298>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f7ff f8e6 	bl	80004a0 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	ec43 2b10 	vmov	d0, r2, r3
 80012dc:	f002 ff50 	bl	8004180 <sin>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4640      	mov	r0, r8
 80012e6:	4649      	mov	r1, r9
 80012e8:	f7ff f932 	bl	8000550 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4690      	mov	r8, r2
 80012f2:	4699      	mov	r9, r3
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <odometrija+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8d1 	bl	80004a0 <__aeabi_f2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4640      	mov	r0, r8
 8001304:	4649      	mov	r1, r9
 8001306:	f7ff f923 	bl	8000550 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7fe ff67 	bl	80001e4 <__adddf3>
 8001316:	4603      	mov	r3, r0
 8001318:	460c      	mov	r4, r1
 800131a:	4618      	mov	r0, r3
 800131c:	4621      	mov	r1, r4
 800131e:	f7ff fbef 	bl	8000b00 <__aeabi_d2f>
 8001322:	4602      	mov	r2, r0
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <odometrija+0x2a0>)
 8001326:	601a      	str	r2, [r3, #0]


}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	ecbd 8b02 	vpop	{d8}
 8001332:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001336:	bf00      	nop
 8001338:	408f4000 	.word	0x408f4000
 800133c:	200000ac 	.word	0x200000ac
 8001340:	200000a8 	.word	0x200000a8
 8001344:	200000a4 	.word	0x200000a4
 8001348:	200000a0 	.word	0x200000a0
 800134c:	2000009c 	.word	0x2000009c
 8001350:	200001a8 	.word	0x200001a8
 8001354:	200001a0 	.word	0x200001a0
 8001358:	200000bc 	.word	0x200000bc
 800135c:	43960000 	.word	0x43960000
 8001360:	200000c0 	.word	0x200000c0
 8001364:	200000b8 	.word	0x200000b8
 8001368:	200000b0 	.word	0x200000b0
 800136c:	200000b4 	.word	0x200000b4

08001370 <get_x>:

float get_x (){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	return x;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <get_x+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	ee07 3a90 	vmov	s15, r3
}
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	200000b0 	.word	0x200000b0

0800138c <get_y>:

float get_y (){
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	return y;
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <get_y+0x18>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	ee07 3a90 	vmov	s15, r3
}
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	200000b4 	.word	0x200000b4

080013a8 <get_theta>:

float get_theta (){
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	return theta;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <get_theta+0x18>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	ee07 3a90 	vmov	s15, r3
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200000b8 	.word	0x200000b8

080013c4 <get_w>:

void set_theta_smer (){
	 theta=+M_PI;
}

float get_w (){
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	return w;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <get_w+0x18>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	ee07 3a90 	vmov	s15, r3
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	200000c0 	.word	0x200000c0

080013e0 <get_v>:

float get_v (){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return v;
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <get_v+0x18>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200000bc 	.word	0x200000bc

080013fc <pid_init>:
static float const w_min = -6;
static float const vel_max = 2100;
static float const vel_min = -2100;

void pid_init ()
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	e=0;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <pid_init+0x68>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	ei=0;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <pid_init+0x6c>)
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	ed=0;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <pid_init+0x70>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	e_pre=0;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <pid_init+0x74>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	u=0;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <pid_init+0x78>)
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	faza=0;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <pid_init+0x7c>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
	v_dref=0;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <pid_init+0x80>)
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
	v_lref=0;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <pid_init+0x84>)
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	w_cr=0;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <pid_init+0x88>)
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
	v_cr=0;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <pid_init+0x8c>)
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
	brojac=0;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <pid_init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	izlazak=0;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <pid_init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200000c4 	.word	0x200000c4
 8001468:	200000c8 	.word	0x200000c8
 800146c:	200000cc 	.word	0x200000cc
 8001470:	200000d0 	.word	0x200000d0
 8001474:	200000e4 	.word	0x200000e4
 8001478:	200000f0 	.word	0x200000f0
 800147c:	200001b4 	.word	0x200001b4
 8001480:	200001ac 	.word	0x200001ac
 8001484:	200001b0 	.word	0x200001b0
 8001488:	200001b8 	.word	0x200001b8
 800148c:	200000dc 	.word	0x200000dc
 8001490:	200000e8 	.word	0x200000e8
 8001494:	00000000 	.word	0x00000000

08001498 <normalize_angle>:

float  normalize_angle(float angle){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle > M_PI){
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7fe fffc 	bl	80004a0 <__aeabi_f2d>
 80014a8:	a31d      	add	r3, pc, #116	; (adr r3, 8001520 <normalize_angle+0x88>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff fadf 	bl	8000a70 <__aeabi_dcmpgt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <normalize_angle+0x42>
        angle = angle - M_PI*2;
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7fe fff1 	bl	80004a0 <__aeabi_f2d>
 80014be:	a31a      	add	r3, pc, #104	; (adr r3, 8001528 <normalize_angle+0x90>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7fe fe8c 	bl	80001e0 <__aeabi_dsub>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4618      	mov	r0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	f7ff fb16 	bl	8000b00 <__aeabi_d2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	e01a      	b.n	8001510 <normalize_angle+0x78>
    }
	else if (angle < - M_PI){
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7fe ffe0 	bl	80004a0 <__aeabi_f2d>
 80014e0:	a313      	add	r3, pc, #76	; (adr r3, 8001530 <normalize_angle+0x98>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff faa5 	bl	8000a34 <__aeabi_dcmplt>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00f      	beq.n	8001510 <normalize_angle+0x78>
        angle +=M_PI*2 ;
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7fe ffd5 	bl	80004a0 <__aeabi_f2d>
 80014f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001528 <normalize_angle+0x90>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fe72 	bl	80001e4 <__adddf3>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f7ff fafa 	bl	8000b00 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	607b      	str	r3, [r7, #4]
    }

    return angle;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	ee07 3a90 	vmov	s15, r3
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	54442d18 	.word	0x54442d18
 8001524:	400921fb 	.word	0x400921fb
 8001528:	54442d18 	.word	0x54442d18
 800152c:	401921fb 	.word	0x401921fb
 8001530:	54442d18 	.word	0x54442d18
 8001534:	c00921fb 	.word	0xc00921fb

08001538 <pid_brzina>:
    return angle;
}


float pid_brzina (float Kp,float Ki, float Kd,float ref_v,float mes_v)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001542:	edc7 0a04 	vstr	s1, [r7, #16]
 8001546:	ed87 1a03 	vstr	s2, [r7, #12]
 800154a:	edc7 1a02 	vstr	s3, [r7, #8]
 800154e:	ed87 2a01 	vstr	s4, [r7, #4]


	e=  ref_v - mes_v;
 8001552:	ed97 7a02 	vldr	s14, [r7, #8]
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <pid_brzina+0x114>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
	ei += e;
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <pid_brzina+0x118>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <pid_brzina+0x114>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <pid_brzina+0x118>)
 8001576:	edc3 7a00 	vstr	s15, [r3]
	ed = e - e_pre;
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <pid_brzina+0x114>)
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <pid_brzina+0x11c>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <pid_brzina+0x120>)
 800158c:	edc3 7a00 	vstr	s15, [r3]

	 if (ei > EI_MAX)
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <pid_brzina+0x118>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800165c <pid_brzina+0x124>
 800159a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd03      	ble.n	80015ac <pid_brzina+0x74>
	    {
	      ei = EI_MAX;
 80015a4:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <pid_brzina+0x128>)
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <pid_brzina+0x118>)
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e00c      	b.n	80015c6 <pid_brzina+0x8e>
	    }
	  else if (ei < EI_MIN)
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <pid_brzina+0x118>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001664 <pid_brzina+0x12c>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d502      	bpl.n	80015c6 <pid_brzina+0x8e>
	    {
	      ei = EI_MIN;
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <pid_brzina+0x130>)
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <pid_brzina+0x118>)
 80015c4:	601a      	str	r2, [r3, #0]
	    }

	  u = Kp * e + Ki * ei + Kd * ed;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <pid_brzina+0x114>)
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <pid_brzina+0x118>)
 80015d6:	edd3 6a00 	vldr	s13, [r3]
 80015da:	edd7 7a04 	vldr	s15, [r7, #16]
 80015de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <pid_brzina+0x120>)
 80015e8:	edd3 6a00 	vldr	s13, [r3]
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <pid_brzina+0x134>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]

	  //smer
	   if (u > U_MAX)
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <pid_brzina+0x134>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001670 <pid_brzina+0x138>
 8001608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	dd03      	ble.n	800161a <pid_brzina+0xe2>
	   {
	       u = U_MAX;
 8001612:	4a18      	ldr	r2, [pc, #96]	; (8001674 <pid_brzina+0x13c>)
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <pid_brzina+0x134>)
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e00c      	b.n	8001634 <pid_brzina+0xfc>
	   }
	   else if (u < U_MIN)
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <pid_brzina+0x134>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001678 <pid_brzina+0x140>
 8001624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162c:	d502      	bpl.n	8001634 <pid_brzina+0xfc>
	   {
	  	   u = U_MIN;
 800162e:	4a13      	ldr	r2, [pc, #76]	; (800167c <pid_brzina+0x144>)
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <pid_brzina+0x134>)
 8001632:	601a      	str	r2, [r3, #0]
	   }


			 return u;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <pid_brzina+0x134>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	ee07 3a90 	vmov	s15, r3
	   e_pre = e;

}
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200000c4 	.word	0x200000c4
 8001650:	200000c8 	.word	0x200000c8
 8001654:	200000d0 	.word	0x200000d0
 8001658:	200000cc 	.word	0x200000cc
 800165c:	447a0000 	.word	0x447a0000
 8001660:	447a0000 	.word	0x447a0000
 8001664:	c47a0000 	.word	0xc47a0000
 8001668:	c47a0000 	.word	0xc47a0000
 800166c:	200000e4 	.word	0x200000e4
 8001670:	45034000 	.word	0x45034000
 8001674:	45034000 	.word	0x45034000
 8001678:	c5034000 	.word	0xc5034000
 800167c:	c5034000 	.word	0xc5034000

08001680 <racunanje_brzine>:

void racunanje_brzine(float v, float w){
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
 800168a:	edc7 0a00 	vstr	s1, [r7]
	  if (v > v_max){
 800168e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800172c <racunanje_brzine+0xac>
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd02      	ble.n	80016a6 <racunanje_brzine+0x26>
		       v = v_max;
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <racunanje_brzine+0xb0>)
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	e00a      	b.n	80016bc <racunanje_brzine+0x3c>
		   }
	  else if (v < v_min){
 80016a6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001734 <racunanje_brzine+0xb4>
 80016aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d501      	bpl.n	80016bc <racunanje_brzine+0x3c>
		  	   v = v_min;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <racunanje_brzine+0xb8>)
 80016ba:	607b      	str	r3, [r7, #4]
		   }
	  if (w > w_max){
 80016bc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80016c0:	edd7 7a00 	vldr	s15, [r7]
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	dd02      	ble.n	80016d4 <racunanje_brzine+0x54>
		       w = w_max;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <racunanje_brzine+0xbc>)
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	e00a      	b.n	80016ea <racunanje_brzine+0x6a>
		   }
	  else if (w < w_min){
 80016d4:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80016d8:	edd7 7a00 	vldr	s15, [r7]
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d501      	bpl.n	80016ea <racunanje_brzine+0x6a>
		  	   w = w_min;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <racunanje_brzine+0xc0>)
 80016e8:	603b      	str	r3, [r7, #0]
		   }

	  vel_d= v + w*(razmak_tockova/2);
 80016ea:	edd7 7a00 	vldr	s15, [r7]
 80016ee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001744 <racunanje_brzine+0xc4>
 80016f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <racunanje_brzine+0xc8>)
 8001700:	edc3 7a00 	vstr	s15, [r3]
	  vel_l= v - w*(razmak_tockova/2);}
 8001704:	edd7 7a00 	vldr	s15, [r7]
 8001708:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001744 <racunanje_brzine+0xc4>
 800170c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001710:	ed97 7a01 	vldr	s14, [r7, #4]
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <racunanje_brzine+0xcc>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	45034000 	.word	0x45034000
 8001730:	45034000 	.word	0x45034000
 8001734:	c5034000 	.word	0xc5034000
 8001738:	c5034000 	.word	0xc5034000
 800173c:	40c00000 	.word	0x40c00000
 8001740:	c0c00000 	.word	0xc0c00000
 8001744:	43160000 	.word	0x43160000
 8001748:	200001a4 	.word	0x200001a4
 800174c:	2000019c 	.word	0x2000019c

08001750 <regulacija_pozicije>:
	 motor2_set_PWM(vel_l1);*/




void regulacija_pozicije(float x_ref, float y_ref, float theta_ref, float x, float y, float theta){
 8001750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	ed87 0a05 	vstr	s0, [r7, #20]
 800175c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001760:	ed87 1a03 	vstr	s2, [r7, #12]
 8001764:	edc7 1a02 	vstr	s3, [r7, #8]
 8001768:	ed87 2a01 	vstr	s4, [r7, #4]
 800176c:	edc7 2a00 	vstr	s5, [r7]
//dodati mozda i regulator zbog prepucavanja ugla pri brzoj rotaciji

		v_pid=0;
 8001770:	4ba9      	ldr	r3, [pc, #676]	; (8001a18 <regulacija_pozicije+0x2c8>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
		w_pid=0;
 8001778:	4ba8      	ldr	r3, [pc, #672]	; (8001a1c <regulacija_pozicije+0x2cc>)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
		theta=theta+(M_PI*or);
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7fe fe8d 	bl	80004a0 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4ba5      	ldr	r3, [pc, #660]	; (8001a20 <regulacija_pozicije+0x2d0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fe74 	bl	800047c <__aeabi_i2d>
 8001794:	a39c      	add	r3, pc, #624	; (adr r3, 8001a08 <regulacija_pozicije+0x2b8>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fed9 	bl	8000550 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fd1d 	bl	80001e4 <__adddf3>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	f7ff f9a5 	bl	8000b00 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	603b      	str	r3, [r7, #0]
		dist =smer* sqrt(pow((x_ref-x),2)+pow((y_ref-y),2));
 80017ba:	4b9a      	ldr	r3, [pc, #616]	; (8001a24 <regulacija_pozicije+0x2d4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe5c 	bl	800047c <__aeabi_i2d>
 80017c4:	4604      	mov	r4, r0
 80017c6:	460d      	mov	r5, r1
 80017c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80017cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	ee17 0a90 	vmov	r0, s15
 80017d8:	f7fe fe62 	bl	80004a0 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8001a10 <regulacija_pozicije+0x2c0>
 80017e4:	ec43 2b10 	vmov	d0, r2, r3
 80017e8:	f002 fd14 	bl	8004214 <pow>
 80017ec:	ec59 8b10 	vmov	r8, r9, d0
 80017f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80017f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	ee17 0a90 	vmov	r0, s15
 8001800:	f7fe fe4e 	bl	80004a0 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8001a10 <regulacija_pozicije+0x2c0>
 800180c:	ec43 2b10 	vmov	d0, r2, r3
 8001810:	f002 fd00 	bl	8004214 <pow>
 8001814:	ec53 2b10 	vmov	r2, r3, d0
 8001818:	4640      	mov	r0, r8
 800181a:	4649      	mov	r1, r9
 800181c:	f7fe fce2 	bl	80001e4 <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	ec43 2b17 	vmov	d7, r2, r3
 8001828:	eeb0 0a47 	vmov.f32	s0, s14
 800182c:	eef0 0a67 	vmov.f32	s1, s15
 8001830:	f002 fe60 	bl	80044f4 <sqrt>
 8001834:	ec53 2b10 	vmov	r2, r3, d0
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fe88 	bl	8000550 <__aeabi_dmul>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	f7ff f95a 	bl	8000b00 <__aeabi_d2f>
 800184c:	4602      	mov	r2, r0
 800184e:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <regulacija_pozicije+0x2d8>)
 8001850:	601a      	str	r2, [r3, #0]
		//distx = sqrt(pow(x_ref-x,2));
		//disty = sqrt(pow(y_ref-y,2));<
		phi = atan2(y_ref - y, x_ref - x);
 8001852:	ed97 7a04 	vldr	s14, [r7, #16]
 8001856:	edd7 7a01 	vldr	s15, [r7, #4]
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	ee17 0a90 	vmov	r0, s15
 8001862:	f7fe fe1d 	bl	80004a0 <__aeabi_f2d>
 8001866:	4604      	mov	r4, r0
 8001868:	460d      	mov	r5, r1
 800186a:	ed97 7a05 	vldr	s14, [r7, #20]
 800186e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001876:	ee17 0a90 	vmov	r0, s15
 800187a:	f7fe fe11 	bl	80004a0 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ec43 2b11 	vmov	d1, r2, r3
 8001886:	ec45 4b10 	vmov	d0, r4, r5
 800188a:	f002 fcc1 	bl	8004210 <atan2>
 800188e:	ec54 3b10 	vmov	r3, r4, d0
 8001892:	4618      	mov	r0, r3
 8001894:	4621      	mov	r1, r4
 8001896:	f7ff f933 	bl	8000b00 <__aeabi_d2f>
 800189a:	4602      	mov	r2, r0
 800189c:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <regulacija_pozicije+0x2dc>)
 800189e:	601a      	str	r2, [r3, #0]
		phi_error = normalize_angle(phi - theta ); //promjeni ovo
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <regulacija_pozicije+0x2dc>)
 80018a2:	ed93 7a00 	vldr	s14, [r3]
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f7ff fdf1 	bl	8001498 <normalize_angle>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <regulacija_pozicije+0x2e0>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]
		phi_prim_error = normalize_angle(  theta_ref - theta );
 80018c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c4:	edd7 7a00 	vldr	s15, [r7]
 80018c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	f7ff fde2 	bl	8001498 <normalize_angle>
 80018d4:	eef0 7a40 	vmov.f32	s15, s0
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <regulacija_pozicije+0x2e4>)
 80018da:	edc3 7a00 	vstr	s15, [r3]

	eps_dist = 6;
 80018de:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <regulacija_pozicije+0x2e8>)
 80018e0:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <regulacija_pozicije+0x2ec>)
 80018e2:	601a      	str	r2, [r3, #0]
	eps_theta = (4*M_PI)/180;
 80018e4:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <regulacija_pozicije+0x2f0>)
 80018e6:	4a57      	ldr	r2, [pc, #348]	; (8001a44 <regulacija_pozicije+0x2f4>)
 80018e8:	601a      	str	r2, [r3, #0]


	Kp_w =9; //6 bilo 3.5 bilo
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <regulacija_pozicije+0x2f8>)
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <regulacija_pozicije+0x2fc>)
 80018ee:	601a      	str	r2, [r3, #0]
	Kp_d = 2.8;
 80018f0:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <regulacija_pozicije+0x300>)
 80018f2:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <regulacija_pozicije+0x304>)
 80018f4:	601a      	str	r2, [r3, #0]
		brojac++;
	}
	else
		dist=fabs(dist);
*/
	greska=(phi_prim_error*180/M_PI);
 80018f6:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <regulacija_pozicije+0x2e4>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a58 <regulacija_pozicije+0x308>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdca 	bl	80004a0 <__aeabi_f2d>
 800190c:	a33e      	add	r3, pc, #248	; (adr r3, 8001a08 <regulacija_pozicije+0x2b8>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe ff47 	bl	80007a4 <__aeabi_ddiv>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f7ff f8ef 	bl	8000b00 <__aeabi_d2f>
 8001922:	4602      	mov	r2, r0
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <regulacija_pozicije+0x30c>)
 8001926:	601a      	str	r2, [r3, #0]

	if(faza == 0){
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <regulacija_pozicije+0x310>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 80a3 	bne.w	8001a78 <regulacija_pozicije+0x328>
test1=1;
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <regulacija_pozicije+0x314>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
		v_pid=0;
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <regulacija_pozicije+0x2c8>)
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <regulacija_pozicije+0x318>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d802      	bhi.n	800195a <regulacija_pozicije+0x20a>
			Kp_w=14;
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <regulacija_pozicije+0x2f8>)
 8001956:	4a45      	ldr	r2, [pc, #276]	; (8001a6c <regulacija_pozicije+0x31c>)
 8001958:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_error;
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <regulacija_pozicije+0x2f8>)
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <regulacija_pozicije+0x2e0>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <regulacija_pozicije+0x2cc>)
 800196c:	edc3 7a00 	vstr	s15, [r3]

		greska1=(phi_error*180/M_PI);
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <regulacija_pozicije+0x2e0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001a58 <regulacija_pozicije+0x308>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fd8d 	bl	80004a0 <__aeabi_f2d>
 8001986:	a320      	add	r3, pc, #128	; (adr r3, 8001a08 <regulacija_pozicije+0x2b8>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe ff0a 	bl	80007a4 <__aeabi_ddiv>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f7ff f8b2 	bl	8000b00 <__aeabi_d2f>
 800199c:	4602      	mov	r2, r0
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <regulacija_pozicije+0x320>)
 80019a0:	601a      	str	r2, [r3, #0]
		uslov = get_w ();
 80019a2:	f7ff fd0f 	bl	80013c4 <get_w>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <regulacija_pozicije+0x324>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]
		//if((fabs(phi_prim_error) <= eps_theta))
		//	faza=1;
		if((fabs(phi_error) <= eps_theta) & (fabs(uslov) <= 1)){
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <regulacija_pozicije+0x2e0>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eeb0 7ae7 	vabs.f32	s14, s15
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <regulacija_pozicije+0x2f0>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	bf94      	ite	ls
 80019ca:	2301      	movls	r3, #1
 80019cc:	2300      	movhi	r3, #0
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <regulacija_pozicije+0x324>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eef0 7ae7 	vabs.f32	s15, s15
 80019da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	bf94      	ite	ls
 80019e8:	2301      	movls	r3, #1
 80019ea:	2300      	movhi	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4013      	ands	r3, r2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 810f 	beq.w	8001c16 <regulacija_pozicije+0x4c6>
			//0.001 greska bila
			faza=1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <regulacija_pozicije+0x310>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
			test1=2;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <regulacija_pozicije+0x314>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e107      	b.n	8001c16 <regulacija_pozicije+0x4c6>
 8001a06:	bf00      	nop
 8001a08:	54442d18 	.word	0x54442d18
 8001a0c:	400921fb 	.word	0x400921fb
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40000000 	.word	0x40000000
 8001a18:	200000fc 	.word	0x200000fc
 8001a1c:	20000100 	.word	0x20000100
 8001a20:	200000e0 	.word	0x200000e0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000104 	.word	0x20000104
 8001a2c:	20000108 	.word	0x20000108
 8001a30:	2000010c 	.word	0x2000010c
 8001a34:	20000110 	.word	0x20000110
 8001a38:	20000114 	.word	0x20000114
 8001a3c:	40c00000 	.word	0x40c00000
 8001a40:	20000118 	.word	0x20000118
 8001a44:	3d8efa35 	.word	0x3d8efa35
 8001a48:	2000011c 	.word	0x2000011c
 8001a4c:	41100000 	.word	0x41100000
 8001a50:	20000120 	.word	0x20000120
 8001a54:	40333333 	.word	0x40333333
 8001a58:	43340000 	.word	0x43340000
 8001a5c:	200000d4 	.word	0x200000d4
 8001a60:	200000f0 	.word	0x200000f0
 8001a64:	200000ec 	.word	0x200000ec
 8001a68:	200001b0 	.word	0x200001b0
 8001a6c:	41600000 	.word	0x41600000
 8001a70:	200000d8 	.word	0x200000d8
 8001a74:	20000124 	.word	0x20000124

		}
	}
	else if (faza ==1){
 8001a78:	4bab      	ldr	r3, [pc, #684]	; (8001d28 <regulacija_pozicije+0x5d8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d17d      	bne.n	8001b7c <regulacija_pozicije+0x42c>
	if(v_cr > 400){
 8001a80:	4baa      	ldr	r3, [pc, #680]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001d30 <regulacija_pozicije+0x5e0>
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd02      	ble.n	8001a9a <regulacija_pozicije+0x34a>
			Kp_d=2.3;
 8001a94:	4ba7      	ldr	r3, [pc, #668]	; (8001d34 <regulacija_pozicije+0x5e4>)
 8001a96:	4aa8      	ldr	r2, [pc, #672]	; (8001d38 <regulacija_pozicije+0x5e8>)
 8001a98:	601a      	str	r2, [r3, #0]
		}
	if(v_cr > 800){
 8001a9a:	4ba4      	ldr	r3, [pc, #656]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001d3c <regulacija_pozicije+0x5ec>
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	dd02      	ble.n	8001ab4 <regulacija_pozicije+0x364>
				Kp_d=1.7;
 8001aae:	4ba1      	ldr	r3, [pc, #644]	; (8001d34 <regulacija_pozicije+0x5e4>)
 8001ab0:	4aa3      	ldr	r2, [pc, #652]	; (8001d40 <regulacija_pozicije+0x5f0>)
 8001ab2:	601a      	str	r2, [r3, #0]
			}
	if(v_cr > 1190){
 8001ab4:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001d44 <regulacija_pozicije+0x5f4>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd02      	ble.n	8001ace <regulacija_pozicije+0x37e>
					Kp_d=1.69;
 8001ac8:	4b9a      	ldr	r3, [pc, #616]	; (8001d34 <regulacija_pozicije+0x5e4>)
 8001aca:	4a9f      	ldr	r2, [pc, #636]	; (8001d48 <regulacija_pozicije+0x5f8>)
 8001acc:	601a      	str	r2, [r3, #0]
				}
		w_pid = Kp_w * phi_error;
 8001ace:	4b9f      	ldr	r3, [pc, #636]	; (8001d4c <regulacija_pozicije+0x5fc>)
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <regulacija_pozicije+0x600>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ade:	4b9d      	ldr	r3, [pc, #628]	; (8001d54 <regulacija_pozicije+0x604>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		v_pid = Kp_d * dist;
 8001ae4:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <regulacija_pozicije+0x5e4>)
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	4b9b      	ldr	r3, [pc, #620]	; (8001d58 <regulacija_pozicije+0x608>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	4b99      	ldr	r3, [pc, #612]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001af6:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		*/


		greska1=(phi_error*180/M_PI);
 8001afa:	4b95      	ldr	r3, [pc, #596]	; (8001d50 <regulacija_pozicije+0x600>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001d60 <regulacija_pozicije+0x610>
 8001b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fcc8 	bl	80004a0 <__aeabi_f2d>
 8001b10:	a383      	add	r3, pc, #524	; (adr r3, 8001d20 <regulacija_pozicije+0x5d0>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fe45 	bl	80007a4 <__aeabi_ddiv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7fe ffed 	bl	8000b00 <__aeabi_d2f>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <regulacija_pozicije+0x614>)
 8001b2a:	601a      	str	r2, [r3, #0]
		if ((fabs(dist) <= eps_dist) & (fabs(get_v()) <= 10))
 8001b2c:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <regulacija_pozicije+0x608>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b36:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <regulacija_pozicije+0x618>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b44:	bf94      	ite	ls
 8001b46:	2301      	movls	r3, #1
 8001b48:	2300      	movhi	r3, #0
 8001b4a:	b2dc      	uxtb	r4, r3
 8001b4c:	f7ff fc48 	bl	80013e0 <get_v>
 8001b50:	eef0 7a40 	vmov.f32	s15, s0
 8001b54:	eef0 7ae7 	vabs.f32	s15, s15
 8001b58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	bf94      	ite	ls
 8001b66:	2301      	movls	r3, #1
 8001b68:	2300      	movhi	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4023      	ands	r3, r4
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d050      	beq.n	8001c16 <regulacija_pozicije+0x4c6>
			faza =2;
 8001b74:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <regulacija_pozicije+0x5d8>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e04c      	b.n	8001c16 <regulacija_pozicije+0x4c6>
			//faza= 2;
		//else if( (fabs(disty) <= eps_disty) & (fabs(get_v()) <= 10))
				//	faza= 2;

	}
	else if (faza ==2){
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <regulacija_pozicije+0x5d8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d148      	bne.n	8001c16 <regulacija_pozicije+0x4c6>
		v_pid=0;
 8001b84:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <regulacija_pozicije+0x61c>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	d802      	bhi.n	8001ba6 <regulacija_pozicije+0x456>
					Kp_w=11;
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <regulacija_pozicije+0x5fc>)
 8001ba2:	4a73      	ldr	r2, [pc, #460]	; (8001d70 <regulacija_pozicije+0x620>)
 8001ba4:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_prim_error;
 8001ba6:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <regulacija_pozicije+0x5fc>)
 8001ba8:	ed93 7a00 	vldr	s14, [r3]
 8001bac:	4b71      	ldr	r3, [pc, #452]	; (8001d74 <regulacija_pozicije+0x624>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <regulacija_pozicije+0x604>)
 8001bb8:	edc3 7a00 	vstr	s15, [r3]


		uslov = get_w ();
 8001bbc:	f7ff fc02 	bl	80013c4 <get_w>
 8001bc0:	eef0 7a40 	vmov.f32	s15, s0
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <regulacija_pozicije+0x628>)
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
		if((fabs(phi_prim_error) <= eps_theta) & (fabs(uslov) <= 1)){
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <regulacija_pozicije+0x624>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bd4:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <regulacija_pozicije+0x62c>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <regulacija_pozicije+0x628>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eef0 7ae7 	vabs.f32	s15, s15
 8001bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	bf94      	ite	ls
 8001c02:	2301      	movls	r3, #1
 8001c04:	2300      	movhi	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <regulacija_pozicije+0x4c6>
			faza=3;
 8001c10:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <regulacija_pozicije+0x5d8>)
 8001c12:	2203      	movs	r2, #3
 8001c14:	601a      	str	r2, [r3, #0]
		}
	}



	if( (v_pid < v_cr) & (v_pid > -v_cr))
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2a:	bf4c      	ite	mi
 8001c2c:	2301      	movmi	r3, #1
 8001c2e:	2300      	movpl	r3, #0
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	eeb1 7a67 	vneg.f32	s14, s15
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	bf4c      	ite	mi
 8001c4c:	2301      	movmi	r3, #1
 8001c4e:	2300      	movpl	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4013      	ands	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <regulacija_pozicije+0x514>
		v = v_pid;
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <regulacija_pozicije+0x630>)
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e024      	b.n	8001cae <regulacija_pozicije+0x55e>
	else if (v_pid>v_cr)
 8001c64:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	dd04      	ble.n	8001c84 <regulacija_pozicije+0x534>
		v=v_cr;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <regulacija_pozicije+0x630>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e014      	b.n	8001cae <regulacija_pozicije+0x55e>
	else if(v_pid<-v_cr)
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eeb1 7a67 	vneg.f32	s14, s15
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <regulacija_pozicije+0x60c>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	dd07      	ble.n	8001cae <regulacija_pozicije+0x55e>
		v = -v_cr;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <regulacija_pozicije+0x5dc>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eef1 7a67 	vneg.f32	s15, s15
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <regulacija_pozicije+0x630>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]



	if( (w_pid < w_cr) & (w_pid > -w_cr))
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <regulacija_pozicije+0x604>)
 8001cb0:	ed93 7a00 	vldr	s14, [r3]
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <regulacija_pozicije+0x61c>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	bf4c      	ite	mi
 8001cc4:	2301      	movmi	r3, #1
 8001cc6:	2300      	movpl	r3, #0
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <regulacija_pozicije+0x61c>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb1 7a67 	vneg.f32	s14, s15
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <regulacija_pozicije+0x604>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	bf4c      	ite	mi
 8001ce4:	2301      	movmi	r3, #1
 8001ce6:	2300      	movpl	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4013      	ands	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <regulacija_pozicije+0x5ac>
		w = w_pid;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <regulacija_pozicije+0x604>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <regulacija_pozicije+0x634>)
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e05a      	b.n	8001db2 <regulacija_pozicije+0x662>
	else if (w_pid>w_cr)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <regulacija_pozicije+0x604>)
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <regulacija_pozicije+0x61c>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	dd3a      	ble.n	8001d88 <regulacija_pozicije+0x638>
		w=w_cr;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <regulacija_pozicije+0x61c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <regulacija_pozicije+0x634>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e04a      	b.n	8001db2 <regulacija_pozicije+0x662>
 8001d1c:	f3af 8000 	nop.w
 8001d20:	54442d18 	.word	0x54442d18
 8001d24:	400921fb 	.word	0x400921fb
 8001d28:	200000f0 	.word	0x200000f0
 8001d2c:	200001b8 	.word	0x200001b8
 8001d30:	43c80000 	.word	0x43c80000
 8001d34:	20000120 	.word	0x20000120
 8001d38:	40133333 	.word	0x40133333
 8001d3c:	44480000 	.word	0x44480000
 8001d40:	3fd9999a 	.word	0x3fd9999a
 8001d44:	4494c000 	.word	0x4494c000
 8001d48:	3fd851ec 	.word	0x3fd851ec
 8001d4c:	2000011c 	.word	0x2000011c
 8001d50:	2000010c 	.word	0x2000010c
 8001d54:	20000100 	.word	0x20000100
 8001d58:	20000104 	.word	0x20000104
 8001d5c:	200000fc 	.word	0x200000fc
 8001d60:	43340000 	.word	0x43340000
 8001d64:	200000d8 	.word	0x200000d8
 8001d68:	20000114 	.word	0x20000114
 8001d6c:	200001b0 	.word	0x200001b0
 8001d70:	41300000 	.word	0x41300000
 8001d74:	20000110 	.word	0x20000110
 8001d78:	20000124 	.word	0x20000124
 8001d7c:	20000118 	.word	0x20000118
 8001d80:	200000f8 	.word	0x200000f8
 8001d84:	200000f4 	.word	0x200000f4
	else if(w_pid<-w_cr)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <regulacija_pozicije+0x684>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eeb1 7a67 	vneg.f32	s14, s15
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <regulacija_pozicije+0x688>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd07      	ble.n	8001db2 <regulacija_pozicije+0x662>
		w = -w_cr;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <regulacija_pozicije+0x684>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	eef1 7a67 	vneg.f32	s15, s15
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <regulacija_pozicije+0x68c>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]

	racunanje_brzine(v,w);
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <regulacija_pozicije+0x690>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <regulacija_pozicije+0x68c>)
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	eef0 0a47 	vmov.f32	s1, s14
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	f7ff fc5b 	bl	8001680 <racunanje_brzine>

}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dd4:	200001b0 	.word	0x200001b0
 8001dd8:	20000100 	.word	0x20000100
 8001ddc:	200000f4 	.word	0x200000f4
 8001de0:	200000f8 	.word	0x200000f8
 8001de4:	00000000 	.word	0x00000000

08001de8 <regulacija_brzine>:



void regulacija_brzine(){
 8001de8:	b598      	push	{r3, r4, r7, lr}
 8001dea:	af00      	add	r7, sp, #0


//saturacija trazene
	 if (vel_d > vel_max){
 8001dec:	4b82      	ldr	r3, [pc, #520]	; (8001ff8 <regulacija_brzine+0x210>)
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001ffc <regulacija_brzine+0x214>
 8001df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	dd03      	ble.n	8001e08 <regulacija_brzine+0x20>
		 vel_d = vel_max;
 8001e00:	4a7f      	ldr	r2, [pc, #508]	; (8002000 <regulacija_brzine+0x218>)
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <regulacija_brzine+0x210>)
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e00c      	b.n	8001e22 <regulacija_brzine+0x3a>
	 }
     else if (vel_d < vel_min){
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <regulacija_brzine+0x210>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002004 <regulacija_brzine+0x21c>
 8001e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	d502      	bpl.n	8001e22 <regulacija_brzine+0x3a>
    	 vel_d = vel_min;
 8001e1c:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <regulacija_brzine+0x220>)
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <regulacija_brzine+0x210>)
 8001e20:	601a      	str	r2, [r3, #0]
     }

	 if (vel_l > vel_max){
 8001e22:	4b7a      	ldr	r3, [pc, #488]	; (800200c <regulacija_brzine+0x224>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001ffc <regulacija_brzine+0x214>
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	dd03      	ble.n	8001e3e <regulacija_brzine+0x56>
			 vel_l = vel_max;
 8001e36:	4a72      	ldr	r2, [pc, #456]	; (8002000 <regulacija_brzine+0x218>)
 8001e38:	4b74      	ldr	r3, [pc, #464]	; (800200c <regulacija_brzine+0x224>)
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e00c      	b.n	8001e58 <regulacija_brzine+0x70>
		 }
	 else if (vel_l < vel_min){
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <regulacija_brzine+0x224>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002004 <regulacija_brzine+0x21c>
 8001e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	d502      	bpl.n	8001e58 <regulacija_brzine+0x70>
	    	 vel_l = vel_min;
 8001e52:	4a6d      	ldr	r2, [pc, #436]	; (8002008 <regulacija_brzine+0x220>)
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <regulacija_brzine+0x224>)
 8001e56:	601a      	str	r2, [r3, #0]
	     }

// ubrzanje
	//

	 if(v_dref < vel_d)
 8001e58:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <regulacija_brzine+0x228>)
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <regulacija_brzine+0x210>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	d513      	bpl.n	8001e96 <regulacija_brzine+0xae>
		 v_dref +=0.7;
 8001e6e:	4b68      	ldr	r3, [pc, #416]	; (8002010 <regulacija_brzine+0x228>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb14 	bl	80004a0 <__aeabi_f2d>
 8001e78:	a35d      	add	r3, pc, #372	; (adr r3, 8001ff0 <regulacija_brzine+0x208>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe f9b1 	bl	80001e4 <__adddf3>
 8001e82:	4603      	mov	r3, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	4618      	mov	r0, r3
 8001e88:	4621      	mov	r1, r4
 8001e8a:	f7fe fe39 	bl	8000b00 <__aeabi_d2f>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <regulacija_brzine+0x228>)
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e022      	b.n	8001edc <regulacija_brzine+0xf4>
	 else if(v_dref > vel_d)
 8001e96:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <regulacija_brzine+0x228>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <regulacija_brzine+0x210>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	dd13      	ble.n	8001ed4 <regulacija_brzine+0xec>
		//v_dref = vel_d - 0.6;
		 v_dref -= 0.7;
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <regulacija_brzine+0x228>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe faf5 	bl	80004a0 <__aeabi_f2d>
 8001eb6:	a34e      	add	r3, pc, #312	; (adr r3, 8001ff0 <regulacija_brzine+0x208>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe f990 	bl	80001e0 <__aeabi_dsub>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	f7fe fe1a 	bl	8000b00 <__aeabi_d2f>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <regulacija_brzine+0x228>)
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e003      	b.n	8001edc <regulacija_brzine+0xf4>
	else
		 v_dref=vel_d;
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <regulacija_brzine+0x210>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <regulacija_brzine+0x228>)
 8001eda:	6013      	str	r3, [r2, #0]

	 if(v_lref < vel_l)
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <regulacija_brzine+0x22c>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <regulacija_brzine+0x224>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	d513      	bpl.n	8001f1a <regulacija_brzine+0x132>
		v_lref += 0.7;
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <regulacija_brzine+0x22c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fad2 	bl	80004a0 <__aeabi_f2d>
 8001efc:	a33c      	add	r3, pc, #240	; (adr r3, 8001ff0 <regulacija_brzine+0x208>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe f96f 	bl	80001e4 <__adddf3>
 8001f06:	4603      	mov	r3, r0
 8001f08:	460c      	mov	r4, r1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	f7fe fdf7 	bl	8000b00 <__aeabi_d2f>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <regulacija_brzine+0x22c>)
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e022      	b.n	8001f60 <regulacija_brzine+0x178>
	 else if(v_lref > vel_l)
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <regulacija_brzine+0x22c>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <regulacija_brzine+0x224>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	dd13      	ble.n	8001f58 <regulacija_brzine+0x170>
		// v_lref=vel_l - 0.6;
		 v_lref -= 0.7;
 8001f30:	4b38      	ldr	r3, [pc, #224]	; (8002014 <regulacija_brzine+0x22c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fab3 	bl	80004a0 <__aeabi_f2d>
 8001f3a:	a32d      	add	r3, pc, #180	; (adr r3, 8001ff0 <regulacija_brzine+0x208>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe f94e 	bl	80001e0 <__aeabi_dsub>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fdd8 	bl	8000b00 <__aeabi_d2f>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <regulacija_brzine+0x22c>)
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e003      	b.n	8001f60 <regulacija_brzine+0x178>
	 else
		 v_lref=vel_l;
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <regulacija_brzine+0x224>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <regulacija_brzine+0x22c>)
 8001f5e:	6013      	str	r3, [r2, #0]




	 u_l=pid_brzina(4, 0.105, 0, v_lref, v_l); //kp 4.3 bilo
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <regulacija_brzine+0x22c>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <regulacija_brzine+0x230>)
 8001f68:	ed93 7a00 	vldr	s14, [r3]
 8001f6c:	eeb0 2a47 	vmov.f32	s4, s14
 8001f70:	eef0 1a67 	vmov.f32	s3, s15
 8001f74:	ed9f 1a29 	vldr	s2, [pc, #164]	; 800201c <regulacija_brzine+0x234>
 8001f78:	eddf 0a29 	vldr	s1, [pc, #164]	; 8002020 <regulacija_brzine+0x238>
 8001f7c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001f80:	f7ff fada 	bl	8001538 <pid_brzina>
 8001f84:	eef0 7a40 	vmov.f32	s15, s0
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <regulacija_brzine+0x23c>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
	 u_d=pid_brzina(4, 0.105, 0, v_dref, v_r);
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <regulacija_brzine+0x228>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <regulacija_brzine+0x240>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	eeb0 2a47 	vmov.f32	s4, s14
 8001f9e:	eef0 1a67 	vmov.f32	s3, s15
 8001fa2:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800201c <regulacija_brzine+0x234>
 8001fa6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002020 <regulacija_brzine+0x238>
 8001faa:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001fae:	f7ff fac3 	bl	8001538 <pid_brzina>
 8001fb2:	eef0 7a40 	vmov.f32	s15, s0
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <regulacija_brzine+0x244>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]

	 motor1_set_PWM((int16_t)u_d); //probaj ovde da dodas mnozenje sa -or ili tako nes
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <regulacija_brzine+0x244>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f8f7 	bl	80021c0 <motor1_set_PWM>
	 motor2_set_PWM((int16_t)u_l);
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <regulacija_brzine+0x23c>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f932 	bl	800224c <motor2_set_PWM>
}
 8001fe8:	bf00      	nop
 8001fea:	bd98      	pop	{r3, r4, r7, pc}
 8001fec:	f3af 8000 	nop.w
 8001ff0:	66666666 	.word	0x66666666
 8001ff4:	3fe66666 	.word	0x3fe66666
 8001ff8:	200001a4 	.word	0x200001a4
 8001ffc:	45034000 	.word	0x45034000
 8002000:	45034000 	.word	0x45034000
 8002004:	c5034000 	.word	0xc5034000
 8002008:	c5034000 	.word	0xc5034000
 800200c:	2000019c 	.word	0x2000019c
 8002010:	200001b4 	.word	0x200001b4
 8002014:	200001ac 	.word	0x200001ac
 8002018:	200001a0 	.word	0x200001a0
 800201c:	00000000 	.word	0x00000000
 8002020:	3dd70a3d 	.word	0x3dd70a3d
 8002024:	2000012c 	.word	0x2000012c
 8002028:	200001a8 	.word	0x200001a8
 800202c:	20000128 	.word	0x20000128

08002030 <init_PWM>:

static uint32_t jedan;
static uint32_t dva;

void init_PWM()
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

	//M1_PWM -> PC7 ( TIM3_CH2), AF2
	//M2_PWM -> PB6 ( TIM4_CH1), AF2
	RCC->AHB1ENR |= (1 << 1);
 8002034:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <init_PWM+0x17c>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a5c      	ldr	r2, [pc, #368]	; (80021ac <init_PWM+0x17c>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 2);
 8002040:	4b5a      	ldr	r3, [pc, #360]	; (80021ac <init_PWM+0x17c>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a59      	ldr	r2, [pc, #356]	; (80021ac <init_PWM+0x17c>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~(0b11 << 6*2);   // PB6
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <init_PWM+0x180>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <init_PWM+0x180>)
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 6*2);
 8002058:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <init_PWM+0x180>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a54      	ldr	r2, [pc, #336]	; (80021b0 <init_PWM+0x180>)
 800205e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002062:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0b1111 << 6 * 4);
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <init_PWM+0x180>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <init_PWM+0x180>)
 800206a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800206e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 6*4);
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <init_PWM+0x180>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <init_PWM+0x180>)
 8002076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207a:	6213      	str	r3, [r2, #32]

	GPIOC->MODER &= ~(0b11 << 7*2);   //PC7
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <init_PWM+0x184>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <init_PWM+0x184>)
 8002082:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002086:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b10 << 7*2);
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <init_PWM+0x184>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a49      	ldr	r2, [pc, #292]	; (80021b4 <init_PWM+0x184>)
 800208e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002092:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[0] &= ~(0b1111 << 7 * 4);
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <init_PWM+0x184>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <init_PWM+0x184>)
 800209a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800209e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 7*4);
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <init_PWM+0x184>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <init_PWM+0x184>)
 80020a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020aa:	6213      	str	r3, [r2, #32]

	//TIM3

	RCC->APB1ENR |= (1 << 1);
 80020ac:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <init_PWM+0x17c>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <init_PWM+0x17c>)
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
		                    // 84MHZ
	TIM3->PSC = 1-1; //84MHZ
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <init_PWM+0x188>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 2100-1; // 20KHZ
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <init_PWM+0x188>)
 80020c0:	f640 0233 	movw	r2, #2099	; 0x833
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = 0.0;
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <init_PWM+0x188>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM3->CCMR1 &= ~(0b111 << 12);
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <init_PWM+0x188>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a39      	ldr	r2, [pc, #228]	; (80021b8 <init_PWM+0x188>)
 80020d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d6:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (0b110 << 12);
 80020d8:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <init_PWM+0x188>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <init_PWM+0x188>)
 80020de:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80020e2:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (1 << 11);
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <init_PWM+0x188>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a33      	ldr	r2, [pc, #204]	; (80021b8 <init_PWM+0x188>)
 80020ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ee:	6193      	str	r3, [r2, #24]

	TIM3->CCR2 = 0UL; // NE ZZNAM STA JE
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <init_PWM+0x188>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->EGR |= (1 << 0);
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <init_PWM+0x188>)
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <init_PWM+0x188>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6153      	str	r3, [r2, #20]
	TIM3->CCER |=(1 << 4);
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <init_PWM+0x188>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <init_PWM+0x188>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= (1 << 7);
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <init_PWM+0x188>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <init_PWM+0x188>)
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0b1 << 0);
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <init_PWM+0x188>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <init_PWM+0x188>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6013      	str	r3, [r2, #0]

	// TIM4

	RCC->APB1ENR |= (1 << 2);
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <init_PWM+0x17c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a20      	ldr	r2, [pc, #128]	; (80021ac <init_PWM+0x17c>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
			                    // 84MHZ
	TIM4->PSC = 1-1; //84MHZ
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <init_PWM+0x18c>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 2100-1; // 20KHZ
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <init_PWM+0x18c>)
 800213a:	f640 0233 	movw	r2, #2099	; 0x833
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR1 = 0.0;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <init_PWM+0x18c>)
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM4->CCMR1 &= ~(0b111 << 4);
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <init_PWM+0x18c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <init_PWM+0x18c>)
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002150:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0b110 << 4);
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <init_PWM+0x18c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <init_PWM+0x18c>)
 8002158:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800215c:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1 << 3);
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <init_PWM+0x18c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <init_PWM+0x18c>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6193      	str	r3, [r2, #24]

	TIM4->CCR1 = 0UL; // NE ZZNAM STA JE
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <init_PWM+0x18c>)
 800216c:	2200      	movs	r2, #0
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->EGR |= (1 << 0);
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <init_PWM+0x18c>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <init_PWM+0x18c>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6153      	str	r3, [r2, #20]
	TIM4->CCER |=(1 << 0);
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <init_PWM+0x18c>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <init_PWM+0x18c>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= (1 << 7);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <init_PWM+0x18c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <init_PWM+0x18c>)
 800218e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002192:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= (0b1 << 0);
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <init_PWM+0x18c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a08      	ldr	r2, [pc, #32]	; (80021bc <init_PWM+0x18c>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6013      	str	r3, [r2, #0]

}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40000800 	.word	0x40000800

080021c0 <motor1_set_PWM>:


// TODO UINXT promeniti tip duc
void motor1_set_PWM(int16_t duc)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
	 if(duc<0) {
 80021ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da06      	bge.n	80021e0 <motor1_set_PWM+0x20>
			// GPIOA->MODER &=  ~(0b01 << 8 * 2);
		 GPIOA->ODR &= ~(0b01 << 8);
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <motor1_set_PWM+0x80>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <motor1_set_PWM+0x80>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	6153      	str	r3, [r2, #20]
 80021de:	e009      	b.n	80021f4 <motor1_set_PWM+0x34>
		}
	 else if(duc>=0){
 80021e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db05      	blt.n	80021f4 <motor1_set_PWM+0x34>
		 GPIOA->ODR |= (0b01 << 8);
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <motor1_set_PWM+0x80>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <motor1_set_PWM+0x80>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6153      	str	r3, [r2, #20]
	 }
	 duc = fabs(duc);
 80021f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f93f 	bl	800047c <__aeabi_i2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4614      	mov	r4, r2
 8002204:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002208:	4620      	mov	r0, r4
 800220a:	4629      	mov	r1, r5
 800220c:	f7fe fc50 	bl	8000ab0 <__aeabi_d2iz>
 8002210:	4603      	mov	r3, r0
 8002212:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	f640 0233 	movw	r2, #2099	; 0x833
 800221c:	4293      	cmp	r3, r2
 800221e:	dd02      	ble.n	8002226 <motor1_set_PWM+0x66>
		duc = 2100-1;
 8002220:	f640 0333 	movw	r3, #2099	; 0x833
 8002224:	80fb      	strh	r3, [r7, #6]

	}
	TIM3->CCR2 =  duc;
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <motor1_set_PWM+0x84>)
 8002228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222c:	6393      	str	r3, [r2, #56]	; 0x38
	jedan = TIM3->CCR2;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <motor1_set_PWM+0x84>)
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <motor1_set_PWM+0x88>)
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bdb0      	pop	{r4, r5, r7, pc}
 800223e:	bf00      	nop
 8002240:	40020000 	.word	0x40020000
 8002244:	40000400 	.word	0x40000400
 8002248:	20000130 	.word	0x20000130

0800224c <motor2_set_PWM>:

void motor2_set_PWM(int16_t duc)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]

	if(duc<0) {
 8002256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225a:	2b00      	cmp	r3, #0
 800225c:	da06      	bge.n	800226c <motor2_set_PWM+0x20>
				GPIOA->ODR &= ~(0b01 << 9);
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <motor2_set_PWM+0x80>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <motor2_set_PWM+0x80>)
 8002264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002268:	6153      	str	r3, [r2, #20]
 800226a:	e009      	b.n	8002280 <motor2_set_PWM+0x34>
			}
	else if(duc>=0){
 800226c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db05      	blt.n	8002280 <motor2_set_PWM+0x34>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
		GPIOA->ODR |=  (0b01 << 9);
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <motor2_set_PWM+0x80>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <motor2_set_PWM+0x80>)
 800227a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227e:	6153      	str	r3, [r2, #20]
	}
	duc = fabs(duc);
 8002280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f8f9 	bl	800047c <__aeabi_i2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4614      	mov	r4, r2
 8002290:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fe fc0a 	bl	8000ab0 <__aeabi_d2iz>
 800229c:	4603      	mov	r3, r0
 800229e:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 80022a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a4:	f640 0233 	movw	r2, #2099	; 0x833
 80022a8:	4293      	cmp	r3, r2
 80022aa:	dd02      	ble.n	80022b2 <motor2_set_PWM+0x66>
			duc = 2100-1;
 80022ac:	f640 0333 	movw	r3, #2099	; 0x833
 80022b0:	80fb      	strh	r3, [r7, #6]

		}
	TIM4->CCR1 = duc;
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <motor2_set_PWM+0x84>)
 80022b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b8:	6353      	str	r3, [r2, #52]	; 0x34
	dva = TIM4->CCR1;
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <motor2_set_PWM+0x84>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <motor2_set_PWM+0x88>)
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40000800 	.word	0x40000800
 80022d4:	20000134 	.word	0x20000134

080022d8 <init_senzor>:
#include <stdint.h>
#include <stdbool.h>
#include "biblioteka/tajmer.h"
#include "biblioteka/senzori.h"

void init_senzor(){
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= (1 << 2); // c port
 80022dc:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <init_senzor+0x130>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a49      	ldr	r2, [pc, #292]	; (8002408 <init_senzor+0x130>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 0);  // a port
 80022e8:	4b47      	ldr	r3, [pc, #284]	; (8002408 <init_senzor+0x130>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a46      	ldr	r2, [pc, #280]	; (8002408 <init_senzor+0x130>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
	//1.  C12
			GPIOC->MODER &= ~(0b11 << 12*2);  // kliruje
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <init_senzor+0x134>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a44      	ldr	r2, [pc, #272]	; (800240c <init_senzor+0x134>)
 80022fa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80022fe:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 12*2);  // stavlja ga na input
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <init_senzor+0x134>)
 8002302:	4a42      	ldr	r2, [pc, #264]	; (800240c <init_senzor+0x134>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 12*2);  // kliruje pin za input bitova
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <init_senzor+0x134>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a3f      	ldr	r2, [pc, #252]	; (800240c <init_senzor+0x134>)
 800230e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002312:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 12*2);  // Setujem pull-down
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <init_senzor+0x134>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a3c      	ldr	r2, [pc, #240]	; (800240c <init_senzor+0x134>)
 800231a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800231e:	60d3      	str	r3, [r2, #12]
		//2.   C3
			GPIOC->MODER &= ~(0b11 << 3*2);  // kliruje
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <init_senzor+0x134>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a39      	ldr	r2, [pc, #228]	; (800240c <init_senzor+0x134>)
 8002326:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800232a:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 3*2);  // stavlja ga na input
 800232c:	4b37      	ldr	r3, [pc, #220]	; (800240c <init_senzor+0x134>)
 800232e:	4a37      	ldr	r2, [pc, #220]	; (800240c <init_senzor+0x134>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 3*2);  // kliruje pin za input bitova
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <init_senzor+0x134>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a34      	ldr	r2, [pc, #208]	; (800240c <init_senzor+0x134>)
 800233a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800233e:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 3*2);  // Setujem pull-down
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <init_senzor+0x134>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <init_senzor+0x134>)
 8002346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234a:	60d3      	str	r3, [r2, #12]
		//3.  A15
			GPIOA->MODER &= ~(0b11 << 15*2);  // kliruje
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <init_senzor+0x138>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <init_senzor+0x138>)
 8002352:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002356:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (0b00 << 15*2);  // stavlja ga na input
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <init_senzor+0x138>)
 800235a:	4a2d      	ldr	r2, [pc, #180]	; (8002410 <init_senzor+0x138>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6013      	str	r3, [r2, #0]
			GPIOA->PUPDR &= ~(0b11 << 15*2);  // kliruje pin za input bitova
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <init_senzor+0x138>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <init_senzor+0x138>)
 8002366:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800236a:	60d3      	str	r3, [r2, #12]
			GPIOA->PUPDR |= (0b10 << 15*2);  // Setujem pull-down
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <init_senzor+0x138>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <init_senzor+0x138>)
 8002372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002376:	60d3      	str	r3, [r2, #12]

			//ZADNJA STRANA
			//1.  c13
			GPIOC->MODER &= ~(0b11 << 13*2);  // kliruje
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <init_senzor+0x134>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a23      	ldr	r2, [pc, #140]	; (800240c <init_senzor+0x134>)
 800237e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002382:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 13*2);  // stavlja ga na input
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <init_senzor+0x134>)
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <init_senzor+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 13*2);  // kliruje pin za input bitova
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <init_senzor+0x134>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <init_senzor+0x134>)
 8002392:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002396:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 13*2);  // Setujem pull-down
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <init_senzor+0x134>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <init_senzor+0x134>)
 800239e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023a2:	60d3      	str	r3, [r2, #12]
			//2.   C0
			GPIOC->MODER &= ~(0b11 << 0*2);  // kliruje
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <init_senzor+0x134>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <init_senzor+0x134>)
 80023aa:	f023 0303 	bic.w	r3, r3, #3
 80023ae:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 0*2);  // stavlja ga na input
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <init_senzor+0x134>)
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <init_senzor+0x134>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 0*2);  // kliruje pin za input bitova
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <init_senzor+0x134>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a13      	ldr	r2, [pc, #76]	; (800240c <init_senzor+0x134>)
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 0*2);  // Setujem pull-down
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <init_senzor+0x134>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <init_senzor+0x134>)
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	60d3      	str	r3, [r2, #12]
			//3.  C2
			GPIOC->MODER &= ~(0b11 << 2*2);  // kliruje
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <init_senzor+0x134>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <init_senzor+0x134>)
 80023d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023da:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 2*2);  // stavlja ga na input
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <init_senzor+0x134>)
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <init_senzor+0x134>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 2*2);  // kliruje pin za input bitova
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <init_senzor+0x134>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <init_senzor+0x134>)
 80023ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023ee:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 2*2);  // Setujem pull-down*/
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <init_senzor+0x134>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <init_senzor+0x134>)
 80023f6:	f043 0320 	orr.w	r3, r3, #32
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40020800 	.word	0x40020800
 8002410:	40020000 	.word	0x40020000

08002414 <servo_set_position>:
    I2C1_Stop();
}


void servo_set_position(uint8_t motor, uint8_t position)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	460a      	mov	r2, r1
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	4613      	mov	r3, r2
 8002422:	71bb      	strb	r3, [r7, #6]
    uint8_t data[4];
    uint16_t pwm_val = ((position * (410 - 205)) / 180) + 205 ;  // Map position (0-180°) to PWM range (0-4095)
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	22cd      	movs	r2, #205	; 0xcd
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <servo_set_position+0x90>)
 800242e:	fb82 1203 	smull	r1, r2, r2, r3
 8002432:	441a      	add	r2, r3
 8002434:	11d2      	asrs	r2, r2, #7
 8002436:	17db      	asrs	r3, r3, #31
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b29b      	uxth	r3, r3
 800243c:	33cd      	adds	r3, #205	; 0xcd
 800243e:	827b      	strh	r3, [r7, #18]

    data[0] = 0x00;  // ON_L
 8002440:	2300      	movs	r3, #0
 8002442:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // ON_H
 8002444:	2300      	movs	r3, #0
 8002446:	737b      	strb	r3, [r7, #13]
    data[2] = pwm_val & 0xFF;  // OFF_L
 8002448:	8a7b      	ldrh	r3, [r7, #18]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	73bb      	strb	r3, [r7, #14]
    data[3] = pwm_val >> 8;    // OFF_H
 800244e:	8a7b      	ldrh	r3, [r7, #18]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	73fb      	strb	r3, [r7, #15]

    uint8_t register_address = 0x06 + (motor * 4);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3306      	adds	r3, #6
 8002460:	747b      	strb	r3, [r7, #17]

    I2C1_Start();
 8002462:	f7fe fd6d 	bl	8000f40 <I2C1_Start>
    I2C1_Write(0x40 << 1);  // PCA9685 I2C Address
 8002466:	2080      	movs	r0, #128	; 0x80
 8002468:	f7fe fd90 	bl	8000f8c <I2C1_Write>
    I2C1_Write(register_address);  // Servo motor register
 800246c:	7c7b      	ldrb	r3, [r7, #17]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd8c 	bl	8000f8c <I2C1_Write>
    for (int i = 0; i < 4; i++) {
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e00a      	b.n	8002490 <servo_set_position+0x7c>
        I2C1_Write(data[i]);
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fd81 	bl	8000f8c <I2C1_Write>
    for (int i = 0; i < 4; i++) {
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b03      	cmp	r3, #3
 8002494:	ddf1      	ble.n	800247a <servo_set_position+0x66>
    }
    I2C1_Stop();
 8002496:	f7fe fd69 	bl	8000f6c <I2C1_Stop>
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	b60b60b7 	.word	0xb60b60b7

080024a8 <servo_set_freq>:

void servo_set_freq(uint16_t freq)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
    uint8_t prescale = (25000000 / (4096 * freq)) - 1;
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	031b      	lsls	r3, r3, #12
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <servo_set_freq+0x44>)
 80024b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]

    I2C1_Start();
 80024c2:	f7fe fd3d 	bl	8000f40 <I2C1_Start>
    I2C1_Write(0x40 << 1);
 80024c6:	2080      	movs	r0, #128	; 0x80
 80024c8:	f7fe fd60 	bl	8000f8c <I2C1_Write>
    I2C1_Write(0x00);  // MODE1 register
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fd5d 	bl	8000f8c <I2C1_Write>
    I2C1_Write(0xFE);  // PRE_SCALE register
 80024d2:	20fe      	movs	r0, #254	; 0xfe
 80024d4:	f7fe fd5a 	bl	8000f8c <I2C1_Write>
    I2C1_Write(prescale);
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fd56 	bl	8000f8c <I2C1_Write>
    I2C1_Stop();
 80024e0:	f7fe fd44 	bl	8000f6c <I2C1_Stop>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	017d7840 	.word	0x017d7840

080024f0 <tajmer_init>:
static float c=0;



void tajmer_init()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  tim2_init ();
 80024f4:	f000 f80a 	bl	800250c <tim2_init>

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <enc_init>:

void enc_init(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	 enc1_init();
 8002500:	f000 f85e 	bl	80025c0 <enc1_init>
	 enc2_init();
 8002504:	f000 f8ee 	bl	80026e4 <enc2_init>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <tim2_init>:

static void
tim2_init ()
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= (0b1 << 0);
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <tim2_init+0xa8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <tim2_init+0xa8>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6453      	str	r3, [r2, #68]	; 0x44

  // 84MHz -> 1MHz
  TIM1->PSC = 84 - 1;
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <tim2_init+0xac>)
 8002520:	2253      	movs	r2, #83	; 0x53
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
  // 1MHz -> 1kHz
  TIM1->ARR = 1000 - 1;
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <tim2_init+0xac>)
 8002526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM1->CR1 &= ~(0b1 << 1);
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <tim2_init+0xac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <tim2_init+0xac>)
 8002532:	f023 0302 	bic.w	r3, r3, #2
 8002536:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~(0b1 << 2);
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <tim2_init+0xac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <tim2_init+0xac>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6013      	str	r3, [r2, #0]

  TIM1->EGR |= (0b1 << 0);
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <tim2_init+0xac>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <tim2_init+0xac>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6153      	str	r3, [r2, #20]

  TIM1->DIER |= (0b1 << 0);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <tim2_init+0xac>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <tim2_init+0xac>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	60d3      	str	r3, [r2, #12]

  while (!(TIM1->SR & (0b1 << 0)))
 800255c:	e000      	b.n	8002560 <tim2_init+0x54>
    {
      __NOP();
 800255e:	bf00      	nop
  while (!(TIM1->SR & (0b1 << 0)))
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <tim2_init+0xac>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f8      	beq.n	800255e <tim2_init+0x52>
    }
  TIM1->SR &= ~(0b1 << 0);
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <tim2_init+0xac>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <tim2_init+0xac>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6113      	str	r3, [r2, #16]

  TIM1->CR1 |= (0b1 << 2);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <tim2_init+0xac>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <tim2_init+0xac>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6013      	str	r3, [r2, #0]

  uint8_t const TIM1_PREKID = 25;
 8002584:	2319      	movs	r3, #25
 8002586:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[0] |= (0b1 << TIM1_PREKID);
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <tim2_init+0xb0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <tim2_init+0xb0>)
 8002598:	430b      	orrs	r3, r1
 800259a:	6013      	str	r3, [r2, #0]

  TIM1->CR1 |= (0b1 << 0);
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <tim2_init+0xac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <tim2_init+0xac>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40010000 	.word	0x40010000
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <enc1_init>:

static void enc1_init()
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // A port
 80025c4:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <enc1_init+0xe8>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <enc1_init+0xe8>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1); // B port
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <enc1_init+0xe8>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <enc1_init+0xe8>)
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	6313      	str	r3, [r2, #48]	; 0x30



	GPIOB->MODER |=  (0b10 << 3*2); //B3
 80025dc:	4b33      	ldr	r3, [pc, #204]	; (80026ac <enc1_init+0xec>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a32      	ldr	r2, [pc, #200]	; (80026ac <enc1_init+0xec>)
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 5*2); //A5
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <enc1_init+0xf0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <enc1_init+0xf0>)
 80025ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f2:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |=  (0b0001 << 3* 4);
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <enc1_init+0xec>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <enc1_init+0xec>)
 80025fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0b0001 << 5* 4);//SAD OVDE OBRNUO
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <enc1_init+0xf0>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <enc1_init+0xf0>)
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 0);
 800260c:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <enc1_init+0xe8>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <enc1_init+0xe8>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 0;
 8002618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF;
 8002620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c


	TIM2->SMCR &= ~(0b111 << 0 * 3);
 800262a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002634:	f023 0307 	bic.w	r3, r3, #7
 8002638:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |=  (0b011 << 0 * 3);
 800263a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002644:	f043 0303 	orr.w	r3, r3, #3
 8002648:	6093      	str	r3, [r2, #8]

	TIM2->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 800264a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 800265e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6193      	str	r3, [r2, #24]

	TIM2->CR1 |= (0b1 << 0);
 8002672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= (0b1 << 0);
 8002682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6153      	str	r3, [r2, #20]

	TIM2->CNT = 65536/2;
 8002692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002696:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020000 	.word	0x40020000

080026b4 <enc1_GetInc>:

int16_t enc1_GetInc()
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
	int16_t cnt = TIM2->CNT- 65536/2;
 80026ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 65536/2;
 80026ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 80026d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <enc2_init>:


static void enc2_init()
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // a port
 80026e8:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <enc2_init+0xd4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <enc2_init+0xd4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= (0b10 << 0*2); // A0
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <enc2_init+0xd8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a30      	ldr	r2, [pc, #192]	; (80027bc <enc2_init+0xd8>)
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (0b10 << 1*2); // A1
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <enc2_init+0xd8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <enc2_init+0xd8>)
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	6013      	str	r3, [r2, #0]

		GPIOA->OSPEEDR |= (0b11 << 0*2);
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <enc2_init+0xd8>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <enc2_init+0xd8>)
 8002712:	f043 0303 	orr.w	r3, r3, #3
 8002716:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0b11 << 1*2);
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <enc2_init+0xd8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <enc2_init+0xd8>)
 800271e:	f043 030c 	orr.w	r3, r3, #12
 8002722:	6093      	str	r3, [r2, #8]

		GPIOA->AFR[0] |= (0b0010<< 0*4);
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <enc2_init+0xd8>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <enc2_init+0xd8>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (0b0010 << 1*4);
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <enc2_init+0xd8>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a21      	ldr	r2, [pc, #132]	; (80027bc <enc2_init+0xd8>)
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 3);
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <enc2_init+0xd4>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <enc2_init+0xd4>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->PSC = 0;
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <enc2_init+0xdc>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xFFFF;
 800274e:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <enc2_init+0xdc>)
 8002750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM5->SMCR &= ~(0b111 << 0 * 3);
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <enc2_init+0xdc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a19      	ldr	r2, [pc, #100]	; (80027c0 <enc2_init+0xdc>)
 800275c:	f023 0307 	bic.w	r3, r3, #7
 8002760:	6093      	str	r3, [r2, #8]
	TIM5->SMCR |=  (0b011 << 0 * 3);
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <enc2_init+0xdc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <enc2_init+0xdc>)
 8002768:	f043 0303 	orr.w	r3, r3, #3
 800276c:	6093      	str	r3, [r2, #8]

	TIM5->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <enc2_init+0xdc>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <enc2_init+0xdc>)
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	f023 0303 	bic.w	r3, r3, #3
 800277c:	6193      	str	r3, [r2, #24]
	TIM5->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <enc2_init+0xdc>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <enc2_init+0xdc>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6193      	str	r3, [r2, #24]

	TIM5->CR1 |= (0b1 << 0);
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <enc2_init+0xdc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <enc2_init+0xdc>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]
	TIM5->EGR |= (0b1 << 0);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <enc2_init+0xdc>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <enc2_init+0xdc>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6153      	str	r3, [r2, #20]

	TIM5->CNT = 65536/2;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <enc2_init+0xdc>)
 80027a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40000c00 	.word	0x40000c00

080027c4 <enc2_GetInc>:

int16_t enc2_GetInc()
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
	int16_t cnt = TIM5->CNT -65536/2;
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <enc2_GetInc+0x2c>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	80fb      	strh	r3, [r7, #6]
	TIM5->CNT = 65536/2;
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <enc2_GetInc+0x2c>)
 80027da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 80027e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40000c00 	.word	0x40000c00

080027f4 <TIM1_UP_TIM10_IRQHandler>:
	theta=nova;
}


void TIM1_UP_TIM10_IRQHandler()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	ed2d 8b06 	vpush	{d8-d10}
 80027fa:	af00      	add	r7, sp, #0

  if ((TIM1->SR & (0b1 << 0)) == (0b1 << 0))
 80027fc:	4b97      	ldr	r3, [pc, #604]	; (8002a5c <TIM1_UP_TIM10_IRQHandler+0x268>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	f040 8115 	bne.w	8002a34 <TIM1_UP_TIM10_IRQHandler+0x240>
    {

	  odometrija(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f7fe fc5e 	bl	80010cc <odometrija>

	  regulacija_brzine();
 8002810:	f7ff faea 	bl	8001de8 <regulacija_brzine>

	  a = get_x();
 8002814:	f7fe fdac 	bl	8001370 <get_x>
 8002818:	eef0 7a40 	vmov.f32	s15, s0
 800281c:	4b90      	ldr	r3, [pc, #576]	; (8002a60 <TIM1_UP_TIM10_IRQHandler+0x26c>)
 800281e:	edc3 7a00 	vstr	s15, [r3]
	  b = get_y();
 8002822:	f7fe fdb3 	bl	800138c <get_y>
 8002826:	eef0 7a40 	vmov.f32	s15, s0
 800282a:	4b8e      	ldr	r3, [pc, #568]	; (8002a64 <TIM1_UP_TIM10_IRQHandler+0x270>)
 800282c:	edc3 7a00 	vstr	s15, [r3]
	  c = get_theta();
 8002830:	f7fe fdba 	bl	80013a8 <get_theta>
 8002834:	eef0 7a40 	vmov.f32	s15, s0
 8002838:	4b8b      	ldr	r3, [pc, #556]	; (8002a68 <TIM1_UP_TIM10_IRQHandler+0x274>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
	  if(test==1){
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <TIM1_UP_TIM10_IRQHandler+0x64>
		  pid_init();
 8002846:	f7fe fdd9 	bl	80013fc <pid_init>
		  racunanje_brzine(0,0);
 800284a:	eddf 0a89 	vldr	s1, [pc, #548]	; 8002a70 <TIM1_UP_TIM10_IRQHandler+0x27c>
 800284e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002a70 <TIM1_UP_TIM10_IRQHandler+0x27c>
 8002852:	f7fe ff15 	bl	8001680 <racunanje_brzine>
 8002856:	e058      	b.n	800290a <TIM1_UP_TIM10_IRQHandler+0x116>
	  }
	  else{
	  if (sistemsko_vreme % vreme_pozicija == 0){
 8002858:	4b86      	ldr	r3, [pc, #536]	; (8002a74 <TIM1_UP_TIM10_IRQHandler+0x280>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a86      	ldr	r2, [pc, #536]	; (8002a78 <TIM1_UP_TIM10_IRQHandler+0x284>)
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	fbb3 f1f2 	udiv	r1, r3, r2
 8002864:	fb02 f201 	mul.w	r2, r2, r1
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d14d      	bne.n	800290a <TIM1_UP_TIM10_IRQHandler+0x116>
		 if(faza1==0){
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d126      	bne.n	80028c4 <TIM1_UP_TIM10_IRQHandler+0xd0>
		  		  regulacija_pozicije(get_x(), get_y(), get_theta(), get_x(),  get_y(),  get_theta());
 8002876:	f7fe fd7b 	bl	8001370 <get_x>
 800287a:	eeb0 8a40 	vmov.f32	s16, s0
 800287e:	f7fe fd85 	bl	800138c <get_y>
 8002882:	eef0 8a40 	vmov.f32	s17, s0
 8002886:	f7fe fd8f 	bl	80013a8 <get_theta>
 800288a:	eeb0 9a40 	vmov.f32	s18, s0
 800288e:	f7fe fd6f 	bl	8001370 <get_x>
 8002892:	eef0 9a40 	vmov.f32	s19, s0
 8002896:	f7fe fd79 	bl	800138c <get_y>
 800289a:	eeb0 aa40 	vmov.f32	s20, s0
 800289e:	f7fe fd83 	bl	80013a8 <get_theta>
 80028a2:	eef0 7a40 	vmov.f32	s15, s0
 80028a6:	eef0 2a67 	vmov.f32	s5, s15
 80028aa:	eeb0 2a4a 	vmov.f32	s4, s20
 80028ae:	eef0 1a69 	vmov.f32	s3, s19
 80028b2:	eeb0 1a49 	vmov.f32	s2, s18
 80028b6:	eef0 0a68 	vmov.f32	s1, s17
 80028ba:	eeb0 0a48 	vmov.f32	s0, s16
 80028be:	f7fe ff47 	bl	8001750 <regulacija_pozicije>
 80028c2:	e022      	b.n	800290a <TIM1_UP_TIM10_IRQHandler+0x116>
		  	  }
		  else
		  regulacija_pozicije(x, y, theta, get_x(),  get_y(),  get_theta());
 80028c4:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80028c6:	ed93 8a00 	vldr	s16, [r3]
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <TIM1_UP_TIM10_IRQHandler+0x290>)
 80028cc:	edd3 8a00 	vldr	s17, [r3]
 80028d0:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <TIM1_UP_TIM10_IRQHandler+0x294>)
 80028d2:	ed93 9a00 	vldr	s18, [r3]
 80028d6:	f7fe fd4b 	bl	8001370 <get_x>
 80028da:	eef0 9a40 	vmov.f32	s19, s0
 80028de:	f7fe fd55 	bl	800138c <get_y>
 80028e2:	eeb0 aa40 	vmov.f32	s20, s0
 80028e6:	f7fe fd5f 	bl	80013a8 <get_theta>
 80028ea:	eef0 7a40 	vmov.f32	s15, s0
 80028ee:	eef0 2a67 	vmov.f32	s5, s15
 80028f2:	eeb0 2a4a 	vmov.f32	s4, s20
 80028f6:	eef0 1a69 	vmov.f32	s3, s19
 80028fa:	eeb0 1a49 	vmov.f32	s2, s18
 80028fe:	eef0 0a68 	vmov.f32	s1, s17
 8002902:	eeb0 0a48 	vmov.f32	s0, s16
 8002906:	f7fe ff23 	bl	8001750 <regulacija_pozicije>

		  }
	  }
	  if(!(GPIOC->IDR & (1<<11))){
 800290a:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <TIM1_UP_TIM10_IRQHandler+0x13c>
		  sistemsko_vreme++;
 8002916:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <TIM1_UP_TIM10_IRQHandler+0x280>)
 800291e:	6013      	str	r3, [r2, #0]
		  if(sistemsko_vreme == 100000)
 8002920:	4b54      	ldr	r3, [pc, #336]	; (8002a74 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d102      	bne.n	8002930 <TIM1_UP_TIM10_IRQHandler+0x13c>
		     	 flag_100s=true;
 800292a:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
	  }

	  if((GPIOC->IDR & (1<<0)) | (GPIOC->IDR & (1<<2)) | (GPIOC->IDR & (1<<14))){ //zadnja strana
 8002930:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0201 	and.w	r2, r3, #1
 8002938:	4b54      	ldr	r3, [pc, #336]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	431a      	orrs	r2, r3
 8002942:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	4313      	orrs	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d018      	beq.n	8002982 <TIM1_UP_TIM10_IRQHandler+0x18e>
		if(det==1){
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d117      	bne.n	8002988 <TIM1_UP_TIM10_IRQHandler+0x194>
			if(brojac==0){
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d103      	bne.n	8002968 <TIM1_UP_TIM10_IRQHandler+0x174>

			 temp=faza1;
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002966:	6013      	str	r3, [r2, #0]
		 }
		  faza1=0;
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
		  brojac=1;
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
		  z=0;
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
		  test=1;
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <TIM1_UP_TIM10_IRQHandler+0x278>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e002      	b.n	8002988 <TIM1_UP_TIM10_IRQHandler+0x194>
		}

	  }
	  else{
		  z=1;
 8002982:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
	  }



	  if((GPIOC->IDR & (1<<3)) | (GPIOC->IDR & (1<<12)) | (GPIOA->IDR & (1<<15))){ //prednja strana
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f003 0208 	and.w	r2, r3, #8
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002998:	431a      	orrs	r2, r3
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	4313      	orrs	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d018      	beq.n	80029da <TIM1_UP_TIM10_IRQHandler+0x1e6>
		if(det==0){
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d117      	bne.n	80029e0 <TIM1_UP_TIM10_IRQHandler+0x1ec>
			if(brojac==0){
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <TIM1_UP_TIM10_IRQHandler+0x1cc>
			 temp=faza1;
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a38      	ldr	r2, [pc, #224]	; (8002aa0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80029be:	6013      	str	r3, [r2, #0]
		 }
		   faza1=0;
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
		   brojac=1;
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
		   p=0;
 80029cc:	4b37      	ldr	r3, [pc, #220]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
		   test=1;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <TIM1_UP_TIM10_IRQHandler+0x278>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e002      	b.n	80029e0 <TIM1_UP_TIM10_IRQHandler+0x1ec>
		}
	  }
	  else{
		  p=1;
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
	  }

	  if((brojac==1) & ((z==1) & (p==1))){
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	400b      	ands	r3, r1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <TIM1_UP_TIM10_IRQHandler+0x240>
		  faza1=temp;
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002a1c:	6013      	str	r3, [r2, #0]
		  temp=0;
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
		  brojac=0;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
		  pid_init();
 8002a2a:	f7fe fce7 	bl	80013fc <pid_init>
		  test=0;
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
	  else
		  P1=0;
*/
	  }

      TIM1->SR &= ~(0b1 << 0);
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <TIM1_UP_TIM10_IRQHandler+0x268>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <TIM1_UP_TIM10_IRQHandler+0x268>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6113      	str	r3, [r2, #16]
      if(sistemsko_vreme == 100000)
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d102      	bne.n	8002a50 <TIM1_UP_TIM10_IRQHandler+0x25c>
    	  flag_100s=true;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]



}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	ecbd 8b06 	vpop	{d8-d10}
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	20000160 	.word	0x20000160
 8002a64:	20000164 	.word	0x20000164
 8002a68:	20000168 	.word	0x20000168
 8002a6c:	2000015c 	.word	0x2000015c
 8002a70:	00000000 	.word	0x00000000
 8002a74:	20000198 	.word	0x20000198
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	2000013c 	.word	0x2000013c
 8002a84:	20000140 	.word	0x20000140
 8002a88:	20000144 	.word	0x20000144
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	000186a0 	.word	0x000186a0
 8002a94:	20000138 	.word	0x20000138
 8002a98:	20000158 	.word	0x20000158
 8002a9c:	20000148 	.word	0x20000148
 8002aa0:	2000014c 	.word	0x2000014c
 8002aa4:	20000154 	.word	0x20000154
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	20000150 	.word	0x20000150

08002ab0 <uart_init>:
static void
uart6_init ();

void
uart_init ()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  uart6_init ();
 8002ab4:	f000 f802 	bl	8002abc <uart6_init>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <uart6_init>:

static void
uart6_init ()
{
 8002abc:	b490      	push	{r4, r7}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (0b1 << 0); // Dozvola takta na GPIO Port-u A
 8002ac2:	4b92      	ldr	r3, [pc, #584]	; (8002d0c <uart6_init+0x250>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a91      	ldr	r2, [pc, #580]	; (8002d0c <uart6_init+0x250>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB2ENR |= (0b1 << 5); // Dozvola takta na USART6 periferiji
 8002ace:	4b8f      	ldr	r3, [pc, #572]	; (8002d0c <uart6_init+0x250>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a8e      	ldr	r2, [pc, #568]	; (8002d0c <uart6_init+0x250>)
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44

  uint8_t const TX_PIN = 11; //PC6  PA11
 8002ada:	230b      	movs	r3, #11
 8002adc:	71fb      	strb	r3, [r7, #7]
  uint8_t const RX_PIN = 12; //PC7   PA12
 8002ade:	230c      	movs	r3, #12
 8002ae0:	71bb      	strb	r3, [r7, #6]

  GPIOA->MODER &= ~(0b11 << TX_PIN * 2);
 8002ae2:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <uart6_init+0x254>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	0052      	lsls	r2, r2, #1
 8002aea:	2103      	movs	r1, #3
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	43d2      	mvns	r2, r2
 8002af2:	4611      	mov	r1, r2
 8002af4:	4a86      	ldr	r2, [pc, #536]	; (8002d10 <uart6_init+0x254>)
 8002af6:	400b      	ands	r3, r1
 8002af8:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << TX_PIN * 2);
 8002afa:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <uart6_init+0x254>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	79fa      	ldrb	r2, [r7, #7]
 8002b00:	0052      	lsls	r2, r2, #1
 8002b02:	2102      	movs	r1, #2
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4a81      	ldr	r2, [pc, #516]	; (8002d10 <uart6_init+0x254>)
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6013      	str	r3, [r2, #0]
 GPIOA->MODER &= ~(0b11 << RX_PIN * 2);
 8002b10:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <uart6_init+0x254>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	79ba      	ldrb	r2, [r7, #6]
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	2103      	movs	r1, #3
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	43d2      	mvns	r2, r2
 8002b20:	4611      	mov	r1, r2
 8002b22:	4a7b      	ldr	r2, [pc, #492]	; (8002d10 <uart6_init+0x254>)
 8002b24:	400b      	ands	r3, r1
 8002b26:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << RX_PIN * 2);
 8002b28:	4b79      	ldr	r3, [pc, #484]	; (8002d10 <uart6_init+0x254>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	79ba      	ldrb	r2, [r7, #6]
 8002b2e:	0052      	lsls	r2, r2, #1
 8002b30:	2102      	movs	r1, #2
 8002b32:	fa01 f202 	lsl.w	r2, r1, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <uart6_init+0x254>)
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	6013      	str	r3, [r2, #0]

  // Podešavanje da TX pin bude pull up open drain
  // kako bi radio kao half duplex
  GPIOA->OTYPER |= (0b1 << TX_PIN);
 8002b3e:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <uart6_init+0x254>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4a70      	ldr	r2, [pc, #448]	; (8002d10 <uart6_init+0x254>)
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	6053      	str	r3, [r2, #4]
  GPIOA->PUPDR &= ~(0b11 << TX_PIN * 2);
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <uart6_init+0x254>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	0052      	lsls	r2, r2, #1
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	43d2      	mvns	r2, r2
 8002b62:	4611      	mov	r1, r2
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <uart6_init+0x254>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (0b01 << TX_PIN * 2);
 8002b6a:	4b69      	ldr	r3, [pc, #420]	; (8002d10 <uart6_init+0x254>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	0052      	lsls	r2, r2, #1
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <uart6_init+0x254>)
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]

  uint8_t const AF = 8;
 8002b80:	2308      	movs	r3, #8
 8002b82:	717b      	strb	r3, [r7, #5]

  GPIOA->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8002b84:	4a62      	ldr	r2, [pc, #392]	; (8002d10 <uart6_init+0x254>)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	79fa      	ldrb	r2, [r7, #7]
 8002b94:	f002 0207 	and.w	r2, r2, #7
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba0:	43d2      	mvns	r2, r2
 8002ba2:	4614      	mov	r4, r2
 8002ba4:	495a      	ldr	r1, [pc, #360]	; (8002d10 <uart6_init+0x254>)
 8002ba6:	79fa      	ldrb	r2, [r7, #7]
 8002ba8:	08d2      	lsrs	r2, r2, #3
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4610      	mov	r0, r2
 8002bae:	ea03 0204 	and.w	r2, r3, r4
 8002bb2:	f100 0308 	add.w	r3, r0, #8
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[TX_PIN / 8] |= (AF << (TX_PIN % 8) * 4);
 8002bba:	4a55      	ldr	r2, [pc, #340]	; (8002d10 <uart6_init+0x254>)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	7979      	ldrb	r1, [r7, #5]
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	f002 0207 	and.w	r2, r2, #7
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	494d      	ldr	r1, [pc, #308]	; (8002d10 <uart6_init+0x254>)
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	08d2      	lsrs	r2, r2, #3
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4610      	mov	r0, r2
 8002be2:	ea43 0204 	orr.w	r2, r3, r4
 8002be6:	f100 0308 	add.w	r3, r0, #8
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 8002bee:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <uart6_init+0x254>)
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	79ba      	ldrb	r2, [r7, #6]
 8002bfe:	f002 0207 	and.w	r2, r2, #7
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	210f      	movs	r1, #15
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	43d2      	mvns	r2, r2
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	4940      	ldr	r1, [pc, #256]	; (8002d10 <uart6_init+0x254>)
 8002c10:	79ba      	ldrb	r2, [r7, #6]
 8002c12:	08d2      	lsrs	r2, r2, #3
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4610      	mov	r0, r2
 8002c18:	ea03 0204 	and.w	r2, r3, r4
 8002c1c:	f100 0308 	add.w	r3, r0, #8
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] |= (AF << (RX_PIN % 8) * 4);
 8002c24:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <uart6_init+0x254>)
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	7979      	ldrb	r1, [r7, #5]
 8002c34:	79ba      	ldrb	r2, [r7, #6]
 8002c36:	f002 0207 	and.w	r2, r2, #7
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	4614      	mov	r4, r2
 8002c42:	4933      	ldr	r1, [pc, #204]	; (8002d10 <uart6_init+0x254>)
 8002c44:	79ba      	ldrb	r2, [r7, #6]
 8002c46:	08d2      	lsrs	r2, r2, #3
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	ea43 0204 	orr.w	r2, r3, r4
 8002c50:	f100 0308 	add.w	r3, r0, #8
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  USART6->CR1 &= ~(0b1 << 12); // Dužina poruke
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <uart6_init+0x258>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <uart6_init+0x258>)
 8002c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c62:	60d3      	str	r3, [r2, #12]
  USART6->CR2 &= ~(0b11 << 12); // Broj stop bitova
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <uart6_init+0x258>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <uart6_init+0x258>)
 8002c6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c6e:	6113      	str	r3, [r2, #16]

  // Baudrate = 9600
  //USART6->BRR = 0;
  USART6->BRR &= ~(0xFFFF);
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <uart6_init+0x258>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <uart6_init+0x258>)
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	6093      	str	r3, [r2, #8]
  USART6->BRR |= ((546 << 4) | (14 << 0));
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <uart6_init+0x258>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <uart6_init+0x258>)
 8002c82:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8002c86:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8002c8a:	6093      	str	r3, [r2, #8]

  // Uključivanje TX i RX pinova
  USART6->CR1 |= ((0b1 << 2) | (0b1 << 3));
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <uart6_init+0x258>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <uart6_init+0x258>)
 8002c92:	f043 030c 	orr.w	r3, r3, #12
 8002c96:	60d3      	str	r3, [r2, #12]

  // Uključivanje prekida za prihvatanje poruke
  USART6->CR1 |= (0b1 << 5);
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <uart6_init+0x258>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <uart6_init+0x258>)
 8002c9e:	f043 0320 	orr.w	r3, r3, #32
 8002ca2:	60d3      	str	r3, [r2, #12]

  // Uključivanje Half-duplex komunikacije
  USART6->CR2 &= ~((0b1 << 11) | (0b1 << 14));
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <uart6_init+0x258>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <uart6_init+0x258>)
 8002caa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002cae:	6113      	str	r3, [r2, #16]
  USART6->CR3 &= ~((0b1 << 1) | (0b1 << 5));
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <uart6_init+0x258>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <uart6_init+0x258>)
 8002cb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cba:	6153      	str	r3, [r2, #20]
  USART6->CR3 |= (0b1 << 3);
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <uart6_init+0x258>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <uart6_init+0x258>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6153      	str	r3, [r2, #20]

  // Odabir prekidne rutike koja se izvršava
  uint8_t const USART6_PREKID = 71;
 8002cc8:	2347      	movs	r3, #71	; 0x47
 8002cca:	713b      	strb	r3, [r7, #4]
  NVIC->ISER[USART6_PREKID / 32] |= (0b1 << USART6_PREKID % 32);
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <uart6_init+0x25c>)
 8002cce:	793b      	ldrb	r3, [r7, #4]
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd8:	793a      	ldrb	r2, [r7, #4]
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	490c      	ldr	r1, [pc, #48]	; (8002d18 <uart6_init+0x25c>)
 8002ce8:	793a      	ldrb	r2, [r7, #4]
 8002cea:	0952      	lsrs	r2, r2, #5
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4303      	orrs	r3, r0
 8002cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  // Uključivanje UART-a
  USART6->CR1 |= (0b1 << 13);
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <uart6_init+0x258>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <uart6_init+0x258>)
 8002cfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc90      	pop	{r4, r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <uart_pisi>:
}

// Piši u buffer
void
uart_pisi (uint8_t podatak)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if (velicina != MAX_VELICINA_BUFFERA)
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <uart_pisi+0xc0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b1e      	cmp	r3, #30
 8002d2e:	d021      	beq.n	8002d74 <uart_pisi+0x58>
    {
      buffer[index_pisi] = podatak;
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <uart_pisi+0xc4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <uart_pisi+0xc8>)
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <uart_pisi+0xc4>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <uart_pisi+0xcc>)
 8002d48:	fb83 1302 	smull	r1, r3, r3, r2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	1119      	asrs	r1, r3, #4
 8002d50:	17d3      	asrs	r3, r2, #31
 8002d52:	1ac9      	subs	r1, r1, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a5b      	subs	r3, r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	1ad1      	subs	r1, r2, r3
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <uart_pisi+0xc4>)
 8002d62:	701a      	strb	r2, [r3, #0]
      velicina++;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <uart_pisi+0xc0>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <uart_pisi+0xc0>)
 8002d70:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_pisi] = podatak;
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
    }
}
 8002d72:	e02c      	b.n	8002dce <uart_pisi+0xb2>
      buffer[index_pisi] = podatak;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <uart_pisi+0xc4>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <uart_pisi+0xc8>)
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <uart_pisi+0xc4>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <uart_pisi+0xcc>)
 8002d8c:	fb83 1302 	smull	r1, r3, r3, r2
 8002d90:	4413      	add	r3, r2
 8002d92:	1119      	asrs	r1, r3, #4
 8002d94:	17d3      	asrs	r3, r2, #31
 8002d96:	1ac9      	subs	r1, r1, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	1ad1      	subs	r1, r2, r3
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <uart_pisi+0xc4>)
 8002da6:	701a      	strb	r2, [r3, #0]
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <uart_pisi+0xd0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <uart_pisi+0xcc>)
 8002db2:	fb83 1302 	smull	r1, r3, r3, r2
 8002db6:	4413      	add	r3, r2
 8002db8:	1119      	asrs	r1, r3, #4
 8002dba:	17d3      	asrs	r3, r2, #31
 8002dbc:	1ac9      	subs	r1, r1, r3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a5b      	subs	r3, r3, r1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	1ad1      	subs	r1, r2, r3
 8002dc8:	b2ca      	uxtb	r2, r1
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <uart_pisi+0xd0>)
 8002dcc:	701a      	strb	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000018a 	.word	0x2000018a
 8002de0:	2000018b 	.word	0x2000018b
 8002de4:	2000016c 	.word	0x2000016c
 8002de8:	88888889 	.word	0x88888889
 8002dec:	2000018c 	.word	0x2000018c

08002df0 <USART6_IRQHandler>:
    }
}

void
USART6_IRQHandler ()
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  if (USART6->SR & (0b1 << 5))
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <USART6_IRQHandler+0x20>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <USART6_IRQHandler+0x1c>
    {
      //input = USART6->DR;
      uart_pisi(USART6->DR);
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <USART6_IRQHandler+0x20>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff88 	bl	8002d1c <uart_pisi>
    }
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40011400 	.word	0x40011400

08002e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e18:	f000 f99e 	bl	8003158 <HAL_Init>

  /* USER CODE BEGIN Init */
  tajmer_init();
 8002e1c:	f7ff fb68 	bl	80024f0 <tajmer_init>
  enc_init();
 8002e20:	f7ff fb6c 	bl	80024fc <enc_init>
  motor_init();
 8002e24:	f7fe f8ca 	bl	8000fbc <motor_init>
  pid_init();
 8002e28:	f7fe fae8 	bl	80013fc <pid_init>
  init_PWM();
 8002e2c:	f7ff f900 	bl	8002030 <init_PWM>
  uart_init();
 8002e30:	f7ff fe3e 	bl	8002ab0 <uart_init>
 init_senzor();
 8002e34:	f7ff fa50 	bl	80022d8 <init_senzor>
 I2C1_Init();
 8002e38:	f7fe f832 	bl	8000ea0 <I2C1_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3c:	f000 f820 	bl	8002e80 <SystemClock_Config>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while(0){
 8002e40:	bf00      	nop
	  	motor1_set_PWM(1000);



}
	  while (0) {
 8002e42:	bf00      	nop



	  }
while(1){
I2C1_Init();
 8002e44:	f7fe f82c 	bl	8000ea0 <I2C1_Init>

	if (!(I2C1->CR1 & I2C_CR1_PE)) {
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <main+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <main+0x54>
	    flagic++;  // Stop execution if I2C1 is NOT enabled
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <main+0x68>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <main+0x68>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
	}
	void pca9685_init() ;
	servo_set_freq(50);
 8002e68:	2032      	movs	r0, #50	; 0x32
 8002e6a:	f7ff fb1d 	bl	80024a8 <servo_set_freq>
	servo_set_position(1,90);
 8002e6e:	215a      	movs	r1, #90	; 0x5a
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7ff facf 	bl	8002414 <servo_set_position>
while(1){
 8002e76:	e7e5      	b.n	8002e44 <main+0x30>
 8002e78:	40005400 	.word	0x40005400
 8002e7c:	20000190 	.word	0x20000190

08002e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b094      	sub	sp, #80	; 0x50
 8002e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	2230      	movs	r2, #48	; 0x30
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 f928 	bl	80040e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <SystemClock_Config+0xcc>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <SystemClock_Config+0xcc>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <SystemClock_Config+0xcc>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <SystemClock_Config+0xd0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ecc:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <SystemClock_Config+0xd0>)
 8002ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <SystemClock_Config+0xd0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ee8:	2310      	movs	r3, #16
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eec:	2302      	movs	r3, #2
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002ef8:	2354      	movs	r3, #84	; 0x54
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002efc:	2302      	movs	r3, #2
 8002efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f00:	2304      	movs	r3, #4
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f04:	f107 0320 	add.w	r3, r7, #32
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa49 	bl	80033a0 <HAL_RCC_OscConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f14:	f000 f830 	bl	8002f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f18:	230f      	movs	r3, #15
 8002f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	2102      	movs	r1, #2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fca3 	bl	8003880 <HAL_RCC_ClockConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002f40:	f000 f81a 	bl	8002f78 <Error_Handler>
  }
}
 8002f44:	bf00      	nop
 8002f46:	3750      	adds	r7, #80	; 0x50
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000

08002f54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f66:	f000 f919 	bl	800319c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40014000 	.word	0x40014000

08002f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_MspInit+0x54>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <HAL_MspInit+0x54>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_MspInit+0x54>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_MspInit+0x54>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_MspInit+0x54>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_MspInit+0x54>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	210f      	movs	r1, #15
 8002fca:	f06f 0001 	mvn.w	r0, #1
 8002fce:	f000 f9bd 	bl	800334c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0); 
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	2018      	movs	r0, #24
 8002ff6:	f000 f9a9 	bl	800334c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn); 
 8002ffa:	2018      	movs	r0, #24
 8002ffc:	f000 f9c2 	bl	8003384 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_InitTick+0xa0>)
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_InitTick+0xa0>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6453      	str	r3, [r2, #68]	; 0x44
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_InitTick+0xa0>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800301c:	f107 0210 	add.w	r2, r7, #16
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fde2 	bl	8003bf0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800302c:	f000 fdcc 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 8003030:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_InitTick+0xa4>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	3b01      	subs	r3, #1
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_InitTick+0xa8>)
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <HAL_InitTick+0xac>)
 8003044:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000 / 1000) - 1;
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_InitTick+0xa8>)
 8003048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800304c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <HAL_InitTick+0xa8>)
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_InitTick+0xa8>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_InitTick+0xa8>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <HAL_InitTick+0xa8>)
 8003062:	f000 fdf7 	bl	8003c54 <HAL_TIM_Base_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 800306c:	4806      	ldr	r0, [pc, #24]	; (8003088 <HAL_InitTick+0xa8>)
 800306e:	f000 fe26 	bl	8003cbe <HAL_TIM_Base_Start_IT>
 8003072:	4603      	mov	r3, r0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	; 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	431bde83 	.word	0x431bde83
 8003088:	200001bc 	.word	0x200001bc
 800308c:	40014000 	.word	0x40014000

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a2:	e7fe      	b.n	80030a2 <HardFault_Handler+0x4>

080030a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <MemManage_Handler+0x4>

080030aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ae:	e7fe      	b.n	80030ae <BusFault_Handler+0x4>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <UsageFault_Handler+0x4>

080030b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80030ca:	f000 fe1c 	bl	8003d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200001bc 	.word	0x200001bc

080030d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <SystemInit+0x28>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <SystemInit+0x28>)
 80030e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SystemInit+0x28>)
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	609a      	str	r2, [r3, #8]
#endif
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800313c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800310a:	e003      	b.n	8003114 <LoopCopyDataInit>

0800310c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800310e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003112:	3104      	adds	r1, #4

08003114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800311a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800311c:	d3f6      	bcc.n	800310c <CopyDataInit>
  ldr  r2, =_sbss
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003120:	e002      	b.n	8003128 <LoopFillZerobss>

08003122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003124:	f842 3b04 	str.w	r3, [r2], #4

08003128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800312a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800312c:	d3f9      	bcc.n	8003122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800312e:	f7ff ffd3 	bl	80030d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003132:	f000 ffb3 	bl	800409c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7ff fe6d 	bl	8002e14 <main>
  bx  lr    
 800313a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800313c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003140:	080069a0 	.word	0x080069a0
  ldr  r0, =_sdata
 8003144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003148:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800314c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003150:	20000200 	.word	0x20000200

08003154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 f8d8 	bl	8003336 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff ff2a 	bl	8002fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7ff fefc 	bl	8002f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_IncTick+0x20>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_IncTick+0x24>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_IncTick+0x24>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000014 	.word	0x20000014
 80031c0:	200001fc 	.word	0x200001fc

080031c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <HAL_GetTick+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	200001fc 	.word	0x200001fc

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff4c 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800335e:	f7ff ff61 	bl	8003224 <__NVIC_GetPriorityGrouping>
 8003362:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	6978      	ldr	r0, [r7, #20]
 800336a:	f7ff ffb1 	bl	80032d0 <NVIC_EncodePriority>
 800336e:	4602      	mov	r2, r0
 8003370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff80 	bl	800327c <__NVIC_SetPriority>
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff54 	bl	8003240 <__NVIC_EnableIRQ>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e25b      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d075      	beq.n	80034aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	4ba3      	ldr	r3, [pc, #652]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d00c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ca:	4ba0      	ldr	r3, [pc, #640]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d112      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b9d      	ldr	r3, [pc, #628]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e2:	d10b      	bne.n	80033fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	4b99      	ldr	r3, [pc, #612]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d05b      	beq.n	80034a8 <HAL_RCC_OscConfig+0x108>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d157      	bne.n	80034a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e236      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d106      	bne.n	8003414 <HAL_RCC_OscConfig+0x74>
 8003406:	4b91      	ldr	r3, [pc, #580]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a90      	ldr	r2, [pc, #576]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x98>
 800341e:	4b8b      	ldr	r3, [pc, #556]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a8a      	ldr	r2, [pc, #552]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a87      	ldr	r2, [pc, #540]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xb0>
 8003438:	4b84      	ldr	r3, [pc, #528]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a83      	ldr	r2, [pc, #524]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a80      	ldr	r2, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff feb4 	bl	80031c4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7ff feb0 	bl	80031c4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1fb      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xc0>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7ff fea0 	bl	80031c4 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003488:	f7ff fe9c 	bl	80031c4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1e7      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0xe8>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d063      	beq.n	800357e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b5f      	ldr	r3, [pc, #380]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	4b5c      	ldr	r3, [pc, #368]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1bb      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4952      	ldr	r1, [pc, #328]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <HAL_RCC_OscConfig+0x2b0>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7ff fe55 	bl	80031c4 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800351e:	f7ff fe51 	bl	80031c4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e19c      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4940      	ldr	r1, [pc, #256]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_OscConfig+0x2b0>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff fe34 	bl	80031c4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003560:	f7ff fe30 	bl	80031c4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e17b      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d030      	beq.n	80035ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x2b4>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7ff fe14 	bl	80031c4 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a0:	f7ff fe10 	bl	80031c4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e15b      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x200>
 80035be:	e015      	b.n	80035ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c0:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCC_OscConfig+0x2b4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7ff fdfd 	bl	80031c4 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ce:	f7ff fdf9 	bl	80031c4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e144      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a0 	beq.w	800373a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a0e      	ldr	r2, [pc, #56]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCC_OscConfig+0x2ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_OscConfig+0x2b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d121      	bne.n	800367a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCC_OscConfig+0x2b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a07      	ldr	r2, [pc, #28]	; (8003658 <HAL_RCC_OscConfig+0x2b8>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7ff fdbf 	bl	80031c4 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e011      	b.n	800366e <HAL_RCC_OscConfig+0x2ce>
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	42470000 	.word	0x42470000
 8003654:	42470e80 	.word	0x42470e80
 8003658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7ff fdb2 	bl	80031c4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0fd      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCC_OscConfig+0x4d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x2f0>
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x32a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x312>
 8003698:	4b77      	ldr	r3, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b74      	ldr	r3, [pc, #464]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a73      	ldr	r2, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x32a>
 80036b2:	4b71      	ldr	r3, [pc, #452]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a70      	ldr	r2, [pc, #448]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a6d      	ldr	r2, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7ff fd77 	bl	80031c4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7ff fd73 	bl	80031c4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0bc      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x33a>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7ff fd61 	bl	80031c4 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7ff fd5d 	bl	80031c4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0a6      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b52      	ldr	r3, [pc, #328]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8092 	beq.w	8003868 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003744:	4b4c      	ldr	r3, [pc, #304]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d05c      	beq.n	800380a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d141      	bne.n	80037dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b48      	ldr	r3, [pc, #288]	; (800387c <HAL_RCC_OscConfig+0x4dc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff fd31 	bl	80031c4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7ff fd2d 	bl	80031c4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e078      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	019b      	lsls	r3, r3, #6
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	4933      	ldr	r1, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_RCC_OscConfig+0x4dc>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7ff fd06 	bl	80031c4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7ff fd02 	bl	80031c4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04d      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x41c>
 80037da:	e045      	b.n	8003868 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <HAL_RCC_OscConfig+0x4dc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7ff fcef 	bl	80031c4 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ea:	f7ff fceb 	bl	80031c4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x44a>
 8003808:	e02e      	b.n	8003868 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e029      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_RCC_OscConfig+0x4d8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d115      	bne.n	8003864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003844:	4293      	cmp	r3, r2
 8003846:	d10d      	bne.n	8003864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40007000 	.word	0x40007000
 8003878:	40023800 	.word	0x40023800
 800387c:	42470060 	.word	0x42470060

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cc      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90c      	bls.n	80038bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b65      	ldr	r3, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d044      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d119      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d003      	beq.n	800393e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393a:	2b03      	cmp	r3, #3
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e067      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4934      	ldr	r1, [pc, #208]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003970:	f7ff fc28 	bl	80031c4 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	e00a      	b.n	800398e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	f7ff fc24 	bl	80031c4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e04f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 020c 	and.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	429a      	cmp	r2, r3
 800399e:	d1eb      	bne.n	8003978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a0:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20c      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	5cd3      	ldrb	r3, [r2, r3]
 8003a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fada 	bl	8002fe0 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023c00 	.word	0x40023c00
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08006710 	.word	0x08006710
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	20000010 	.word	0x20000010

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a62:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d007      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x32>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d008      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x38>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 808d 	bne.w	8003b92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a7a:	60bb      	str	r3, [r7, #8]
       break;
 8003a7c:	e08c      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCC_GetSysClockFreq+0x160>)
 8003a80:	60bb      	str	r3, [r7, #8]
      break;
 8003a82:	e089      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8e:	4b45      	ldr	r3, [pc, #276]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d023      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	ea03 0501 	and.w	r5, r3, r1
 8003ab0:	ea04 0602 	and.w	r6, r4, r2
 8003ab4:	4a3d      	ldr	r2, [pc, #244]	; (8003bac <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab6:	fb02 f106 	mul.w	r1, r2, r6
 8003aba:	2200      	movs	r2, #0
 8003abc:	fb02 f205 	mul.w	r2, r2, r5
 8003ac0:	440a      	add	r2, r1
 8003ac2:	493a      	ldr	r1, [pc, #232]	; (8003bac <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac4:	fba5 0101 	umull	r0, r1, r5, r1
 8003ac8:	1853      	adds	r3, r2, r1
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f04f 0400 	mov.w	r4, #0
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	f7fd f863 	bl	8000ba0 <__aeabi_uldivmod>
 8003ada:	4603      	mov	r3, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e049      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b30      	ldr	r3, [pc, #192]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	f04f 0400 	mov.w	r4, #0
 8003aec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	ea03 0501 	and.w	r5, r3, r1
 8003af8:	ea04 0602 	and.w	r6, r4, r2
 8003afc:	4629      	mov	r1, r5
 8003afe:	4632      	mov	r2, r6
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	0154      	lsls	r4, r2, #5
 8003b0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b0e:	014b      	lsls	r3, r1, #5
 8003b10:	4619      	mov	r1, r3
 8003b12:	4622      	mov	r2, r4
 8003b14:	1b49      	subs	r1, r1, r5
 8003b16:	eb62 0206 	sbc.w	r2, r2, r6
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	0194      	lsls	r4, r2, #6
 8003b24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b28:	018b      	lsls	r3, r1, #6
 8003b2a:	1a5b      	subs	r3, r3, r1
 8003b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	00e2      	lsls	r2, r4, #3
 8003b3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b3e:	00d9      	lsls	r1, r3, #3
 8003b40:	460b      	mov	r3, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	195b      	adds	r3, r3, r5
 8003b46:	eb44 0406 	adc.w	r4, r4, r6
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	02a2      	lsls	r2, r4, #10
 8003b54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b58:	0299      	lsls	r1, r3, #10
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	4621      	mov	r1, r4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 0400 	mov.w	r4, #0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f7fd f818 	bl	8000ba0 <__aeabi_uldivmod>
 8003b70:	4603      	mov	r3, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	3301      	adds	r3, #1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	60bb      	str	r3, [r7, #8]
      break;
 8003b90:	e002      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b94:	60bb      	str	r3, [r7, #8]
      break;
 8003b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b98:	68bb      	ldr	r3, [r7, #8]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	017d7840 	.word	0x017d7840

08003bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	2000000c 	.word	0x2000000c

08003bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bcc:	f7ff fff0 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0b5b      	lsrs	r3, r3, #13
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4a03      	ldr	r2, [pc, #12]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40023800 	.word	0x40023800
 8003bec:	08006720 	.word	0x08006720

08003bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_GetClockConfig+0x5c>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_GetClockConfig+0x5c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_RCC_GetClockConfig+0x5c>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_GetClockConfig+0x5c>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_RCC_GetClockConfig+0x60>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40023c00 	.word	0x40023c00

08003c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e01d      	b.n	8003ca2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f815 	bl	8003caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 f968 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d007      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d122      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d11b      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0202 	mvn.w	r2, #2
 8003d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8ee 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003d4e:	e005      	b.n	8003d5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8e0 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8f1 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d122      	bne.n	8003db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d11b      	bne.n	8003db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0204 	mvn.w	r2, #4
 8003d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f8c4 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003da2:	e005      	b.n	8003db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f8b6 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8c7 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d122      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11b      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f06f 0208 	mvn.w	r2, #8
 8003dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2204      	movs	r2, #4
 8003de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f89a 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003df6:	e005      	b.n	8003e04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f88c 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f89d 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d122      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d11b      	bne.n	8003e5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0210 	mvn.w	r2, #16
 8003e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2208      	movs	r2, #8
 8003e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f870 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003e4a:	e005      	b.n	8003e58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f862 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f873 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10e      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f06f 0201 	mvn.w	r2, #1
 8003e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff f865 	bl	8002f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d10e      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d107      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8e3 	bl	800407c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f838 	bl	8003f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0220 	mvn.w	r2, #32
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8ad 	bl	8004068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a31      	ldr	r2, [pc, #196]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a30      	ldr	r2, [pc, #192]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_Base_SetConfig+0xe4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_Base_SetConfig+0xe8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TIM_Base_SetConfig+0xec>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a20      	ldr	r2, [pc, #128]	; (8004058 <TIM_Base_SetConfig+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <TIM_Base_SetConfig+0xf4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_Base_SetConfig+0xf8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <TIM_Base_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <TIM_Base_SetConfig+0xe4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d103      	bne.n	8004038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	615a      	str	r2, [r3, #20]
}
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <__errno>:
 8004090:	4b01      	ldr	r3, [pc, #4]	; (8004098 <__errno+0x8>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000018 	.word	0x20000018

0800409c <__libc_init_array>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0d      	ldr	r6, [pc, #52]	; (80040d4 <__libc_init_array+0x38>)
 80040a0:	4c0d      	ldr	r4, [pc, #52]	; (80040d8 <__libc_init_array+0x3c>)
 80040a2:	1ba4      	subs	r4, r4, r6
 80040a4:	10a4      	asrs	r4, r4, #2
 80040a6:	2500      	movs	r5, #0
 80040a8:	42a5      	cmp	r5, r4
 80040aa:	d109      	bne.n	80040c0 <__libc_init_array+0x24>
 80040ac:	4e0b      	ldr	r6, [pc, #44]	; (80040dc <__libc_init_array+0x40>)
 80040ae:	4c0c      	ldr	r4, [pc, #48]	; (80040e0 <__libc_init_array+0x44>)
 80040b0:	f002 fb20 	bl	80066f4 <_init>
 80040b4:	1ba4      	subs	r4, r4, r6
 80040b6:	10a4      	asrs	r4, r4, #2
 80040b8:	2500      	movs	r5, #0
 80040ba:	42a5      	cmp	r5, r4
 80040bc:	d105      	bne.n	80040ca <__libc_init_array+0x2e>
 80040be:	bd70      	pop	{r4, r5, r6, pc}
 80040c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c4:	4798      	blx	r3
 80040c6:	3501      	adds	r5, #1
 80040c8:	e7ee      	b.n	80040a8 <__libc_init_array+0xc>
 80040ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ce:	4798      	blx	r3
 80040d0:	3501      	adds	r5, #1
 80040d2:	e7f2      	b.n	80040ba <__libc_init_array+0x1e>
 80040d4:	08006998 	.word	0x08006998
 80040d8:	08006998 	.word	0x08006998
 80040dc:	08006998 	.word	0x08006998
 80040e0:	0800699c 	.word	0x0800699c

080040e4 <memset>:
 80040e4:	4402      	add	r2, r0
 80040e6:	4603      	mov	r3, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>
 80040f4:	0000      	movs	r0, r0
	...

080040f8 <cos>:
 80040f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040fa:	ec51 0b10 	vmov	r0, r1, d0
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <cos+0x80>)
 8004100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004104:	4293      	cmp	r3, r2
 8004106:	dc06      	bgt.n	8004116 <cos+0x1e>
 8004108:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004170 <cos+0x78>
 800410c:	f001 fae0 	bl	80056d0 <__kernel_cos>
 8004110:	ec51 0b10 	vmov	r0, r1, d0
 8004114:	e007      	b.n	8004126 <cos+0x2e>
 8004116:	4a19      	ldr	r2, [pc, #100]	; (800417c <cos+0x84>)
 8004118:	4293      	cmp	r3, r2
 800411a:	dd09      	ble.n	8004130 <cos+0x38>
 800411c:	ee10 2a10 	vmov	r2, s0
 8004120:	460b      	mov	r3, r1
 8004122:	f7fc f85d 	bl	80001e0 <__aeabi_dsub>
 8004126:	ec41 0b10 	vmov	d0, r0, r1
 800412a:	b005      	add	sp, #20
 800412c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004130:	4668      	mov	r0, sp
 8004132:	f001 f829 	bl	8005188 <__ieee754_rem_pio2>
 8004136:	f000 0003 	and.w	r0, r0, #3
 800413a:	2801      	cmp	r0, #1
 800413c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004140:	ed9d 0b00 	vldr	d0, [sp]
 8004144:	d007      	beq.n	8004156 <cos+0x5e>
 8004146:	2802      	cmp	r0, #2
 8004148:	d00e      	beq.n	8004168 <cos+0x70>
 800414a:	2800      	cmp	r0, #0
 800414c:	d0de      	beq.n	800410c <cos+0x14>
 800414e:	2001      	movs	r0, #1
 8004150:	f001 fec6 	bl	8005ee0 <__kernel_sin>
 8004154:	e7dc      	b.n	8004110 <cos+0x18>
 8004156:	f001 fec3 	bl	8005ee0 <__kernel_sin>
 800415a:	ec53 2b10 	vmov	r2, r3, d0
 800415e:	ee10 0a10 	vmov	r0, s0
 8004162:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004166:	e7de      	b.n	8004126 <cos+0x2e>
 8004168:	f001 fab2 	bl	80056d0 <__kernel_cos>
 800416c:	e7f5      	b.n	800415a <cos+0x62>
 800416e:	bf00      	nop
	...
 8004178:	3fe921fb 	.word	0x3fe921fb
 800417c:	7fefffff 	.word	0x7fefffff

08004180 <sin>:
 8004180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004182:	ec51 0b10 	vmov	r0, r1, d0
 8004186:	4a20      	ldr	r2, [pc, #128]	; (8004208 <sin+0x88>)
 8004188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800418c:	4293      	cmp	r3, r2
 800418e:	dc07      	bgt.n	80041a0 <sin+0x20>
 8004190:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004200 <sin+0x80>
 8004194:	2000      	movs	r0, #0
 8004196:	f001 fea3 	bl	8005ee0 <__kernel_sin>
 800419a:	ec51 0b10 	vmov	r0, r1, d0
 800419e:	e007      	b.n	80041b0 <sin+0x30>
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <sin+0x8c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	dd09      	ble.n	80041ba <sin+0x3a>
 80041a6:	ee10 2a10 	vmov	r2, s0
 80041aa:	460b      	mov	r3, r1
 80041ac:	f7fc f818 	bl	80001e0 <__aeabi_dsub>
 80041b0:	ec41 0b10 	vmov	d0, r0, r1
 80041b4:	b005      	add	sp, #20
 80041b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ba:	4668      	mov	r0, sp
 80041bc:	f000 ffe4 	bl	8005188 <__ieee754_rem_pio2>
 80041c0:	f000 0003 	and.w	r0, r0, #3
 80041c4:	2801      	cmp	r0, #1
 80041c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041ca:	ed9d 0b00 	vldr	d0, [sp]
 80041ce:	d004      	beq.n	80041da <sin+0x5a>
 80041d0:	2802      	cmp	r0, #2
 80041d2:	d005      	beq.n	80041e0 <sin+0x60>
 80041d4:	b970      	cbnz	r0, 80041f4 <sin+0x74>
 80041d6:	2001      	movs	r0, #1
 80041d8:	e7dd      	b.n	8004196 <sin+0x16>
 80041da:	f001 fa79 	bl	80056d0 <__kernel_cos>
 80041de:	e7dc      	b.n	800419a <sin+0x1a>
 80041e0:	2001      	movs	r0, #1
 80041e2:	f001 fe7d 	bl	8005ee0 <__kernel_sin>
 80041e6:	ec53 2b10 	vmov	r2, r3, d0
 80041ea:	ee10 0a10 	vmov	r0, s0
 80041ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80041f2:	e7dd      	b.n	80041b0 <sin+0x30>
 80041f4:	f001 fa6c 	bl	80056d0 <__kernel_cos>
 80041f8:	e7f5      	b.n	80041e6 <sin+0x66>
 80041fa:	bf00      	nop
 80041fc:	f3af 8000 	nop.w
	...
 8004208:	3fe921fb 	.word	0x3fe921fb
 800420c:	7fefffff 	.word	0x7fefffff

08004210 <atan2>:
 8004210:	f000 b9ca 	b.w	80045a8 <__ieee754_atan2>

08004214 <pow>:
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	ed2d 8b04 	vpush	{d8-d9}
 800421c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80044f0 <pow+0x2dc>
 8004220:	b08d      	sub	sp, #52	; 0x34
 8004222:	ec57 6b10 	vmov	r6, r7, d0
 8004226:	ec55 4b11 	vmov	r4, r5, d1
 800422a:	f000 fa9d 	bl	8004768 <__ieee754_pow>
 800422e:	f999 3000 	ldrsb.w	r3, [r9]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	eeb0 8a40 	vmov.f32	s16, s0
 800423a:	eef0 8a60 	vmov.f32	s17, s1
 800423e:	46c8      	mov	r8, r9
 8004240:	d05f      	beq.n	8004302 <pow+0xee>
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f7fc fc1b 	bl	8000a84 <__aeabi_dcmpun>
 800424e:	4683      	mov	fp, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d156      	bne.n	8004302 <pow+0xee>
 8004254:	4632      	mov	r2, r6
 8004256:	463b      	mov	r3, r7
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc fc12 	bl	8000a84 <__aeabi_dcmpun>
 8004260:	9001      	str	r0, [sp, #4]
 8004262:	b1e8      	cbz	r0, 80042a0 <pow+0x8c>
 8004264:	2200      	movs	r2, #0
 8004266:	2300      	movs	r3, #0
 8004268:	4620      	mov	r0, r4
 800426a:	4629      	mov	r1, r5
 800426c:	f7fc fbd8 	bl	8000a20 <__aeabi_dcmpeq>
 8004270:	2800      	cmp	r0, #0
 8004272:	d046      	beq.n	8004302 <pow+0xee>
 8004274:	2301      	movs	r3, #1
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	4b96      	ldr	r3, [pc, #600]	; (80044d4 <pow+0x2c0>)
 800427a:	9303      	str	r3, [sp, #12]
 800427c:	4b96      	ldr	r3, [pc, #600]	; (80044d8 <pow+0x2c4>)
 800427e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004282:	2200      	movs	r2, #0
 8004284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004288:	9b00      	ldr	r3, [sp, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004290:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004294:	d033      	beq.n	80042fe <pow+0xea>
 8004296:	a802      	add	r0, sp, #8
 8004298:	f002 f916 	bl	80064c8 <matherr>
 800429c:	bb48      	cbnz	r0, 80042f2 <pow+0xde>
 800429e:	e05d      	b.n	800435c <pow+0x148>
 80042a0:	f04f 0a00 	mov.w	sl, #0
 80042a4:	f04f 0b00 	mov.w	fp, #0
 80042a8:	4652      	mov	r2, sl
 80042aa:	465b      	mov	r3, fp
 80042ac:	4630      	mov	r0, r6
 80042ae:	4639      	mov	r1, r7
 80042b0:	f7fc fbb6 	bl	8000a20 <__aeabi_dcmpeq>
 80042b4:	ec4b ab19 	vmov	d9, sl, fp
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d054      	beq.n	8004366 <pow+0x152>
 80042bc:	4652      	mov	r2, sl
 80042be:	465b      	mov	r3, fp
 80042c0:	4620      	mov	r0, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	f7fc fbac 	bl	8000a20 <__aeabi_dcmpeq>
 80042c8:	4680      	mov	r8, r0
 80042ca:	b318      	cbz	r0, 8004314 <pow+0x100>
 80042cc:	2301      	movs	r3, #1
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <pow+0x2c0>)
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	9b01      	ldr	r3, [sp, #4]
 80042d6:	930a      	str	r3, [sp, #40]	; 0x28
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80042de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80042e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0d5      	beq.n	8004296 <pow+0x82>
 80042ea:	4b7b      	ldr	r3, [pc, #492]	; (80044d8 <pow+0x2c4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f4:	b11b      	cbz	r3, 80042fe <pow+0xea>
 80042f6:	f7ff fecb 	bl	8004090 <__errno>
 80042fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fc:	6003      	str	r3, [r0, #0]
 80042fe:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004302:	eeb0 0a48 	vmov.f32	s0, s16
 8004306:	eef0 0a68 	vmov.f32	s1, s17
 800430a:	b00d      	add	sp, #52	; 0x34
 800430c:	ecbd 8b04 	vpop	{d8-d9}
 8004310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004314:	ec45 4b10 	vmov	d0, r4, r5
 8004318:	f002 f847 	bl	80063aa <finite>
 800431c:	2800      	cmp	r0, #0
 800431e:	d0f0      	beq.n	8004302 <pow+0xee>
 8004320:	4652      	mov	r2, sl
 8004322:	465b      	mov	r3, fp
 8004324:	4620      	mov	r0, r4
 8004326:	4629      	mov	r1, r5
 8004328:	f7fc fb84 	bl	8000a34 <__aeabi_dcmplt>
 800432c:	2800      	cmp	r0, #0
 800432e:	d0e8      	beq.n	8004302 <pow+0xee>
 8004330:	2301      	movs	r3, #1
 8004332:	9302      	str	r3, [sp, #8]
 8004334:	4b67      	ldr	r3, [pc, #412]	; (80044d4 <pow+0x2c0>)
 8004336:	9303      	str	r3, [sp, #12]
 8004338:	f999 3000 	ldrsb.w	r3, [r9]
 800433c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004344:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004348:	b913      	cbnz	r3, 8004350 <pow+0x13c>
 800434a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800434e:	e7a2      	b.n	8004296 <pow+0x82>
 8004350:	4962      	ldr	r1, [pc, #392]	; (80044dc <pow+0x2c8>)
 8004352:	2000      	movs	r0, #0
 8004354:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d19c      	bne.n	8004296 <pow+0x82>
 800435c:	f7ff fe98 	bl	8004090 <__errno>
 8004360:	2321      	movs	r3, #33	; 0x21
 8004362:	6003      	str	r3, [r0, #0]
 8004364:	e7c5      	b.n	80042f2 <pow+0xde>
 8004366:	eeb0 0a48 	vmov.f32	s0, s16
 800436a:	eef0 0a68 	vmov.f32	s1, s17
 800436e:	f002 f81c 	bl	80063aa <finite>
 8004372:	9000      	str	r0, [sp, #0]
 8004374:	2800      	cmp	r0, #0
 8004376:	f040 8081 	bne.w	800447c <pow+0x268>
 800437a:	ec47 6b10 	vmov	d0, r6, r7
 800437e:	f002 f814 	bl	80063aa <finite>
 8004382:	2800      	cmp	r0, #0
 8004384:	d07a      	beq.n	800447c <pow+0x268>
 8004386:	ec45 4b10 	vmov	d0, r4, r5
 800438a:	f002 f80e 	bl	80063aa <finite>
 800438e:	2800      	cmp	r0, #0
 8004390:	d074      	beq.n	800447c <pow+0x268>
 8004392:	ec53 2b18 	vmov	r2, r3, d8
 8004396:	ee18 0a10 	vmov	r0, s16
 800439a:	4619      	mov	r1, r3
 800439c:	f7fc fb72 	bl	8000a84 <__aeabi_dcmpun>
 80043a0:	f999 9000 	ldrsb.w	r9, [r9]
 80043a4:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <pow+0x2c0>)
 80043a6:	b1b0      	cbz	r0, 80043d6 <pow+0x1c2>
 80043a8:	2201      	movs	r2, #1
 80043aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043ae:	9b00      	ldr	r3, [sp, #0]
 80043b0:	930a      	str	r3, [sp, #40]	; 0x28
 80043b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80043ba:	f1b9 0f00 	cmp.w	r9, #0
 80043be:	d0c4      	beq.n	800434a <pow+0x136>
 80043c0:	4652      	mov	r2, sl
 80043c2:	465b      	mov	r3, fp
 80043c4:	4650      	mov	r0, sl
 80043c6:	4659      	mov	r1, fp
 80043c8:	f7fc f9ec 	bl	80007a4 <__aeabi_ddiv>
 80043cc:	f1b9 0f02 	cmp.w	r9, #2
 80043d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80043d4:	e7c1      	b.n	800435a <pow+0x146>
 80043d6:	2203      	movs	r2, #3
 80043d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043dc:	900a      	str	r0, [sp, #40]	; 0x28
 80043de:	4629      	mov	r1, r5
 80043e0:	4620      	mov	r0, r4
 80043e2:	2200      	movs	r2, #0
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <pow+0x2cc>)
 80043e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80043ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043ee:	f7fc f8af 	bl	8000550 <__aeabi_dmul>
 80043f2:	4604      	mov	r4, r0
 80043f4:	460d      	mov	r5, r1
 80043f6:	f1b9 0f00 	cmp.w	r9, #0
 80043fa:	d124      	bne.n	8004446 <pow+0x232>
 80043fc:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <pow+0x2d0>)
 80043fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004402:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004406:	4630      	mov	r0, r6
 8004408:	4652      	mov	r2, sl
 800440a:	465b      	mov	r3, fp
 800440c:	4639      	mov	r1, r7
 800440e:	f7fc fb11 	bl	8000a34 <__aeabi_dcmplt>
 8004412:	2800      	cmp	r0, #0
 8004414:	d056      	beq.n	80044c4 <pow+0x2b0>
 8004416:	ec45 4b10 	vmov	d0, r4, r5
 800441a:	f002 f861 	bl	80064e0 <rint>
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	ec51 0b10 	vmov	r0, r1, d0
 8004426:	f7fc fafb 	bl	8000a20 <__aeabi_dcmpeq>
 800442a:	b920      	cbnz	r0, 8004436 <pow+0x222>
 800442c:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <pow+0x2d4>)
 800442e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004432:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004436:	f998 3000 	ldrsb.w	r3, [r8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d142      	bne.n	80044c4 <pow+0x2b0>
 800443e:	f7ff fe27 	bl	8004090 <__errno>
 8004442:	2322      	movs	r3, #34	; 0x22
 8004444:	e78d      	b.n	8004362 <pow+0x14e>
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <pow+0x2d8>)
 8004448:	2200      	movs	r2, #0
 800444a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800444e:	4630      	mov	r0, r6
 8004450:	4652      	mov	r2, sl
 8004452:	465b      	mov	r3, fp
 8004454:	4639      	mov	r1, r7
 8004456:	f7fc faed 	bl	8000a34 <__aeabi_dcmplt>
 800445a:	2800      	cmp	r0, #0
 800445c:	d0eb      	beq.n	8004436 <pow+0x222>
 800445e:	ec45 4b10 	vmov	d0, r4, r5
 8004462:	f002 f83d 	bl	80064e0 <rint>
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	ec51 0b10 	vmov	r0, r1, d0
 800446e:	f7fc fad7 	bl	8000a20 <__aeabi_dcmpeq>
 8004472:	2800      	cmp	r0, #0
 8004474:	d1df      	bne.n	8004436 <pow+0x222>
 8004476:	2200      	movs	r2, #0
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <pow+0x2c8>)
 800447a:	e7da      	b.n	8004432 <pow+0x21e>
 800447c:	2200      	movs	r2, #0
 800447e:	2300      	movs	r3, #0
 8004480:	ec51 0b18 	vmov	r0, r1, d8
 8004484:	f7fc facc 	bl	8000a20 <__aeabi_dcmpeq>
 8004488:	2800      	cmp	r0, #0
 800448a:	f43f af3a 	beq.w	8004302 <pow+0xee>
 800448e:	ec47 6b10 	vmov	d0, r6, r7
 8004492:	f001 ff8a 	bl	80063aa <finite>
 8004496:	2800      	cmp	r0, #0
 8004498:	f43f af33 	beq.w	8004302 <pow+0xee>
 800449c:	ec45 4b10 	vmov	d0, r4, r5
 80044a0:	f001 ff83 	bl	80063aa <finite>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f43f af2c 	beq.w	8004302 <pow+0xee>
 80044aa:	2304      	movs	r3, #4
 80044ac:	9302      	str	r3, [sp, #8]
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <pow+0x2c0>)
 80044b0:	9303      	str	r3, [sp, #12]
 80044b2:	2300      	movs	r3, #0
 80044b4:	930a      	str	r3, [sp, #40]	; 0x28
 80044b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80044be:	ed8d 9b08 	vstr	d9, [sp, #32]
 80044c2:	e7b8      	b.n	8004436 <pow+0x222>
 80044c4:	a802      	add	r0, sp, #8
 80044c6:	f001 ffff 	bl	80064c8 <matherr>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	f47f af11 	bne.w	80042f2 <pow+0xde>
 80044d0:	e7b5      	b.n	800443e <pow+0x22a>
 80044d2:	bf00      	nop
 80044d4:	08006728 	.word	0x08006728
 80044d8:	3ff00000 	.word	0x3ff00000
 80044dc:	fff00000 	.word	0xfff00000
 80044e0:	3fe00000 	.word	0x3fe00000
 80044e4:	47efffff 	.word	0x47efffff
 80044e8:	c7efffff 	.word	0xc7efffff
 80044ec:	7ff00000 	.word	0x7ff00000
 80044f0:	2000007c 	.word	0x2000007c

080044f4 <sqrt>:
 80044f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044f8:	ed2d 8b02 	vpush	{d8}
 80044fc:	b08b      	sub	sp, #44	; 0x2c
 80044fe:	ec55 4b10 	vmov	r4, r5, d0
 8004502:	f001 f833 	bl	800556c <__ieee754_sqrt>
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <sqrt+0xac>)
 8004508:	eeb0 8a40 	vmov.f32	s16, s0
 800450c:	eef0 8a60 	vmov.f32	s17, s1
 8004510:	f993 6000 	ldrsb.w	r6, [r3]
 8004514:	1c73      	adds	r3, r6, #1
 8004516:	d02a      	beq.n	800456e <sqrt+0x7a>
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fc fab0 	bl	8000a84 <__aeabi_dcmpun>
 8004524:	4607      	mov	r7, r0
 8004526:	bb10      	cbnz	r0, 800456e <sqrt+0x7a>
 8004528:	f04f 0800 	mov.w	r8, #0
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	4620      	mov	r0, r4
 8004536:	4629      	mov	r1, r5
 8004538:	f7fc fa7c 	bl	8000a34 <__aeabi_dcmplt>
 800453c:	b1b8      	cbz	r0, 800456e <sqrt+0x7a>
 800453e:	2301      	movs	r3, #1
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <sqrt+0xb0>)
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	9708      	str	r7, [sp, #32]
 8004548:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800454c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004550:	b9b6      	cbnz	r6, 8004580 <sqrt+0x8c>
 8004552:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004556:	4668      	mov	r0, sp
 8004558:	f001 ffb6 	bl	80064c8 <matherr>
 800455c:	b1d0      	cbz	r0, 8004594 <sqrt+0xa0>
 800455e:	9b08      	ldr	r3, [sp, #32]
 8004560:	b11b      	cbz	r3, 800456a <sqrt+0x76>
 8004562:	f7ff fd95 	bl	8004090 <__errno>
 8004566:	9b08      	ldr	r3, [sp, #32]
 8004568:	6003      	str	r3, [r0, #0]
 800456a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800456e:	eeb0 0a48 	vmov.f32	s0, s16
 8004572:	eef0 0a68 	vmov.f32	s1, s17
 8004576:	b00b      	add	sp, #44	; 0x2c
 8004578:	ecbd 8b02 	vpop	{d8}
 800457c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004580:	4642      	mov	r2, r8
 8004582:	464b      	mov	r3, r9
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fc f90c 	bl	80007a4 <__aeabi_ddiv>
 800458c:	2e02      	cmp	r6, #2
 800458e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004592:	d1e0      	bne.n	8004556 <sqrt+0x62>
 8004594:	f7ff fd7c 	bl	8004090 <__errno>
 8004598:	2321      	movs	r3, #33	; 0x21
 800459a:	6003      	str	r3, [r0, #0]
 800459c:	e7df      	b.n	800455e <sqrt+0x6a>
 800459e:	bf00      	nop
 80045a0:	2000007c 	.word	0x2000007c
 80045a4:	0800672c 	.word	0x0800672c

080045a8 <__ieee754_atan2>:
 80045a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ac:	ec57 6b11 	vmov	r6, r7, d1
 80045b0:	4273      	negs	r3, r6
 80045b2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80045b6:	4333      	orrs	r3, r6
 80045b8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004760 <__ieee754_atan2+0x1b8>
 80045bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80045c0:	4573      	cmp	r3, lr
 80045c2:	ec51 0b10 	vmov	r0, r1, d0
 80045c6:	ee11 8a10 	vmov	r8, s2
 80045ca:	d80a      	bhi.n	80045e2 <__ieee754_atan2+0x3a>
 80045cc:	4244      	negs	r4, r0
 80045ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045d2:	4304      	orrs	r4, r0
 80045d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80045d8:	4574      	cmp	r4, lr
 80045da:	468c      	mov	ip, r1
 80045dc:	ee10 9a10 	vmov	r9, s0
 80045e0:	d907      	bls.n	80045f2 <__ieee754_atan2+0x4a>
 80045e2:	4632      	mov	r2, r6
 80045e4:	463b      	mov	r3, r7
 80045e6:	f7fb fdfd 	bl	80001e4 <__adddf3>
 80045ea:	ec41 0b10 	vmov	d0, r0, r1
 80045ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80045f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80045fa:	4334      	orrs	r4, r6
 80045fc:	d103      	bne.n	8004606 <__ieee754_atan2+0x5e>
 80045fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004602:	f001 bd29 	b.w	8006058 <atan>
 8004606:	17bc      	asrs	r4, r7, #30
 8004608:	f004 0402 	and.w	r4, r4, #2
 800460c:	ea53 0909 	orrs.w	r9, r3, r9
 8004610:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004614:	d107      	bne.n	8004626 <__ieee754_atan2+0x7e>
 8004616:	2c02      	cmp	r4, #2
 8004618:	d073      	beq.n	8004702 <__ieee754_atan2+0x15a>
 800461a:	2c03      	cmp	r4, #3
 800461c:	d1e5      	bne.n	80045ea <__ieee754_atan2+0x42>
 800461e:	a13e      	add	r1, pc, #248	; (adr r1, 8004718 <__ieee754_atan2+0x170>)
 8004620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004624:	e7e1      	b.n	80045ea <__ieee754_atan2+0x42>
 8004626:	ea52 0808 	orrs.w	r8, r2, r8
 800462a:	d106      	bne.n	800463a <__ieee754_atan2+0x92>
 800462c:	f1bc 0f00 	cmp.w	ip, #0
 8004630:	da6b      	bge.n	800470a <__ieee754_atan2+0x162>
 8004632:	a13b      	add	r1, pc, #236	; (adr r1, 8004720 <__ieee754_atan2+0x178>)
 8004634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004638:	e7d7      	b.n	80045ea <__ieee754_atan2+0x42>
 800463a:	4572      	cmp	r2, lr
 800463c:	d120      	bne.n	8004680 <__ieee754_atan2+0xd8>
 800463e:	4293      	cmp	r3, r2
 8004640:	d111      	bne.n	8004666 <__ieee754_atan2+0xbe>
 8004642:	2c02      	cmp	r4, #2
 8004644:	d007      	beq.n	8004656 <__ieee754_atan2+0xae>
 8004646:	2c03      	cmp	r4, #3
 8004648:	d009      	beq.n	800465e <__ieee754_atan2+0xb6>
 800464a:	2c01      	cmp	r4, #1
 800464c:	d155      	bne.n	80046fa <__ieee754_atan2+0x152>
 800464e:	a136      	add	r1, pc, #216	; (adr r1, 8004728 <__ieee754_atan2+0x180>)
 8004650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004654:	e7c9      	b.n	80045ea <__ieee754_atan2+0x42>
 8004656:	a136      	add	r1, pc, #216	; (adr r1, 8004730 <__ieee754_atan2+0x188>)
 8004658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800465c:	e7c5      	b.n	80045ea <__ieee754_atan2+0x42>
 800465e:	a136      	add	r1, pc, #216	; (adr r1, 8004738 <__ieee754_atan2+0x190>)
 8004660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004664:	e7c1      	b.n	80045ea <__ieee754_atan2+0x42>
 8004666:	2c02      	cmp	r4, #2
 8004668:	d04b      	beq.n	8004702 <__ieee754_atan2+0x15a>
 800466a:	2c03      	cmp	r4, #3
 800466c:	d0d7      	beq.n	800461e <__ieee754_atan2+0x76>
 800466e:	2c01      	cmp	r4, #1
 8004670:	f04f 0000 	mov.w	r0, #0
 8004674:	d102      	bne.n	800467c <__ieee754_atan2+0xd4>
 8004676:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800467a:	e7b6      	b.n	80045ea <__ieee754_atan2+0x42>
 800467c:	2100      	movs	r1, #0
 800467e:	e7b4      	b.n	80045ea <__ieee754_atan2+0x42>
 8004680:	4573      	cmp	r3, lr
 8004682:	d0d3      	beq.n	800462c <__ieee754_atan2+0x84>
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	151b      	asrs	r3, r3, #20
 8004688:	2b3c      	cmp	r3, #60	; 0x3c
 800468a:	dc1e      	bgt.n	80046ca <__ieee754_atan2+0x122>
 800468c:	2f00      	cmp	r7, #0
 800468e:	da01      	bge.n	8004694 <__ieee754_atan2+0xec>
 8004690:	333c      	adds	r3, #60	; 0x3c
 8004692:	db1e      	blt.n	80046d2 <__ieee754_atan2+0x12a>
 8004694:	4632      	mov	r2, r6
 8004696:	463b      	mov	r3, r7
 8004698:	f7fc f884 	bl	80007a4 <__aeabi_ddiv>
 800469c:	ec41 0b10 	vmov	d0, r0, r1
 80046a0:	f001 fe7a 	bl	8006398 <fabs>
 80046a4:	f001 fcd8 	bl	8006058 <atan>
 80046a8:	ec51 0b10 	vmov	r0, r1, d0
 80046ac:	2c01      	cmp	r4, #1
 80046ae:	d013      	beq.n	80046d8 <__ieee754_atan2+0x130>
 80046b0:	2c02      	cmp	r4, #2
 80046b2:	d015      	beq.n	80046e0 <__ieee754_atan2+0x138>
 80046b4:	2c00      	cmp	r4, #0
 80046b6:	d098      	beq.n	80045ea <__ieee754_atan2+0x42>
 80046b8:	a321      	add	r3, pc, #132	; (adr r3, 8004740 <__ieee754_atan2+0x198>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f7fb fd8f 	bl	80001e0 <__aeabi_dsub>
 80046c2:	a321      	add	r3, pc, #132	; (adr r3, 8004748 <__ieee754_atan2+0x1a0>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	e014      	b.n	80046f4 <__ieee754_atan2+0x14c>
 80046ca:	a121      	add	r1, pc, #132	; (adr r1, 8004750 <__ieee754_atan2+0x1a8>)
 80046cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d0:	e7ec      	b.n	80046ac <__ieee754_atan2+0x104>
 80046d2:	2000      	movs	r0, #0
 80046d4:	2100      	movs	r1, #0
 80046d6:	e7e9      	b.n	80046ac <__ieee754_atan2+0x104>
 80046d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046dc:	4619      	mov	r1, r3
 80046de:	e784      	b.n	80045ea <__ieee754_atan2+0x42>
 80046e0:	a317      	add	r3, pc, #92	; (adr r3, 8004740 <__ieee754_atan2+0x198>)
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f7fb fd7b 	bl	80001e0 <__aeabi_dsub>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	a116      	add	r1, pc, #88	; (adr r1, 8004748 <__ieee754_atan2+0x1a0>)
 80046f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046f4:	f7fb fd74 	bl	80001e0 <__aeabi_dsub>
 80046f8:	e777      	b.n	80045ea <__ieee754_atan2+0x42>
 80046fa:	a117      	add	r1, pc, #92	; (adr r1, 8004758 <__ieee754_atan2+0x1b0>)
 80046fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004700:	e773      	b.n	80045ea <__ieee754_atan2+0x42>
 8004702:	a111      	add	r1, pc, #68	; (adr r1, 8004748 <__ieee754_atan2+0x1a0>)
 8004704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004708:	e76f      	b.n	80045ea <__ieee754_atan2+0x42>
 800470a:	a111      	add	r1, pc, #68	; (adr r1, 8004750 <__ieee754_atan2+0x1a8>)
 800470c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004710:	e76b      	b.n	80045ea <__ieee754_atan2+0x42>
 8004712:	bf00      	nop
 8004714:	f3af 8000 	nop.w
 8004718:	54442d18 	.word	0x54442d18
 800471c:	c00921fb 	.word	0xc00921fb
 8004720:	54442d18 	.word	0x54442d18
 8004724:	bff921fb 	.word	0xbff921fb
 8004728:	54442d18 	.word	0x54442d18
 800472c:	bfe921fb 	.word	0xbfe921fb
 8004730:	7f3321d2 	.word	0x7f3321d2
 8004734:	4002d97c 	.word	0x4002d97c
 8004738:	7f3321d2 	.word	0x7f3321d2
 800473c:	c002d97c 	.word	0xc002d97c
 8004740:	33145c07 	.word	0x33145c07
 8004744:	3ca1a626 	.word	0x3ca1a626
 8004748:	54442d18 	.word	0x54442d18
 800474c:	400921fb 	.word	0x400921fb
 8004750:	54442d18 	.word	0x54442d18
 8004754:	3ff921fb 	.word	0x3ff921fb
 8004758:	54442d18 	.word	0x54442d18
 800475c:	3fe921fb 	.word	0x3fe921fb
 8004760:	7ff00000 	.word	0x7ff00000
 8004764:	00000000 	.word	0x00000000

08004768 <__ieee754_pow>:
 8004768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	b091      	sub	sp, #68	; 0x44
 800476e:	ed8d 1b00 	vstr	d1, [sp]
 8004772:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004776:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800477a:	ea58 0302 	orrs.w	r3, r8, r2
 800477e:	ec57 6b10 	vmov	r6, r7, d0
 8004782:	f000 84be 	beq.w	8005102 <__ieee754_pow+0x99a>
 8004786:	4b7a      	ldr	r3, [pc, #488]	; (8004970 <__ieee754_pow+0x208>)
 8004788:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800478c:	429c      	cmp	r4, r3
 800478e:	463d      	mov	r5, r7
 8004790:	ee10 aa10 	vmov	sl, s0
 8004794:	dc09      	bgt.n	80047aa <__ieee754_pow+0x42>
 8004796:	d103      	bne.n	80047a0 <__ieee754_pow+0x38>
 8004798:	b93e      	cbnz	r6, 80047aa <__ieee754_pow+0x42>
 800479a:	45a0      	cmp	r8, r4
 800479c:	dc0d      	bgt.n	80047ba <__ieee754_pow+0x52>
 800479e:	e001      	b.n	80047a4 <__ieee754_pow+0x3c>
 80047a0:	4598      	cmp	r8, r3
 80047a2:	dc02      	bgt.n	80047aa <__ieee754_pow+0x42>
 80047a4:	4598      	cmp	r8, r3
 80047a6:	d10e      	bne.n	80047c6 <__ieee754_pow+0x5e>
 80047a8:	b16a      	cbz	r2, 80047c6 <__ieee754_pow+0x5e>
 80047aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80047ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80047b2:	ea54 030a 	orrs.w	r3, r4, sl
 80047b6:	f000 84a4 	beq.w	8005102 <__ieee754_pow+0x99a>
 80047ba:	486e      	ldr	r0, [pc, #440]	; (8004974 <__ieee754_pow+0x20c>)
 80047bc:	b011      	add	sp, #68	; 0x44
 80047be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c2:	f001 be85 	b.w	80064d0 <nan>
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	da53      	bge.n	8004872 <__ieee754_pow+0x10a>
 80047ca:	4b6b      	ldr	r3, [pc, #428]	; (8004978 <__ieee754_pow+0x210>)
 80047cc:	4598      	cmp	r8, r3
 80047ce:	dc4d      	bgt.n	800486c <__ieee754_pow+0x104>
 80047d0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80047d4:	4598      	cmp	r8, r3
 80047d6:	dd4c      	ble.n	8004872 <__ieee754_pow+0x10a>
 80047d8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80047dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80047e0:	2b14      	cmp	r3, #20
 80047e2:	dd26      	ble.n	8004832 <__ieee754_pow+0xca>
 80047e4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80047e8:	fa22 f103 	lsr.w	r1, r2, r3
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d13e      	bne.n	8004872 <__ieee754_pow+0x10a>
 80047f4:	f001 0101 	and.w	r1, r1, #1
 80047f8:	f1c1 0b02 	rsb	fp, r1, #2
 80047fc:	2a00      	cmp	r2, #0
 80047fe:	d15b      	bne.n	80048b8 <__ieee754_pow+0x150>
 8004800:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <__ieee754_pow+0x208>)
 8004802:	4598      	cmp	r8, r3
 8004804:	d124      	bne.n	8004850 <__ieee754_pow+0xe8>
 8004806:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800480a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800480e:	ea53 030a 	orrs.w	r3, r3, sl
 8004812:	f000 8476 	beq.w	8005102 <__ieee754_pow+0x99a>
 8004816:	4b59      	ldr	r3, [pc, #356]	; (800497c <__ieee754_pow+0x214>)
 8004818:	429c      	cmp	r4, r3
 800481a:	dd2d      	ble.n	8004878 <__ieee754_pow+0x110>
 800481c:	f1b9 0f00 	cmp.w	r9, #0
 8004820:	f280 8473 	bge.w	800510a <__ieee754_pow+0x9a2>
 8004824:	2000      	movs	r0, #0
 8004826:	2100      	movs	r1, #0
 8004828:	ec41 0b10 	vmov	d0, r0, r1
 800482c:	b011      	add	sp, #68	; 0x44
 800482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004832:	2a00      	cmp	r2, #0
 8004834:	d13e      	bne.n	80048b4 <__ieee754_pow+0x14c>
 8004836:	f1c3 0314 	rsb	r3, r3, #20
 800483a:	fa48 f103 	asr.w	r1, r8, r3
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	4543      	cmp	r3, r8
 8004844:	f040 8469 	bne.w	800511a <__ieee754_pow+0x9b2>
 8004848:	f001 0101 	and.w	r1, r1, #1
 800484c:	f1c1 0b02 	rsb	fp, r1, #2
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <__ieee754_pow+0x218>)
 8004852:	4598      	cmp	r8, r3
 8004854:	d118      	bne.n	8004888 <__ieee754_pow+0x120>
 8004856:	f1b9 0f00 	cmp.w	r9, #0
 800485a:	f280 845a 	bge.w	8005112 <__ieee754_pow+0x9aa>
 800485e:	4948      	ldr	r1, [pc, #288]	; (8004980 <__ieee754_pow+0x218>)
 8004860:	4632      	mov	r2, r6
 8004862:	463b      	mov	r3, r7
 8004864:	2000      	movs	r0, #0
 8004866:	f7fb ff9d 	bl	80007a4 <__aeabi_ddiv>
 800486a:	e7dd      	b.n	8004828 <__ieee754_pow+0xc0>
 800486c:	f04f 0b02 	mov.w	fp, #2
 8004870:	e7c4      	b.n	80047fc <__ieee754_pow+0x94>
 8004872:	f04f 0b00 	mov.w	fp, #0
 8004876:	e7c1      	b.n	80047fc <__ieee754_pow+0x94>
 8004878:	f1b9 0f00 	cmp.w	r9, #0
 800487c:	dad2      	bge.n	8004824 <__ieee754_pow+0xbc>
 800487e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004882:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004886:	e7cf      	b.n	8004828 <__ieee754_pow+0xc0>
 8004888:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800488c:	d106      	bne.n	800489c <__ieee754_pow+0x134>
 800488e:	4632      	mov	r2, r6
 8004890:	463b      	mov	r3, r7
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	f7fb fe5b 	bl	8000550 <__aeabi_dmul>
 800489a:	e7c5      	b.n	8004828 <__ieee754_pow+0xc0>
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <__ieee754_pow+0x21c>)
 800489e:	4599      	cmp	r9, r3
 80048a0:	d10a      	bne.n	80048b8 <__ieee754_pow+0x150>
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	db08      	blt.n	80048b8 <__ieee754_pow+0x150>
 80048a6:	ec47 6b10 	vmov	d0, r6, r7
 80048aa:	b011      	add	sp, #68	; 0x44
 80048ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	f000 be5c 	b.w	800556c <__ieee754_sqrt>
 80048b4:	f04f 0b00 	mov.w	fp, #0
 80048b8:	ec47 6b10 	vmov	d0, r6, r7
 80048bc:	f001 fd6c 	bl	8006398 <fabs>
 80048c0:	ec51 0b10 	vmov	r0, r1, d0
 80048c4:	f1ba 0f00 	cmp.w	sl, #0
 80048c8:	d127      	bne.n	800491a <__ieee754_pow+0x1b2>
 80048ca:	b124      	cbz	r4, 80048d6 <__ieee754_pow+0x16e>
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <__ieee754_pow+0x218>)
 80048ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d121      	bne.n	800491a <__ieee754_pow+0x1b2>
 80048d6:	f1b9 0f00 	cmp.w	r9, #0
 80048da:	da05      	bge.n	80048e8 <__ieee754_pow+0x180>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	2000      	movs	r0, #0
 80048e2:	4927      	ldr	r1, [pc, #156]	; (8004980 <__ieee754_pow+0x218>)
 80048e4:	f7fb ff5e 	bl	80007a4 <__aeabi_ddiv>
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	da9d      	bge.n	8004828 <__ieee754_pow+0xc0>
 80048ec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80048f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80048f4:	ea54 030b 	orrs.w	r3, r4, fp
 80048f8:	d108      	bne.n	800490c <__ieee754_pow+0x1a4>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	f7fb fc6d 	bl	80001e0 <__aeabi_dsub>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e7ac      	b.n	8004866 <__ieee754_pow+0xfe>
 800490c:	f1bb 0f01 	cmp.w	fp, #1
 8004910:	d18a      	bne.n	8004828 <__ieee754_pow+0xc0>
 8004912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004916:	4619      	mov	r1, r3
 8004918:	e786      	b.n	8004828 <__ieee754_pow+0xc0>
 800491a:	0fed      	lsrs	r5, r5, #31
 800491c:	1e6b      	subs	r3, r5, #1
 800491e:	930d      	str	r3, [sp, #52]	; 0x34
 8004920:	ea5b 0303 	orrs.w	r3, fp, r3
 8004924:	d102      	bne.n	800492c <__ieee754_pow+0x1c4>
 8004926:	4632      	mov	r2, r6
 8004928:	463b      	mov	r3, r7
 800492a:	e7e8      	b.n	80048fe <__ieee754_pow+0x196>
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <__ieee754_pow+0x220>)
 800492e:	4598      	cmp	r8, r3
 8004930:	f340 80fe 	ble.w	8004b30 <__ieee754_pow+0x3c8>
 8004934:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004938:	4598      	cmp	r8, r3
 800493a:	dd0a      	ble.n	8004952 <__ieee754_pow+0x1ea>
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <__ieee754_pow+0x214>)
 800493e:	429c      	cmp	r4, r3
 8004940:	dc0d      	bgt.n	800495e <__ieee754_pow+0x1f6>
 8004942:	f1b9 0f00 	cmp.w	r9, #0
 8004946:	f6bf af6d 	bge.w	8004824 <__ieee754_pow+0xbc>
 800494a:	a307      	add	r3, pc, #28	; (adr r3, 8004968 <__ieee754_pow+0x200>)
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	e79f      	b.n	8004892 <__ieee754_pow+0x12a>
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <__ieee754_pow+0x224>)
 8004954:	429c      	cmp	r4, r3
 8004956:	ddf4      	ble.n	8004942 <__ieee754_pow+0x1da>
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <__ieee754_pow+0x218>)
 800495a:	429c      	cmp	r4, r3
 800495c:	dd18      	ble.n	8004990 <__ieee754_pow+0x228>
 800495e:	f1b9 0f00 	cmp.w	r9, #0
 8004962:	dcf2      	bgt.n	800494a <__ieee754_pow+0x1e2>
 8004964:	e75e      	b.n	8004824 <__ieee754_pow+0xbc>
 8004966:	bf00      	nop
 8004968:	8800759c 	.word	0x8800759c
 800496c:	7e37e43c 	.word	0x7e37e43c
 8004970:	7ff00000 	.word	0x7ff00000
 8004974:	08006730 	.word	0x08006730
 8004978:	433fffff 	.word	0x433fffff
 800497c:	3fefffff 	.word	0x3fefffff
 8004980:	3ff00000 	.word	0x3ff00000
 8004984:	3fe00000 	.word	0x3fe00000
 8004988:	41e00000 	.word	0x41e00000
 800498c:	3feffffe 	.word	0x3feffffe
 8004990:	2200      	movs	r2, #0
 8004992:	4b63      	ldr	r3, [pc, #396]	; (8004b20 <__ieee754_pow+0x3b8>)
 8004994:	f7fb fc24 	bl	80001e0 <__aeabi_dsub>
 8004998:	a355      	add	r3, pc, #340	; (adr r3, 8004af0 <__ieee754_pow+0x388>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	f7fb fdd5 	bl	8000550 <__aeabi_dmul>
 80049a6:	a354      	add	r3, pc, #336	; (adr r3, 8004af8 <__ieee754_pow+0x390>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	4620      	mov	r0, r4
 80049b2:	4629      	mov	r1, r5
 80049b4:	f7fb fdcc 	bl	8000550 <__aeabi_dmul>
 80049b8:	2200      	movs	r2, #0
 80049ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049be:	4b59      	ldr	r3, [pc, #356]	; (8004b24 <__ieee754_pow+0x3bc>)
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	f7fb fdc4 	bl	8000550 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	a14c      	add	r1, pc, #304	; (adr r1, 8004b00 <__ieee754_pow+0x398>)
 80049ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d2:	f7fb fc05 	bl	80001e0 <__aeabi_dsub>
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f7fb fdb9 	bl	8000550 <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	2000      	movs	r0, #0
 80049e4:	4950      	ldr	r1, [pc, #320]	; (8004b28 <__ieee754_pow+0x3c0>)
 80049e6:	f7fb fbfb 	bl	80001e0 <__aeabi_dsub>
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	4680      	mov	r8, r0
 80049f0:	4689      	mov	r9, r1
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7fb fdab 	bl	8000550 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4640      	mov	r0, r8
 8004a00:	4649      	mov	r1, r9
 8004a02:	f7fb fda5 	bl	8000550 <__aeabi_dmul>
 8004a06:	a340      	add	r3, pc, #256	; (adr r3, 8004b08 <__ieee754_pow+0x3a0>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fda0 	bl	8000550 <__aeabi_dmul>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a18:	f7fb fbe2 	bl	80001e0 <__aeabi_dsub>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
 8004a24:	4630      	mov	r0, r6
 8004a26:	4639      	mov	r1, r7
 8004a28:	f7fb fbdc 	bl	80001e4 <__adddf3>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a32:	4632      	mov	r2, r6
 8004a34:	463b      	mov	r3, r7
 8004a36:	f7fb fbd3 	bl	80001e0 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb fbcd 	bl	80001e0 <__aeabi_dsub>
 8004a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a48:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	4606      	mov	r6, r0
 8004a50:	460f      	mov	r7, r1
 8004a52:	f040 81eb 	bne.w	8004e2c <__ieee754_pow+0x6c4>
 8004a56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004b10 <__ieee754_pow+0x3a8>
 8004a5a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004a5e:	2400      	movs	r4, #0
 8004a60:	4622      	mov	r2, r4
 8004a62:	462b      	mov	r3, r5
 8004a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004a6c:	f7fb fbb8 	bl	80001e0 <__aeabi_dsub>
 8004a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a74:	f7fb fd6c 	bl	8000550 <__aeabi_dmul>
 8004a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a7c:	4680      	mov	r8, r0
 8004a7e:	4689      	mov	r9, r1
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	f7fb fd64 	bl	8000550 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4649      	mov	r1, r9
 8004a90:	f7fb fba8 	bl	80001e4 <__adddf3>
 8004a94:	4622      	mov	r2, r4
 8004a96:	462b      	mov	r3, r5
 8004a98:	4680      	mov	r8, r0
 8004a9a:	4689      	mov	r9, r1
 8004a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa0:	f7fb fd56 	bl	8000550 <__aeabi_dmul>
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	4602      	mov	r2, r0
 8004aac:	4649      	mov	r1, r9
 8004aae:	4640      	mov	r0, r8
 8004ab0:	e9cd 4500 	strd	r4, r5, [sp]
 8004ab4:	f7fb fb96 	bl	80001e4 <__adddf3>
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <__ieee754_pow+0x3c4>)
 8004aba:	4299      	cmp	r1, r3
 8004abc:	4606      	mov	r6, r0
 8004abe:	460f      	mov	r7, r1
 8004ac0:	468b      	mov	fp, r1
 8004ac2:	f340 82f7 	ble.w	80050b4 <__ieee754_pow+0x94c>
 8004ac6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004aca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004ace:	4303      	orrs	r3, r0
 8004ad0:	f000 81ea 	beq.w	8004ea8 <__ieee754_pow+0x740>
 8004ad4:	a310      	add	r3, pc, #64	; (adr r3, 8004b18 <__ieee754_pow+0x3b0>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ade:	f7fb fd37 	bl	8000550 <__aeabi_dmul>
 8004ae2:	a30d      	add	r3, pc, #52	; (adr r3, 8004b18 <__ieee754_pow+0x3b0>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	e6d5      	b.n	8004896 <__ieee754_pow+0x12e>
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w
 8004af0:	60000000 	.word	0x60000000
 8004af4:	3ff71547 	.word	0x3ff71547
 8004af8:	f85ddf44 	.word	0xf85ddf44
 8004afc:	3e54ae0b 	.word	0x3e54ae0b
 8004b00:	55555555 	.word	0x55555555
 8004b04:	3fd55555 	.word	0x3fd55555
 8004b08:	652b82fe 	.word	0x652b82fe
 8004b0c:	3ff71547 	.word	0x3ff71547
 8004b10:	00000000 	.word	0x00000000
 8004b14:	bff00000 	.word	0xbff00000
 8004b18:	8800759c 	.word	0x8800759c
 8004b1c:	7e37e43c 	.word	0x7e37e43c
 8004b20:	3ff00000 	.word	0x3ff00000
 8004b24:	3fd00000 	.word	0x3fd00000
 8004b28:	3fe00000 	.word	0x3fe00000
 8004b2c:	408fffff 	.word	0x408fffff
 8004b30:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	da05      	bge.n	8004b46 <__ieee754_pow+0x3de>
 8004b3a:	4bd3      	ldr	r3, [pc, #844]	; (8004e88 <__ieee754_pow+0x720>)
 8004b3c:	f7fb fd08 	bl	8000550 <__aeabi_dmul>
 8004b40:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004b44:	460c      	mov	r4, r1
 8004b46:	1523      	asrs	r3, r4, #20
 8004b48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004b4c:	4413      	add	r3, r2
 8004b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b50:	4bce      	ldr	r3, [pc, #824]	; (8004e8c <__ieee754_pow+0x724>)
 8004b52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004b60:	dd08      	ble.n	8004b74 <__ieee754_pow+0x40c>
 8004b62:	4bcb      	ldr	r3, [pc, #812]	; (8004e90 <__ieee754_pow+0x728>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	f340 815e 	ble.w	8004e26 <__ieee754_pow+0x6be>
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004b74:	f04f 0a00 	mov.w	sl, #0
 8004b78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8004b7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b80:	4bc4      	ldr	r3, [pc, #784]	; (8004e94 <__ieee754_pow+0x72c>)
 8004b82:	4413      	add	r3, r2
 8004b84:	ed93 7b00 	vldr	d7, [r3]
 8004b88:	4629      	mov	r1, r5
 8004b8a:	ec53 2b17 	vmov	r2, r3, d7
 8004b8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b92:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b96:	f7fb fb23 	bl	80001e0 <__aeabi_dsub>
 8004b9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460f      	mov	r7, r1
 8004ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ba6:	f7fb fb1d 	bl	80001e4 <__adddf3>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	2000      	movs	r0, #0
 8004bb0:	49b9      	ldr	r1, [pc, #740]	; (8004e98 <__ieee754_pow+0x730>)
 8004bb2:	f7fb fdf7 	bl	80007a4 <__aeabi_ddiv>
 8004bb6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	f7fb fcc5 	bl	8000550 <__aeabi_dmul>
 8004bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004bce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9302      	str	r3, [sp, #8]
 8004bd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004bda:	106d      	asrs	r5, r5, #1
 8004bdc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004be0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004be4:	2200      	movs	r2, #0
 8004be6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004bea:	4640      	mov	r0, r8
 8004bec:	4649      	mov	r1, r9
 8004bee:	4614      	mov	r4, r2
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	f7fb fcad 	bl	8000550 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb faef 	bl	80001e0 <__aeabi_dsub>
 8004c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb fae7 	bl	80001e0 <__aeabi_dsub>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c1a:	f7fb fae1 	bl	80001e0 <__aeabi_dsub>
 8004c1e:	4642      	mov	r2, r8
 8004c20:	464b      	mov	r3, r9
 8004c22:	f7fb fc95 	bl	8000550 <__aeabi_dmul>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	f7fb fad7 	bl	80001e0 <__aeabi_dsub>
 8004c32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c36:	f7fb fc8b 	bl	8000550 <__aeabi_dmul>
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb fc83 	bl	8000550 <__aeabi_dmul>
 8004c4a:	a37b      	add	r3, pc, #492	; (adr r3, 8004e38 <__ieee754_pow+0x6d0>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	4604      	mov	r4, r0
 8004c52:	460d      	mov	r5, r1
 8004c54:	f7fb fc7c 	bl	8000550 <__aeabi_dmul>
 8004c58:	a379      	add	r3, pc, #484	; (adr r3, 8004e40 <__ieee754_pow+0x6d8>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fac1 	bl	80001e4 <__adddf3>
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	a377      	add	r3, pc, #476	; (adr r3, 8004e48 <__ieee754_pow+0x6e0>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fab8 	bl	80001e4 <__adddf3>
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	f7fb fc6a 	bl	8000550 <__aeabi_dmul>
 8004c7c:	a374      	add	r3, pc, #464	; (adr r3, 8004e50 <__ieee754_pow+0x6e8>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb faaf 	bl	80001e4 <__adddf3>
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fc61 	bl	8000550 <__aeabi_dmul>
 8004c8e:	a372      	add	r3, pc, #456	; (adr r3, 8004e58 <__ieee754_pow+0x6f0>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb faa6 	bl	80001e4 <__adddf3>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	f7fb fc58 	bl	8000550 <__aeabi_dmul>
 8004ca0:	a36f      	add	r3, pc, #444	; (adr r3, 8004e60 <__ieee754_pow+0x6f8>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fa9d 	bl	80001e4 <__adddf3>
 8004caa:	4622      	mov	r2, r4
 8004cac:	4606      	mov	r6, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fc4b 	bl	8000550 <__aeabi_dmul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	f7fb fc45 	bl	8000550 <__aeabi_dmul>
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	464b      	mov	r3, r9
 8004cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd2:	f7fb fa87 	bl	80001e4 <__adddf3>
 8004cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cda:	f7fb fc39 	bl	8000550 <__aeabi_dmul>
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f7fb fa7f 	bl	80001e4 <__adddf3>
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	4606      	mov	r6, r0
 8004cea:	460f      	mov	r7, r1
 8004cec:	464b      	mov	r3, r9
 8004cee:	4640      	mov	r0, r8
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f7fb fc2d 	bl	8000550 <__aeabi_dmul>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <__ieee754_pow+0x734>)
 8004cfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cfe:	f7fb fa71 	bl	80001e4 <__adddf3>
 8004d02:	4632      	mov	r2, r6
 8004d04:	463b      	mov	r3, r7
 8004d06:	f7fb fa6d 	bl	80001e4 <__adddf3>
 8004d0a:	9802      	ldr	r0, [sp, #8]
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4640      	mov	r0, r8
 8004d16:	4649      	mov	r1, r9
 8004d18:	f7fb fc1a 	bl	8000550 <__aeabi_dmul>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4680      	mov	r8, r0
 8004d20:	4689      	mov	r9, r1
 8004d22:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <__ieee754_pow+0x734>)
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fa5a 	bl	80001e0 <__aeabi_dsub>
 8004d2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d30:	f7fb fa56 	bl	80001e0 <__aeabi_dsub>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4630      	mov	r0, r6
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	f7fb fa50 	bl	80001e0 <__aeabi_dsub>
 8004d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d44:	f7fb fc04 	bl	8000550 <__aeabi_dmul>
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	460f      	mov	r7, r1
 8004d4e:	462b      	mov	r3, r5
 8004d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d54:	f7fb fbfc 	bl	8000550 <__aeabi_dmul>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fa40 	bl	80001e4 <__adddf3>
 8004d64:	4606      	mov	r6, r0
 8004d66:	460f      	mov	r7, r1
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	f7fb fa38 	bl	80001e4 <__adddf3>
 8004d74:	9802      	ldr	r0, [sp, #8]
 8004d76:	a33c      	add	r3, pc, #240	; (adr r3, 8004e68 <__ieee754_pow+0x700>)
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	460d      	mov	r5, r1
 8004d80:	f7fb fbe6 	bl	8000550 <__aeabi_dmul>
 8004d84:	4642      	mov	r2, r8
 8004d86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa26 	bl	80001e0 <__aeabi_dsub>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f7fb fa20 	bl	80001e0 <__aeabi_dsub>
 8004da0:	a333      	add	r3, pc, #204	; (adr r3, 8004e70 <__ieee754_pow+0x708>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fbd3 	bl	8000550 <__aeabi_dmul>
 8004daa:	a333      	add	r3, pc, #204	; (adr r3, 8004e78 <__ieee754_pow+0x710>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	4606      	mov	r6, r0
 8004db2:	460f      	mov	r7, r1
 8004db4:	4620      	mov	r0, r4
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7fb fbca 	bl	8000550 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fa0e 	bl	80001e4 <__adddf3>
 8004dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dca:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <__ieee754_pow+0x738>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fa07 	bl	80001e4 <__adddf3>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dda:	460d      	mov	r5, r1
 8004ddc:	f7fb fb4e 	bl	800047c <__aeabi_i2d>
 8004de0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004de2:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <__ieee754_pow+0x73c>)
 8004de4:	4413      	add	r3, r2
 8004de6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004df6:	f7fb f9f5 	bl	80001e4 <__adddf3>
 8004dfa:	4642      	mov	r2, r8
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	f7fb f9f1 	bl	80001e4 <__adddf3>
 8004e02:	4632      	mov	r2, r6
 8004e04:	463b      	mov	r3, r7
 8004e06:	f7fb f9ed 	bl	80001e4 <__adddf3>
 8004e0a:	9802      	ldr	r0, [sp, #8]
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e14:	f7fb f9e4 	bl	80001e0 <__aeabi_dsub>
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f7fb f9e0 	bl	80001e0 <__aeabi_dsub>
 8004e20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e24:	e607      	b.n	8004a36 <__ieee754_pow+0x2ce>
 8004e26:	f04f 0a01 	mov.w	sl, #1
 8004e2a:	e6a5      	b.n	8004b78 <__ieee754_pow+0x410>
 8004e2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004e80 <__ieee754_pow+0x718>
 8004e30:	e613      	b.n	8004a5a <__ieee754_pow+0x2f2>
 8004e32:	bf00      	nop
 8004e34:	f3af 8000 	nop.w
 8004e38:	4a454eef 	.word	0x4a454eef
 8004e3c:	3fca7e28 	.word	0x3fca7e28
 8004e40:	93c9db65 	.word	0x93c9db65
 8004e44:	3fcd864a 	.word	0x3fcd864a
 8004e48:	a91d4101 	.word	0xa91d4101
 8004e4c:	3fd17460 	.word	0x3fd17460
 8004e50:	518f264d 	.word	0x518f264d
 8004e54:	3fd55555 	.word	0x3fd55555
 8004e58:	db6fabff 	.word	0xdb6fabff
 8004e5c:	3fdb6db6 	.word	0x3fdb6db6
 8004e60:	33333303 	.word	0x33333303
 8004e64:	3fe33333 	.word	0x3fe33333
 8004e68:	e0000000 	.word	0xe0000000
 8004e6c:	3feec709 	.word	0x3feec709
 8004e70:	dc3a03fd 	.word	0xdc3a03fd
 8004e74:	3feec709 	.word	0x3feec709
 8004e78:	145b01f5 	.word	0x145b01f5
 8004e7c:	be3e2fe0 	.word	0xbe3e2fe0
 8004e80:	00000000 	.word	0x00000000
 8004e84:	3ff00000 	.word	0x3ff00000
 8004e88:	43400000 	.word	0x43400000
 8004e8c:	0003988e 	.word	0x0003988e
 8004e90:	000bb679 	.word	0x000bb679
 8004e94:	08006738 	.word	0x08006738
 8004e98:	3ff00000 	.word	0x3ff00000
 8004e9c:	40080000 	.word	0x40080000
 8004ea0:	08006758 	.word	0x08006758
 8004ea4:	08006748 	.word	0x08006748
 8004ea8:	a3b4      	add	r3, pc, #720	; (adr r3, 800517c <__ieee754_pow+0xa14>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb f997 	bl	80001e4 <__adddf3>
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb f98d 	bl	80001e0 <__aeabi_dsub>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ece:	f7fb fdcf 	bl	8000a70 <__aeabi_dcmpgt>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f47f adfe 	bne.w	8004ad4 <__ieee754_pow+0x36c>
 8004ed8:	4aa3      	ldr	r2, [pc, #652]	; (8005168 <__ieee754_pow+0xa00>)
 8004eda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f340 810a 	ble.w	80050f8 <__ieee754_pow+0x990>
 8004ee4:	151b      	asrs	r3, r3, #20
 8004ee6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004eea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004eee:	fa4a f303 	asr.w	r3, sl, r3
 8004ef2:	445b      	add	r3, fp
 8004ef4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004ef8:	4e9c      	ldr	r6, [pc, #624]	; (800516c <__ieee754_pow+0xa04>)
 8004efa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004efe:	4116      	asrs	r6, r2
 8004f00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004f04:	2000      	movs	r0, #0
 8004f06:	ea23 0106 	bic.w	r1, r3, r6
 8004f0a:	f1c2 0214 	rsb	r2, r2, #20
 8004f0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004f12:	fa4a fa02 	asr.w	sl, sl, r2
 8004f16:	f1bb 0f00 	cmp.w	fp, #0
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	bfb8      	it	lt
 8004f24:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_dsub>
 8004f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f38:	f7fb f954 	bl	80001e4 <__adddf3>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	a378      	add	r3, pc, #480	; (adr r3, 8005120 <__ieee754_pow+0x9b8>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	f7fb fb02 	bl	8000550 <__aeabi_dmul>
 8004f4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f50:	4606      	mov	r6, r0
 8004f52:	460f      	mov	r7, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb f942 	bl	80001e0 <__aeabi_dsub>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb f93c 	bl	80001e0 <__aeabi_dsub>
 8004f68:	a36f      	add	r3, pc, #444	; (adr r3, 8005128 <__ieee754_pow+0x9c0>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb faef 	bl	8000550 <__aeabi_dmul>
 8004f72:	a36f      	add	r3, pc, #444	; (adr r3, 8005130 <__ieee754_pow+0x9c8>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4689      	mov	r9, r1
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb fae6 	bl	8000550 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb f92a 	bl	80001e4 <__adddf3>
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb f922 	bl	80001e4 <__adddf3>
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	4689      	mov	r9, r1
 8004fa8:	f7fb f91a 	bl	80001e0 <__aeabi_dsub>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f7fb f914 	bl	80001e0 <__aeabi_dsub>
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	f7fb fac4 	bl	8000550 <__aeabi_dmul>
 8004fc8:	a35b      	add	r3, pc, #364	; (adr r3, 8005138 <__ieee754_pow+0x9d0>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	4604      	mov	r4, r0
 8004fd0:	460d      	mov	r5, r1
 8004fd2:	f7fb fabd 	bl	8000550 <__aeabi_dmul>
 8004fd6:	a35a      	add	r3, pc, #360	; (adr r3, 8005140 <__ieee754_pow+0x9d8>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f7fb f900 	bl	80001e0 <__aeabi_dsub>
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	f7fb fab4 	bl	8000550 <__aeabi_dmul>
 8004fe8:	a357      	add	r3, pc, #348	; (adr r3, 8005148 <__ieee754_pow+0x9e0>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb f8f9 	bl	80001e4 <__adddf3>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	f7fb faab 	bl	8000550 <__aeabi_dmul>
 8004ffa:	a355      	add	r3, pc, #340	; (adr r3, 8005150 <__ieee754_pow+0x9e8>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb f8ee 	bl	80001e0 <__aeabi_dsub>
 8005004:	4622      	mov	r2, r4
 8005006:	462b      	mov	r3, r5
 8005008:	f7fb faa2 	bl	8000550 <__aeabi_dmul>
 800500c:	a352      	add	r3, pc, #328	; (adr r3, 8005158 <__ieee754_pow+0x9f0>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb f8e7 	bl	80001e4 <__adddf3>
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f7fb fa99 	bl	8000550 <__aeabi_dmul>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4640      	mov	r0, r8
 8005024:	4649      	mov	r1, r9
 8005026:	f7fb f8db 	bl	80001e0 <__aeabi_dsub>
 800502a:	4604      	mov	r4, r0
 800502c:	460d      	mov	r5, r1
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4640      	mov	r0, r8
 8005034:	4649      	mov	r1, r9
 8005036:	f7fb fa8b 	bl	8000550 <__aeabi_dmul>
 800503a:	2200      	movs	r2, #0
 800503c:	e9cd 0100 	strd	r0, r1, [sp]
 8005040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f8ca 	bl	80001e0 <__aeabi_dsub>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005054:	f7fb fba6 	bl	80007a4 <__aeabi_ddiv>
 8005058:	4632      	mov	r2, r6
 800505a:	4604      	mov	r4, r0
 800505c:	460d      	mov	r5, r1
 800505e:	463b      	mov	r3, r7
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb fa74 	bl	8000550 <__aeabi_dmul>
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	f7fb f8ba 	bl	80001e4 <__adddf3>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb f8b2 	bl	80001e0 <__aeabi_dsub>
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	f7fb f8ae 	bl	80001e0 <__aeabi_dsub>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	2000      	movs	r0, #0
 800508a:	4939      	ldr	r1, [pc, #228]	; (8005170 <__ieee754_pow+0xa08>)
 800508c:	f7fb f8a8 	bl	80001e0 <__aeabi_dsub>
 8005090:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005094:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	da2f      	bge.n	80050fe <__ieee754_pow+0x996>
 800509e:	4650      	mov	r0, sl
 80050a0:	ec43 2b10 	vmov	d0, r2, r3
 80050a4:	f001 faa0 	bl	80065e8 <scalbn>
 80050a8:	ec51 0b10 	vmov	r0, r1, d0
 80050ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050b0:	f7ff bbf1 	b.w	8004896 <__ieee754_pow+0x12e>
 80050b4:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <__ieee754_pow+0xa0c>)
 80050b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80050ba:	429e      	cmp	r6, r3
 80050bc:	f77f af0c 	ble.w	8004ed8 <__ieee754_pow+0x770>
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <__ieee754_pow+0xa10>)
 80050c2:	440b      	add	r3, r1
 80050c4:	4303      	orrs	r3, r0
 80050c6:	d00b      	beq.n	80050e0 <__ieee754_pow+0x978>
 80050c8:	a325      	add	r3, pc, #148	; (adr r3, 8005160 <__ieee754_pow+0x9f8>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d2:	f7fb fa3d 	bl	8000550 <__aeabi_dmul>
 80050d6:	a322      	add	r3, pc, #136	; (adr r3, 8005160 <__ieee754_pow+0x9f8>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7ff bbdb 	b.w	8004896 <__ieee754_pow+0x12e>
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	f7fb f87c 	bl	80001e0 <__aeabi_dsub>
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	f7fb fcb6 	bl	8000a5c <__aeabi_dcmpge>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f43f aef1 	beq.w	8004ed8 <__ieee754_pow+0x770>
 80050f6:	e7e7      	b.n	80050c8 <__ieee754_pow+0x960>
 80050f8:	f04f 0a00 	mov.w	sl, #0
 80050fc:	e718      	b.n	8004f30 <__ieee754_pow+0x7c8>
 80050fe:	4621      	mov	r1, r4
 8005100:	e7d4      	b.n	80050ac <__ieee754_pow+0x944>
 8005102:	2000      	movs	r0, #0
 8005104:	491a      	ldr	r1, [pc, #104]	; (8005170 <__ieee754_pow+0xa08>)
 8005106:	f7ff bb8f 	b.w	8004828 <__ieee754_pow+0xc0>
 800510a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800510e:	f7ff bb8b 	b.w	8004828 <__ieee754_pow+0xc0>
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7ff bb87 	b.w	8004828 <__ieee754_pow+0xc0>
 800511a:	4693      	mov	fp, r2
 800511c:	f7ff bb98 	b.w	8004850 <__ieee754_pow+0xe8>
 8005120:	00000000 	.word	0x00000000
 8005124:	3fe62e43 	.word	0x3fe62e43
 8005128:	fefa39ef 	.word	0xfefa39ef
 800512c:	3fe62e42 	.word	0x3fe62e42
 8005130:	0ca86c39 	.word	0x0ca86c39
 8005134:	be205c61 	.word	0xbe205c61
 8005138:	72bea4d0 	.word	0x72bea4d0
 800513c:	3e663769 	.word	0x3e663769
 8005140:	c5d26bf1 	.word	0xc5d26bf1
 8005144:	3ebbbd41 	.word	0x3ebbbd41
 8005148:	af25de2c 	.word	0xaf25de2c
 800514c:	3f11566a 	.word	0x3f11566a
 8005150:	16bebd93 	.word	0x16bebd93
 8005154:	3f66c16c 	.word	0x3f66c16c
 8005158:	5555553e 	.word	0x5555553e
 800515c:	3fc55555 	.word	0x3fc55555
 8005160:	c2f8f359 	.word	0xc2f8f359
 8005164:	01a56e1f 	.word	0x01a56e1f
 8005168:	3fe00000 	.word	0x3fe00000
 800516c:	000fffff 	.word	0x000fffff
 8005170:	3ff00000 	.word	0x3ff00000
 8005174:	4090cbff 	.word	0x4090cbff
 8005178:	3f6f3400 	.word	0x3f6f3400
 800517c:	652b82fe 	.word	0x652b82fe
 8005180:	3c971547 	.word	0x3c971547
 8005184:	00000000 	.word	0x00000000

08005188 <__ieee754_rem_pio2>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ec57 6b10 	vmov	r6, r7, d0
 8005190:	4bc3      	ldr	r3, [pc, #780]	; (80054a0 <__ieee754_rem_pio2+0x318>)
 8005192:	b08d      	sub	sp, #52	; 0x34
 8005194:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005198:	4598      	cmp	r8, r3
 800519a:	4604      	mov	r4, r0
 800519c:	9704      	str	r7, [sp, #16]
 800519e:	dc07      	bgt.n	80051b0 <__ieee754_rem_pio2+0x28>
 80051a0:	2200      	movs	r2, #0
 80051a2:	2300      	movs	r3, #0
 80051a4:	ed84 0b00 	vstr	d0, [r4]
 80051a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051ac:	2500      	movs	r5, #0
 80051ae:	e027      	b.n	8005200 <__ieee754_rem_pio2+0x78>
 80051b0:	4bbc      	ldr	r3, [pc, #752]	; (80054a4 <__ieee754_rem_pio2+0x31c>)
 80051b2:	4598      	cmp	r8, r3
 80051b4:	dc75      	bgt.n	80052a2 <__ieee754_rem_pio2+0x11a>
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	4dbb      	ldr	r5, [pc, #748]	; (80054a8 <__ieee754_rem_pio2+0x320>)
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	ee10 0a10 	vmov	r0, s0
 80051c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005468 <__ieee754_rem_pio2+0x2e0>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	4639      	mov	r1, r7
 80051c8:	dd36      	ble.n	8005238 <__ieee754_rem_pio2+0xb0>
 80051ca:	f7fb f809 	bl	80001e0 <__aeabi_dsub>
 80051ce:	45a8      	cmp	r8, r5
 80051d0:	4606      	mov	r6, r0
 80051d2:	460f      	mov	r7, r1
 80051d4:	d018      	beq.n	8005208 <__ieee754_rem_pio2+0x80>
 80051d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e8>)
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f7fb f800 	bl	80001e0 <__aeabi_dsub>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	e9c4 2300 	strd	r2, r3, [r4]
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fa fff8 	bl	80001e0 <__aeabi_dsub>
 80051f0:	a39f      	add	r3, pc, #636	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e8>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fa fff3 	bl	80001e0 <__aeabi_dsub>
 80051fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051fe:	2501      	movs	r5, #1
 8005200:	4628      	mov	r0, r5
 8005202:	b00d      	add	sp, #52	; 0x34
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	a39b      	add	r3, pc, #620	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2f0>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fa ffe7 	bl	80001e0 <__aeabi_dsub>
 8005212:	a39b      	add	r3, pc, #620	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f8>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	4606      	mov	r6, r0
 800521a:	460f      	mov	r7, r1
 800521c:	f7fa ffe0 	bl	80001e0 <__aeabi_dsub>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	e9c4 2300 	strd	r2, r3, [r4]
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fa ffd8 	bl	80001e0 <__aeabi_dsub>
 8005230:	a393      	add	r3, pc, #588	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f8>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	e7de      	b.n	80051f6 <__ieee754_rem_pio2+0x6e>
 8005238:	f7fa ffd4 	bl	80001e4 <__adddf3>
 800523c:	45a8      	cmp	r8, r5
 800523e:	4606      	mov	r6, r0
 8005240:	460f      	mov	r7, r1
 8005242:	d016      	beq.n	8005272 <__ieee754_rem_pio2+0xea>
 8005244:	a38a      	add	r3, pc, #552	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e8>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7fa ffcb 	bl	80001e4 <__adddf3>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9c4 2300 	strd	r2, r3, [r4]
 8005256:	4630      	mov	r0, r6
 8005258:	4639      	mov	r1, r7
 800525a:	f7fa ffc1 	bl	80001e0 <__aeabi_dsub>
 800525e:	a384      	add	r3, pc, #528	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e8>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fa ffbe 	bl	80001e4 <__adddf3>
 8005268:	f04f 35ff 	mov.w	r5, #4294967295
 800526c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005270:	e7c6      	b.n	8005200 <__ieee754_rem_pio2+0x78>
 8005272:	a381      	add	r3, pc, #516	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2f0>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fa ffb4 	bl	80001e4 <__adddf3>
 800527c:	a380      	add	r3, pc, #512	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f8>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	f7fa ffad 	bl	80001e4 <__adddf3>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	e9c4 2300 	strd	r2, r3, [r4]
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fa ffa3 	bl	80001e0 <__aeabi_dsub>
 800529a:	a379      	add	r3, pc, #484	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f8>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	e7e0      	b.n	8005264 <__ieee754_rem_pio2+0xdc>
 80052a2:	4b82      	ldr	r3, [pc, #520]	; (80054ac <__ieee754_rem_pio2+0x324>)
 80052a4:	4598      	cmp	r8, r3
 80052a6:	f300 80d0 	bgt.w	800544a <__ieee754_rem_pio2+0x2c2>
 80052aa:	f001 f875 	bl	8006398 <fabs>
 80052ae:	ec57 6b10 	vmov	r6, r7, d0
 80052b2:	ee10 0a10 	vmov	r0, s0
 80052b6:	a374      	add	r3, pc, #464	; (adr r3, 8005488 <__ieee754_rem_pio2+0x300>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	4639      	mov	r1, r7
 80052be:	f7fb f947 	bl	8000550 <__aeabi_dmul>
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b7a      	ldr	r3, [pc, #488]	; (80054b0 <__ieee754_rem_pio2+0x328>)
 80052c6:	f7fa ff8d 	bl	80001e4 <__adddf3>
 80052ca:	f7fb fbf1 	bl	8000ab0 <__aeabi_d2iz>
 80052ce:	4605      	mov	r5, r0
 80052d0:	f7fb f8d4 	bl	800047c <__aeabi_i2d>
 80052d4:	a364      	add	r3, pc, #400	; (adr r3, 8005468 <__ieee754_rem_pio2+0x2e0>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052de:	f7fb f937 	bl	8000550 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fa ff79 	bl	80001e0 <__aeabi_dsub>
 80052ee:	a360      	add	r3, pc, #384	; (adr r3, 8005470 <__ieee754_rem_pio2+0x2e8>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	4682      	mov	sl, r0
 80052f6:	468b      	mov	fp, r1
 80052f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fc:	f7fb f928 	bl	8000550 <__aeabi_dmul>
 8005300:	2d1f      	cmp	r5, #31
 8005302:	4606      	mov	r6, r0
 8005304:	460f      	mov	r7, r1
 8005306:	dc0c      	bgt.n	8005322 <__ieee754_rem_pio2+0x19a>
 8005308:	1e6a      	subs	r2, r5, #1
 800530a:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <__ieee754_rem_pio2+0x32c>)
 800530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005310:	4543      	cmp	r3, r8
 8005312:	d006      	beq.n	8005322 <__ieee754_rem_pio2+0x19a>
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4650      	mov	r0, sl
 800531a:	4659      	mov	r1, fp
 800531c:	f7fa ff60 	bl	80001e0 <__aeabi_dsub>
 8005320:	e00e      	b.n	8005340 <__ieee754_rem_pio2+0x1b8>
 8005322:	4632      	mov	r2, r6
 8005324:	463b      	mov	r3, r7
 8005326:	4650      	mov	r0, sl
 8005328:	4659      	mov	r1, fp
 800532a:	f7fa ff59 	bl	80001e0 <__aeabi_dsub>
 800532e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	9a05      	ldr	r2, [sp, #20]
 8005336:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b10      	cmp	r3, #16
 800533e:	dc02      	bgt.n	8005346 <__ieee754_rem_pio2+0x1be>
 8005340:	e9c4 0100 	strd	r0, r1, [r4]
 8005344:	e039      	b.n	80053ba <__ieee754_rem_pio2+0x232>
 8005346:	a34c      	add	r3, pc, #304	; (adr r3, 8005478 <__ieee754_rem_pio2+0x2f0>)
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005350:	f7fb f8fe 	bl	8000550 <__aeabi_dmul>
 8005354:	4606      	mov	r6, r0
 8005356:	460f      	mov	r7, r1
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	f7fa ff3e 	bl	80001e0 <__aeabi_dsub>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4680      	mov	r8, r0
 800536a:	4689      	mov	r9, r1
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f7fa ff36 	bl	80001e0 <__aeabi_dsub>
 8005374:	4632      	mov	r2, r6
 8005376:	463b      	mov	r3, r7
 8005378:	f7fa ff32 	bl	80001e0 <__aeabi_dsub>
 800537c:	a340      	add	r3, pc, #256	; (adr r3, 8005480 <__ieee754_rem_pio2+0x2f8>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	4606      	mov	r6, r0
 8005384:	460f      	mov	r7, r1
 8005386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538a:	f7fb f8e1 	bl	8000550 <__aeabi_dmul>
 800538e:	4632      	mov	r2, r6
 8005390:	463b      	mov	r3, r7
 8005392:	f7fa ff25 	bl	80001e0 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4606      	mov	r6, r0
 800539c:	460f      	mov	r7, r1
 800539e:	4640      	mov	r0, r8
 80053a0:	4649      	mov	r1, r9
 80053a2:	f7fa ff1d 	bl	80001e0 <__aeabi_dsub>
 80053a6:	9a05      	ldr	r2, [sp, #20]
 80053a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b31      	cmp	r3, #49	; 0x31
 80053b0:	dc20      	bgt.n	80053f4 <__ieee754_rem_pio2+0x26c>
 80053b2:	e9c4 0100 	strd	r0, r1, [r4]
 80053b6:	46c2      	mov	sl, r8
 80053b8:	46cb      	mov	fp, r9
 80053ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053be:	4650      	mov	r0, sl
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	4659      	mov	r1, fp
 80053c6:	f7fa ff0b 	bl	80001e0 <__aeabi_dsub>
 80053ca:	463b      	mov	r3, r7
 80053cc:	4632      	mov	r2, r6
 80053ce:	f7fa ff07 	bl	80001e0 <__aeabi_dsub>
 80053d2:	9b04      	ldr	r3, [sp, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053da:	f6bf af11 	bge.w	8005200 <__ieee754_rem_pio2+0x78>
 80053de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	f8c4 8000 	str.w	r8, [r4]
 80053e8:	60a0      	str	r0, [r4, #8]
 80053ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ee:	60e3      	str	r3, [r4, #12]
 80053f0:	426d      	negs	r5, r5
 80053f2:	e705      	b.n	8005200 <__ieee754_rem_pio2+0x78>
 80053f4:	a326      	add	r3, pc, #152	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053fe:	f7fb f8a7 	bl	8000550 <__aeabi_dmul>
 8005402:	4606      	mov	r6, r0
 8005404:	460f      	mov	r7, r1
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fa fee7 	bl	80001e0 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4682      	mov	sl, r0
 8005418:	468b      	mov	fp, r1
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f7fa fedf 	bl	80001e0 <__aeabi_dsub>
 8005422:	4632      	mov	r2, r6
 8005424:	463b      	mov	r3, r7
 8005426:	f7fa fedb 	bl	80001e0 <__aeabi_dsub>
 800542a:	a31b      	add	r3, pc, #108	; (adr r3, 8005498 <__ieee754_rem_pio2+0x310>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	4606      	mov	r6, r0
 8005432:	460f      	mov	r7, r1
 8005434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005438:	f7fb f88a 	bl	8000550 <__aeabi_dmul>
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	f7fa fece 	bl	80001e0 <__aeabi_dsub>
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	e764      	b.n	8005314 <__ieee754_rem_pio2+0x18c>
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <__ieee754_rem_pio2+0x330>)
 800544c:	4598      	cmp	r8, r3
 800544e:	dd35      	ble.n	80054bc <__ieee754_rem_pio2+0x334>
 8005450:	ee10 2a10 	vmov	r2, s0
 8005454:	463b      	mov	r3, r7
 8005456:	4630      	mov	r0, r6
 8005458:	4639      	mov	r1, r7
 800545a:	f7fa fec1 	bl	80001e0 <__aeabi_dsub>
 800545e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005462:	e9c4 0100 	strd	r0, r1, [r4]
 8005466:	e6a1      	b.n	80051ac <__ieee754_rem_pio2+0x24>
 8005468:	54400000 	.word	0x54400000
 800546c:	3ff921fb 	.word	0x3ff921fb
 8005470:	1a626331 	.word	0x1a626331
 8005474:	3dd0b461 	.word	0x3dd0b461
 8005478:	1a600000 	.word	0x1a600000
 800547c:	3dd0b461 	.word	0x3dd0b461
 8005480:	2e037073 	.word	0x2e037073
 8005484:	3ba3198a 	.word	0x3ba3198a
 8005488:	6dc9c883 	.word	0x6dc9c883
 800548c:	3fe45f30 	.word	0x3fe45f30
 8005490:	2e000000 	.word	0x2e000000
 8005494:	3ba3198a 	.word	0x3ba3198a
 8005498:	252049c1 	.word	0x252049c1
 800549c:	397b839a 	.word	0x397b839a
 80054a0:	3fe921fb 	.word	0x3fe921fb
 80054a4:	4002d97b 	.word	0x4002d97b
 80054a8:	3ff921fb 	.word	0x3ff921fb
 80054ac:	413921fb 	.word	0x413921fb
 80054b0:	3fe00000 	.word	0x3fe00000
 80054b4:	08006768 	.word	0x08006768
 80054b8:	7fefffff 	.word	0x7fefffff
 80054bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80054c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80054c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80054c8:	4630      	mov	r0, r6
 80054ca:	460f      	mov	r7, r1
 80054cc:	f7fb faf0 	bl	8000ab0 <__aeabi_d2iz>
 80054d0:	f7fa ffd4 	bl	800047c <__aeabi_i2d>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054e0:	f7fa fe7e 	bl	80001e0 <__aeabi_dsub>
 80054e4:	2200      	movs	r2, #0
 80054e6:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <__ieee754_rem_pio2+0x3dc>)
 80054e8:	f7fb f832 	bl	8000550 <__aeabi_dmul>
 80054ec:	460f      	mov	r7, r1
 80054ee:	4606      	mov	r6, r0
 80054f0:	f7fb fade 	bl	8000ab0 <__aeabi_d2iz>
 80054f4:	f7fa ffc2 	bl	800047c <__aeabi_i2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005504:	f7fa fe6c 	bl	80001e0 <__aeabi_dsub>
 8005508:	2200      	movs	r2, #0
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <__ieee754_rem_pio2+0x3dc>)
 800550c:	f7fb f820 	bl	8000550 <__aeabi_dmul>
 8005510:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005514:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005518:	f04f 0803 	mov.w	r8, #3
 800551c:	2600      	movs	r6, #0
 800551e:	2700      	movs	r7, #0
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005528:	f108 3aff 	add.w	sl, r8, #4294967295
 800552c:	f7fb fa78 	bl	8000a20 <__aeabi_dcmpeq>
 8005530:	b9b0      	cbnz	r0, 8005560 <__ieee754_rem_pio2+0x3d8>
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <__ieee754_rem_pio2+0x3e0>)
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	2302      	movs	r3, #2
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	462a      	mov	r2, r5
 800553c:	4643      	mov	r3, r8
 800553e:	4621      	mov	r1, r4
 8005540:	a806      	add	r0, sp, #24
 8005542:	f000 f98d 	bl	8005860 <__kernel_rem_pio2>
 8005546:	9b04      	ldr	r3, [sp, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	4605      	mov	r5, r0
 800554c:	f6bf ae58 	bge.w	8005200 <__ieee754_rem_pio2+0x78>
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005556:	6063      	str	r3, [r4, #4]
 8005558:	68e3      	ldr	r3, [r4, #12]
 800555a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800555e:	e746      	b.n	80053ee <__ieee754_rem_pio2+0x266>
 8005560:	46d0      	mov	r8, sl
 8005562:	e7dd      	b.n	8005520 <__ieee754_rem_pio2+0x398>
 8005564:	41700000 	.word	0x41700000
 8005568:	080067e8 	.word	0x080067e8

0800556c <__ieee754_sqrt>:
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	4955      	ldr	r1, [pc, #340]	; (80056c8 <__ieee754_sqrt+0x15c>)
 8005572:	ec55 4b10 	vmov	r4, r5, d0
 8005576:	43a9      	bics	r1, r5
 8005578:	462b      	mov	r3, r5
 800557a:	462a      	mov	r2, r5
 800557c:	d112      	bne.n	80055a4 <__ieee754_sqrt+0x38>
 800557e:	ee10 2a10 	vmov	r2, s0
 8005582:	ee10 0a10 	vmov	r0, s0
 8005586:	4629      	mov	r1, r5
 8005588:	f7fa ffe2 	bl	8000550 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f7fa fe26 	bl	80001e4 <__adddf3>
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	ec45 4b10 	vmov	d0, r4, r5
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	ee10 0a10 	vmov	r0, s0
 80055aa:	4621      	mov	r1, r4
 80055ac:	dc0f      	bgt.n	80055ce <__ieee754_sqrt+0x62>
 80055ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80055b2:	4330      	orrs	r0, r6
 80055b4:	d0f2      	beq.n	800559c <__ieee754_sqrt+0x30>
 80055b6:	b155      	cbz	r5, 80055ce <__ieee754_sqrt+0x62>
 80055b8:	ee10 2a10 	vmov	r2, s0
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	f7fa fe0e 	bl	80001e0 <__aeabi_dsub>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	f7fb f8ec 	bl	80007a4 <__aeabi_ddiv>
 80055cc:	e7e4      	b.n	8005598 <__ieee754_sqrt+0x2c>
 80055ce:	151b      	asrs	r3, r3, #20
 80055d0:	d073      	beq.n	80056ba <__ieee754_sqrt+0x14e>
 80055d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80055d6:	07dd      	lsls	r5, r3, #31
 80055d8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80055dc:	bf48      	it	mi
 80055de:	0fc8      	lsrmi	r0, r1, #31
 80055e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055e4:	bf44      	itt	mi
 80055e6:	0049      	lslmi	r1, r1, #1
 80055e8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80055ec:	2500      	movs	r5, #0
 80055ee:	1058      	asrs	r0, r3, #1
 80055f0:	0fcb      	lsrs	r3, r1, #31
 80055f2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80055f6:	0049      	lsls	r1, r1, #1
 80055f8:	2316      	movs	r3, #22
 80055fa:	462c      	mov	r4, r5
 80055fc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005600:	19a7      	adds	r7, r4, r6
 8005602:	4297      	cmp	r7, r2
 8005604:	bfde      	ittt	le
 8005606:	19bc      	addle	r4, r7, r6
 8005608:	1bd2      	suble	r2, r2, r7
 800560a:	19ad      	addle	r5, r5, r6
 800560c:	0fcf      	lsrs	r7, r1, #31
 800560e:	3b01      	subs	r3, #1
 8005610:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005614:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005618:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800561c:	d1f0      	bne.n	8005600 <__ieee754_sqrt+0x94>
 800561e:	f04f 0c20 	mov.w	ip, #32
 8005622:	469e      	mov	lr, r3
 8005624:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005628:	42a2      	cmp	r2, r4
 800562a:	eb06 070e 	add.w	r7, r6, lr
 800562e:	dc02      	bgt.n	8005636 <__ieee754_sqrt+0xca>
 8005630:	d112      	bne.n	8005658 <__ieee754_sqrt+0xec>
 8005632:	428f      	cmp	r7, r1
 8005634:	d810      	bhi.n	8005658 <__ieee754_sqrt+0xec>
 8005636:	2f00      	cmp	r7, #0
 8005638:	eb07 0e06 	add.w	lr, r7, r6
 800563c:	da42      	bge.n	80056c4 <__ieee754_sqrt+0x158>
 800563e:	f1be 0f00 	cmp.w	lr, #0
 8005642:	db3f      	blt.n	80056c4 <__ieee754_sqrt+0x158>
 8005644:	f104 0801 	add.w	r8, r4, #1
 8005648:	1b12      	subs	r2, r2, r4
 800564a:	428f      	cmp	r7, r1
 800564c:	bf88      	it	hi
 800564e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005652:	1bc9      	subs	r1, r1, r7
 8005654:	4433      	add	r3, r6
 8005656:	4644      	mov	r4, r8
 8005658:	0052      	lsls	r2, r2, #1
 800565a:	f1bc 0c01 	subs.w	ip, ip, #1
 800565e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005662:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005666:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800566a:	d1dd      	bne.n	8005628 <__ieee754_sqrt+0xbc>
 800566c:	430a      	orrs	r2, r1
 800566e:	d006      	beq.n	800567e <__ieee754_sqrt+0x112>
 8005670:	1c5c      	adds	r4, r3, #1
 8005672:	bf13      	iteet	ne
 8005674:	3301      	addne	r3, #1
 8005676:	3501      	addeq	r5, #1
 8005678:	4663      	moveq	r3, ip
 800567a:	f023 0301 	bicne.w	r3, r3, #1
 800567e:	106a      	asrs	r2, r5, #1
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	07e9      	lsls	r1, r5, #31
 8005684:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005688:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800568c:	bf48      	it	mi
 800568e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005692:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005696:	461c      	mov	r4, r3
 8005698:	e780      	b.n	800559c <__ieee754_sqrt+0x30>
 800569a:	0aca      	lsrs	r2, r1, #11
 800569c:	3815      	subs	r0, #21
 800569e:	0549      	lsls	r1, r1, #21
 80056a0:	2a00      	cmp	r2, #0
 80056a2:	d0fa      	beq.n	800569a <__ieee754_sqrt+0x12e>
 80056a4:	02d6      	lsls	r6, r2, #11
 80056a6:	d50a      	bpl.n	80056be <__ieee754_sqrt+0x152>
 80056a8:	f1c3 0420 	rsb	r4, r3, #32
 80056ac:	fa21 f404 	lsr.w	r4, r1, r4
 80056b0:	1e5d      	subs	r5, r3, #1
 80056b2:	4099      	lsls	r1, r3
 80056b4:	4322      	orrs	r2, r4
 80056b6:	1b43      	subs	r3, r0, r5
 80056b8:	e78b      	b.n	80055d2 <__ieee754_sqrt+0x66>
 80056ba:	4618      	mov	r0, r3
 80056bc:	e7f0      	b.n	80056a0 <__ieee754_sqrt+0x134>
 80056be:	0052      	lsls	r2, r2, #1
 80056c0:	3301      	adds	r3, #1
 80056c2:	e7ef      	b.n	80056a4 <__ieee754_sqrt+0x138>
 80056c4:	46a0      	mov	r8, r4
 80056c6:	e7bf      	b.n	8005648 <__ieee754_sqrt+0xdc>
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	00000000 	.word	0x00000000

080056d0 <__kernel_cos>:
 80056d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	ec59 8b10 	vmov	r8, r9, d0
 80056d8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80056dc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80056e0:	ed2d 8b02 	vpush	{d8}
 80056e4:	eeb0 8a41 	vmov.f32	s16, s2
 80056e8:	eef0 8a61 	vmov.f32	s17, s3
 80056ec:	da07      	bge.n	80056fe <__kernel_cos+0x2e>
 80056ee:	ee10 0a10 	vmov	r0, s0
 80056f2:	4649      	mov	r1, r9
 80056f4:	f7fb f9dc 	bl	8000ab0 <__aeabi_d2iz>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f000 8089 	beq.w	8005810 <__kernel_cos+0x140>
 80056fe:	4642      	mov	r2, r8
 8005700:	464b      	mov	r3, r9
 8005702:	4640      	mov	r0, r8
 8005704:	4649      	mov	r1, r9
 8005706:	f7fa ff23 	bl	8000550 <__aeabi_dmul>
 800570a:	2200      	movs	r2, #0
 800570c:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <__kernel_cos+0x178>)
 800570e:	4604      	mov	r4, r0
 8005710:	460d      	mov	r5, r1
 8005712:	f7fa ff1d 	bl	8000550 <__aeabi_dmul>
 8005716:	a340      	add	r3, pc, #256	; (adr r3, 8005818 <__kernel_cos+0x148>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa ff14 	bl	8000550 <__aeabi_dmul>
 8005728:	a33d      	add	r3, pc, #244	; (adr r3, 8005820 <__kernel_cos+0x150>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fd59 	bl	80001e4 <__adddf3>
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f7fa ff0b 	bl	8000550 <__aeabi_dmul>
 800573a:	a33b      	add	r3, pc, #236	; (adr r3, 8005828 <__kernel_cos+0x158>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fd4e 	bl	80001e0 <__aeabi_dsub>
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f7fa ff02 	bl	8000550 <__aeabi_dmul>
 800574c:	a338      	add	r3, pc, #224	; (adr r3, 8005830 <__kernel_cos+0x160>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd47 	bl	80001e4 <__adddf3>
 8005756:	4622      	mov	r2, r4
 8005758:	462b      	mov	r3, r5
 800575a:	f7fa fef9 	bl	8000550 <__aeabi_dmul>
 800575e:	a336      	add	r3, pc, #216	; (adr r3, 8005838 <__kernel_cos+0x168>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa fd3c 	bl	80001e0 <__aeabi_dsub>
 8005768:	4622      	mov	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f7fa fef0 	bl	8000550 <__aeabi_dmul>
 8005770:	a333      	add	r3, pc, #204	; (adr r3, 8005840 <__kernel_cos+0x170>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa fd35 	bl	80001e4 <__adddf3>
 800577a:	4622      	mov	r2, r4
 800577c:	462b      	mov	r3, r5
 800577e:	f7fa fee7 	bl	8000550 <__aeabi_dmul>
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f7fa fee3 	bl	8000550 <__aeabi_dmul>
 800578a:	ec53 2b18 	vmov	r2, r3, d8
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fa fedb 	bl	8000550 <__aeabi_dmul>
 800579a:	460b      	mov	r3, r1
 800579c:	4602      	mov	r2, r0
 800579e:	4629      	mov	r1, r5
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7fa fd1d 	bl	80001e0 <__aeabi_dsub>
 80057a6:	4b29      	ldr	r3, [pc, #164]	; (800584c <__kernel_cos+0x17c>)
 80057a8:	429e      	cmp	r6, r3
 80057aa:	4680      	mov	r8, r0
 80057ac:	4689      	mov	r9, r1
 80057ae:	dc11      	bgt.n	80057d4 <__kernel_cos+0x104>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4650      	mov	r0, sl
 80057b6:	4659      	mov	r1, fp
 80057b8:	f7fa fd12 	bl	80001e0 <__aeabi_dsub>
 80057bc:	460b      	mov	r3, r1
 80057be:	4924      	ldr	r1, [pc, #144]	; (8005850 <__kernel_cos+0x180>)
 80057c0:	4602      	mov	r2, r0
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fa fd0c 	bl	80001e0 <__aeabi_dsub>
 80057c8:	ecbd 8b02 	vpop	{d8}
 80057cc:	ec41 0b10 	vmov	d0, r0, r1
 80057d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <__kernel_cos+0x184>)
 80057d6:	491e      	ldr	r1, [pc, #120]	; (8005850 <__kernel_cos+0x180>)
 80057d8:	429e      	cmp	r6, r3
 80057da:	bfcc      	ite	gt
 80057dc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005858 <__kernel_cos+0x188>)
 80057de:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80057e2:	2400      	movs	r4, #0
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7fa fcf9 	bl	80001e0 <__aeabi_dsub>
 80057ee:	4622      	mov	r2, r4
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	462b      	mov	r3, r5
 80057f6:	4650      	mov	r0, sl
 80057f8:	4659      	mov	r1, fp
 80057fa:	f7fa fcf1 	bl	80001e0 <__aeabi_dsub>
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	f7fa fced 	bl	80001e0 <__aeabi_dsub>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4630      	mov	r0, r6
 800580c:	4639      	mov	r1, r7
 800580e:	e7d9      	b.n	80057c4 <__kernel_cos+0xf4>
 8005810:	2000      	movs	r0, #0
 8005812:	490f      	ldr	r1, [pc, #60]	; (8005850 <__kernel_cos+0x180>)
 8005814:	e7d8      	b.n	80057c8 <__kernel_cos+0xf8>
 8005816:	bf00      	nop
 8005818:	be8838d4 	.word	0xbe8838d4
 800581c:	bda8fae9 	.word	0xbda8fae9
 8005820:	bdb4b1c4 	.word	0xbdb4b1c4
 8005824:	3e21ee9e 	.word	0x3e21ee9e
 8005828:	809c52ad 	.word	0x809c52ad
 800582c:	3e927e4f 	.word	0x3e927e4f
 8005830:	19cb1590 	.word	0x19cb1590
 8005834:	3efa01a0 	.word	0x3efa01a0
 8005838:	16c15177 	.word	0x16c15177
 800583c:	3f56c16c 	.word	0x3f56c16c
 8005840:	5555554c 	.word	0x5555554c
 8005844:	3fa55555 	.word	0x3fa55555
 8005848:	3fe00000 	.word	0x3fe00000
 800584c:	3fd33332 	.word	0x3fd33332
 8005850:	3ff00000 	.word	0x3ff00000
 8005854:	3fe90000 	.word	0x3fe90000
 8005858:	3fd20000 	.word	0x3fd20000
 800585c:	00000000 	.word	0x00000000

08005860 <__kernel_rem_pio2>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ed2d 8b02 	vpush	{d8}
 8005868:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800586c:	1ed4      	subs	r4, r2, #3
 800586e:	9308      	str	r3, [sp, #32]
 8005870:	9101      	str	r1, [sp, #4]
 8005872:	4bc5      	ldr	r3, [pc, #788]	; (8005b88 <__kernel_rem_pio2+0x328>)
 8005874:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005876:	9009      	str	r0, [sp, #36]	; 0x24
 8005878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	9b08      	ldr	r3, [sp, #32]
 8005880:	3b01      	subs	r3, #1
 8005882:	9307      	str	r3, [sp, #28]
 8005884:	2318      	movs	r3, #24
 8005886:	fb94 f4f3 	sdiv	r4, r4, r3
 800588a:	f06f 0317 	mvn.w	r3, #23
 800588e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005892:	fb04 3303 	mla	r3, r4, r3, r3
 8005896:	eb03 0a02 	add.w	sl, r3, r2
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	9a07      	ldr	r2, [sp, #28]
 800589e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005b78 <__kernel_rem_pio2+0x318>
 80058a2:	eb03 0802 	add.w	r8, r3, r2
 80058a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80058a8:	1aa7      	subs	r7, r4, r2
 80058aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058ae:	ae22      	add	r6, sp, #136	; 0x88
 80058b0:	2500      	movs	r5, #0
 80058b2:	4545      	cmp	r5, r8
 80058b4:	dd13      	ble.n	80058de <__kernel_rem_pio2+0x7e>
 80058b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005b78 <__kernel_rem_pio2+0x318>
 80058ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80058be:	2600      	movs	r6, #0
 80058c0:	9b04      	ldr	r3, [sp, #16]
 80058c2:	429e      	cmp	r6, r3
 80058c4:	dc32      	bgt.n	800592c <__kernel_rem_pio2+0xcc>
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	9b08      	ldr	r3, [sp, #32]
 80058cc:	199d      	adds	r5, r3, r6
 80058ce:	ab22      	add	r3, sp, #136	; 0x88
 80058d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80058d4:	9306      	str	r3, [sp, #24]
 80058d6:	ec59 8b18 	vmov	r8, r9, d8
 80058da:	2700      	movs	r7, #0
 80058dc:	e01f      	b.n	800591e <__kernel_rem_pio2+0xbe>
 80058de:	42ef      	cmn	r7, r5
 80058e0:	d407      	bmi.n	80058f2 <__kernel_rem_pio2+0x92>
 80058e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80058e6:	f7fa fdc9 	bl	800047c <__aeabi_i2d>
 80058ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80058ee:	3501      	adds	r5, #1
 80058f0:	e7df      	b.n	80058b2 <__kernel_rem_pio2+0x52>
 80058f2:	ec51 0b18 	vmov	r0, r1, d8
 80058f6:	e7f8      	b.n	80058ea <__kernel_rem_pio2+0x8a>
 80058f8:	9906      	ldr	r1, [sp, #24]
 80058fa:	9d02      	ldr	r5, [sp, #8]
 80058fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005900:	9106      	str	r1, [sp, #24]
 8005902:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005906:	9502      	str	r5, [sp, #8]
 8005908:	f7fa fe22 	bl	8000550 <__aeabi_dmul>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fa fc66 	bl	80001e4 <__adddf3>
 8005918:	3701      	adds	r7, #1
 800591a:	4680      	mov	r8, r0
 800591c:	4689      	mov	r9, r1
 800591e:	9b07      	ldr	r3, [sp, #28]
 8005920:	429f      	cmp	r7, r3
 8005922:	dde9      	ble.n	80058f8 <__kernel_rem_pio2+0x98>
 8005924:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005928:	3601      	adds	r6, #1
 800592a:	e7c9      	b.n	80058c0 <__kernel_rem_pio2+0x60>
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	aa0e      	add	r2, sp, #56	; 0x38
 8005930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005934:	930c      	str	r3, [sp, #48]	; 0x30
 8005936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005938:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800593c:	9c04      	ldr	r4, [sp, #16]
 800593e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005940:	ab9a      	add	r3, sp, #616	; 0x268
 8005942:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005946:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800594a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800594e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005952:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005956:	ab9a      	add	r3, sp, #616	; 0x268
 8005958:	445b      	add	r3, fp
 800595a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800595e:	2500      	movs	r5, #0
 8005960:	1b63      	subs	r3, r4, r5
 8005962:	2b00      	cmp	r3, #0
 8005964:	dc78      	bgt.n	8005a58 <__kernel_rem_pio2+0x1f8>
 8005966:	4650      	mov	r0, sl
 8005968:	ec49 8b10 	vmov	d0, r8, r9
 800596c:	f000 fe3c 	bl	80065e8 <scalbn>
 8005970:	ec57 6b10 	vmov	r6, r7, d0
 8005974:	2200      	movs	r2, #0
 8005976:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800597a:	ee10 0a10 	vmov	r0, s0
 800597e:	4639      	mov	r1, r7
 8005980:	f7fa fde6 	bl	8000550 <__aeabi_dmul>
 8005984:	ec41 0b10 	vmov	d0, r0, r1
 8005988:	f000 fd1a 	bl	80063c0 <floor>
 800598c:	2200      	movs	r2, #0
 800598e:	ec51 0b10 	vmov	r0, r1, d0
 8005992:	4b7e      	ldr	r3, [pc, #504]	; (8005b8c <__kernel_rem_pio2+0x32c>)
 8005994:	f7fa fddc 	bl	8000550 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4630      	mov	r0, r6
 800599e:	4639      	mov	r1, r7
 80059a0:	f7fa fc1e 	bl	80001e0 <__aeabi_dsub>
 80059a4:	460f      	mov	r7, r1
 80059a6:	4606      	mov	r6, r0
 80059a8:	f7fb f882 	bl	8000ab0 <__aeabi_d2iz>
 80059ac:	9006      	str	r0, [sp, #24]
 80059ae:	f7fa fd65 	bl	800047c <__aeabi_i2d>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa fc11 	bl	80001e0 <__aeabi_dsub>
 80059be:	f1ba 0f00 	cmp.w	sl, #0
 80059c2:	4606      	mov	r6, r0
 80059c4:	460f      	mov	r7, r1
 80059c6:	dd6c      	ble.n	8005aa2 <__kernel_rem_pio2+0x242>
 80059c8:	1e62      	subs	r2, r4, #1
 80059ca:	ab0e      	add	r3, sp, #56	; 0x38
 80059cc:	f1ca 0118 	rsb	r1, sl, #24
 80059d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80059d4:	9d06      	ldr	r5, [sp, #24]
 80059d6:	fa40 f301 	asr.w	r3, r0, r1
 80059da:	441d      	add	r5, r3
 80059dc:	408b      	lsls	r3, r1
 80059de:	1ac0      	subs	r0, r0, r3
 80059e0:	ab0e      	add	r3, sp, #56	; 0x38
 80059e2:	9506      	str	r5, [sp, #24]
 80059e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80059e8:	f1ca 0317 	rsb	r3, sl, #23
 80059ec:	fa40 f303 	asr.w	r3, r0, r3
 80059f0:	9302      	str	r3, [sp, #8]
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dd62      	ble.n	8005abe <__kernel_rem_pio2+0x25e>
 80059f8:	9b06      	ldr	r3, [sp, #24]
 80059fa:	2200      	movs	r2, #0
 80059fc:	3301      	adds	r3, #1
 80059fe:	9306      	str	r3, [sp, #24]
 8005a00:	4615      	mov	r5, r2
 8005a02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005a06:	4294      	cmp	r4, r2
 8005a08:	f300 8095 	bgt.w	8005b36 <__kernel_rem_pio2+0x2d6>
 8005a0c:	f1ba 0f00 	cmp.w	sl, #0
 8005a10:	dd07      	ble.n	8005a22 <__kernel_rem_pio2+0x1c2>
 8005a12:	f1ba 0f01 	cmp.w	sl, #1
 8005a16:	f000 80a2 	beq.w	8005b5e <__kernel_rem_pio2+0x2fe>
 8005a1a:	f1ba 0f02 	cmp.w	sl, #2
 8005a1e:	f000 80c1 	beq.w	8005ba4 <__kernel_rem_pio2+0x344>
 8005a22:	9b02      	ldr	r3, [sp, #8]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d14a      	bne.n	8005abe <__kernel_rem_pio2+0x25e>
 8005a28:	4632      	mov	r2, r6
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	4958      	ldr	r1, [pc, #352]	; (8005b90 <__kernel_rem_pio2+0x330>)
 8005a30:	f7fa fbd6 	bl	80001e0 <__aeabi_dsub>
 8005a34:	4606      	mov	r6, r0
 8005a36:	460f      	mov	r7, r1
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	d040      	beq.n	8005abe <__kernel_rem_pio2+0x25e>
 8005a3c:	4650      	mov	r0, sl
 8005a3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005b80 <__kernel_rem_pio2+0x320>
 8005a42:	f000 fdd1 	bl	80065e8 <scalbn>
 8005a46:	4630      	mov	r0, r6
 8005a48:	4639      	mov	r1, r7
 8005a4a:	ec53 2b10 	vmov	r2, r3, d0
 8005a4e:	f7fa fbc7 	bl	80001e0 <__aeabi_dsub>
 8005a52:	4606      	mov	r6, r0
 8005a54:	460f      	mov	r7, r1
 8005a56:	e032      	b.n	8005abe <__kernel_rem_pio2+0x25e>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4b4e      	ldr	r3, [pc, #312]	; (8005b94 <__kernel_rem_pio2+0x334>)
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fa fd76 	bl	8000550 <__aeabi_dmul>
 8005a64:	f7fb f824 	bl	8000ab0 <__aeabi_d2iz>
 8005a68:	f7fa fd08 	bl	800047c <__aeabi_i2d>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	; (8005b98 <__kernel_rem_pio2+0x338>)
 8005a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a74:	f7fa fd6c 	bl	8000550 <__aeabi_dmul>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fa fbae 	bl	80001e0 <__aeabi_dsub>
 8005a84:	f7fb f814 	bl	8000ab0 <__aeabi_d2iz>
 8005a88:	ab0e      	add	r3, sp, #56	; 0x38
 8005a8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005a8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a96:	f7fa fba5 	bl	80001e4 <__adddf3>
 8005a9a:	3501      	adds	r5, #1
 8005a9c:	4680      	mov	r8, r0
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	e75e      	b.n	8005960 <__kernel_rem_pio2+0x100>
 8005aa2:	d105      	bne.n	8005ab0 <__kernel_rem_pio2+0x250>
 8005aa4:	1e63      	subs	r3, r4, #1
 8005aa6:	aa0e      	add	r2, sp, #56	; 0x38
 8005aa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005aac:	15c3      	asrs	r3, r0, #23
 8005aae:	e79f      	b.n	80059f0 <__kernel_rem_pio2+0x190>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <__kernel_rem_pio2+0x33c>)
 8005ab4:	f7fa ffd2 	bl	8000a5c <__aeabi_dcmpge>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d139      	bne.n	8005b30 <__kernel_rem_pio2+0x2d0>
 8005abc:	9002      	str	r0, [sp, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fa ffab 	bl	8000a20 <__aeabi_dcmpeq>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f000 80c7 	beq.w	8005c5e <__kernel_rem_pio2+0x3fe>
 8005ad0:	1e65      	subs	r5, r4, #1
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	9904      	ldr	r1, [sp, #16]
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	da6a      	bge.n	8005bb2 <__kernel_rem_pio2+0x352>
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	f000 8088 	beq.w	8005bf2 <__kernel_rem_pio2+0x392>
 8005ae2:	ab0e      	add	r3, sp, #56	; 0x38
 8005ae4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005ae8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80b4 	beq.w	8005c5a <__kernel_rem_pio2+0x3fa>
 8005af2:	4650      	mov	r0, sl
 8005af4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005b80 <__kernel_rem_pio2+0x320>
 8005af8:	f000 fd76 	bl	80065e8 <scalbn>
 8005afc:	00ec      	lsls	r4, r5, #3
 8005afe:	ab72      	add	r3, sp, #456	; 0x1c8
 8005b00:	191e      	adds	r6, r3, r4
 8005b02:	ec59 8b10 	vmov	r8, r9, d0
 8005b06:	f106 0a08 	add.w	sl, r6, #8
 8005b0a:	462f      	mov	r7, r5
 8005b0c:	2f00      	cmp	r7, #0
 8005b0e:	f280 80df 	bge.w	8005cd0 <__kernel_rem_pio2+0x470>
 8005b12:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005b78 <__kernel_rem_pio2+0x318>
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	eba5 030a 	sub.w	r3, r5, sl
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f2c0 810a 	blt.w	8005d38 <__kernel_rem_pio2+0x4d8>
 8005b24:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005ba0 <__kernel_rem_pio2+0x340>
 8005b28:	ec59 8b18 	vmov	r8, r9, d8
 8005b2c:	2700      	movs	r7, #0
 8005b2e:	e0f5      	b.n	8005d1c <__kernel_rem_pio2+0x4bc>
 8005b30:	2302      	movs	r3, #2
 8005b32:	9302      	str	r3, [sp, #8]
 8005b34:	e760      	b.n	80059f8 <__kernel_rem_pio2+0x198>
 8005b36:	ab0e      	add	r3, sp, #56	; 0x38
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	b94d      	cbnz	r5, 8005b52 <__kernel_rem_pio2+0x2f2>
 8005b3e:	b12b      	cbz	r3, 8005b4c <__kernel_rem_pio2+0x2ec>
 8005b40:	a80e      	add	r0, sp, #56	; 0x38
 8005b42:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005b46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	461d      	mov	r5, r3
 8005b50:	e759      	b.n	8005a06 <__kernel_rem_pio2+0x1a6>
 8005b52:	a80e      	add	r0, sp, #56	; 0x38
 8005b54:	1acb      	subs	r3, r1, r3
 8005b56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	e7f6      	b.n	8005b4c <__kernel_rem_pio2+0x2ec>
 8005b5e:	1e62      	subs	r2, r4, #1
 8005b60:	ab0e      	add	r3, sp, #56	; 0x38
 8005b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b6a:	a90e      	add	r1, sp, #56	; 0x38
 8005b6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b70:	e757      	b.n	8005a22 <__kernel_rem_pio2+0x1c2>
 8005b72:	bf00      	nop
 8005b74:	f3af 8000 	nop.w
	...
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	08006930 	.word	0x08006930
 8005b8c:	40200000 	.word	0x40200000
 8005b90:	3ff00000 	.word	0x3ff00000
 8005b94:	3e700000 	.word	0x3e700000
 8005b98:	41700000 	.word	0x41700000
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	080068f0 	.word	0x080068f0
 8005ba4:	1e62      	subs	r2, r4, #1
 8005ba6:	ab0e      	add	r3, sp, #56	; 0x38
 8005ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bb0:	e7db      	b.n	8005b6a <__kernel_rem_pio2+0x30a>
 8005bb2:	a90e      	add	r1, sp, #56	; 0x38
 8005bb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	e78b      	b.n	8005ad6 <__kernel_rem_pio2+0x276>
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d0fa      	beq.n	8005bbe <__kernel_rem_pio2+0x35e>
 8005bc8:	9a08      	ldr	r2, [sp, #32]
 8005bca:	4422      	add	r2, r4
 8005bcc:	00d2      	lsls	r2, r2, #3
 8005bce:	a922      	add	r1, sp, #136	; 0x88
 8005bd0:	18e3      	adds	r3, r4, r3
 8005bd2:	9206      	str	r2, [sp, #24]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	f10b 0108 	add.w	r1, fp, #8
 8005bdc:	f102 0308 	add.w	r3, r2, #8
 8005be0:	1c66      	adds	r6, r4, #1
 8005be2:	910a      	str	r1, [sp, #40]	; 0x28
 8005be4:	2500      	movs	r5, #0
 8005be6:	930d      	str	r3, [sp, #52]	; 0x34
 8005be8:	9b02      	ldr	r3, [sp, #8]
 8005bea:	42b3      	cmp	r3, r6
 8005bec:	da04      	bge.n	8005bf8 <__kernel_rem_pio2+0x398>
 8005bee:	461c      	mov	r4, r3
 8005bf0:	e6a6      	b.n	8005940 <__kernel_rem_pio2+0xe0>
 8005bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e7e3      	b.n	8005bc0 <__kernel_rem_pio2+0x360>
 8005bf8:	9b06      	ldr	r3, [sp, #24]
 8005bfa:	18ef      	adds	r7, r5, r3
 8005bfc:	ab22      	add	r3, sp, #136	; 0x88
 8005bfe:	441f      	add	r7, r3
 8005c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c06:	f7fa fc39 	bl	800047c <__aeabi_i2d>
 8005c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0c:	461c      	mov	r4, r3
 8005c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c10:	e9c7 0100 	strd	r0, r1, [r7]
 8005c14:	eb03 0b05 	add.w	fp, r3, r5
 8005c18:	2700      	movs	r7, #0
 8005c1a:	f04f 0800 	mov.w	r8, #0
 8005c1e:	f04f 0900 	mov.w	r9, #0
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	429f      	cmp	r7, r3
 8005c26:	dd08      	ble.n	8005c3a <__kernel_rem_pio2+0x3da>
 8005c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005c2c:	18eb      	adds	r3, r5, r3
 8005c2e:	4413      	add	r3, r2
 8005c30:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005c34:	3601      	adds	r6, #1
 8005c36:	3508      	adds	r5, #8
 8005c38:	e7d6      	b.n	8005be8 <__kernel_rem_pio2+0x388>
 8005c3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005c3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005c42:	f7fa fc85 	bl	8000550 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa fac9 	bl	80001e4 <__adddf3>
 8005c52:	3701      	adds	r7, #1
 8005c54:	4680      	mov	r8, r0
 8005c56:	4689      	mov	r9, r1
 8005c58:	e7e3      	b.n	8005c22 <__kernel_rem_pio2+0x3c2>
 8005c5a:	3d01      	subs	r5, #1
 8005c5c:	e741      	b.n	8005ae2 <__kernel_rem_pio2+0x282>
 8005c5e:	f1ca 0000 	rsb	r0, sl, #0
 8005c62:	ec47 6b10 	vmov	d0, r6, r7
 8005c66:	f000 fcbf 	bl	80065e8 <scalbn>
 8005c6a:	ec57 6b10 	vmov	r6, r7, d0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b99      	ldr	r3, [pc, #612]	; (8005ed8 <__kernel_rem_pio2+0x678>)
 8005c72:	ee10 0a10 	vmov	r0, s0
 8005c76:	4639      	mov	r1, r7
 8005c78:	f7fa fef0 	bl	8000a5c <__aeabi_dcmpge>
 8005c7c:	b1f8      	cbz	r0, 8005cbe <__kernel_rem_pio2+0x45e>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4b96      	ldr	r3, [pc, #600]	; (8005edc <__kernel_rem_pio2+0x67c>)
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa fc63 	bl	8000550 <__aeabi_dmul>
 8005c8a:	f7fa ff11 	bl	8000ab0 <__aeabi_d2iz>
 8005c8e:	4680      	mov	r8, r0
 8005c90:	f7fa fbf4 	bl	800047c <__aeabi_i2d>
 8005c94:	2200      	movs	r2, #0
 8005c96:	4b90      	ldr	r3, [pc, #576]	; (8005ed8 <__kernel_rem_pio2+0x678>)
 8005c98:	f7fa fc5a 	bl	8000550 <__aeabi_dmul>
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7fa fa9c 	bl	80001e0 <__aeabi_dsub>
 8005ca8:	f7fa ff02 	bl	8000ab0 <__aeabi_d2iz>
 8005cac:	1c65      	adds	r5, r4, #1
 8005cae:	ab0e      	add	r3, sp, #56	; 0x38
 8005cb0:	f10a 0a18 	add.w	sl, sl, #24
 8005cb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cb8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005cbc:	e719      	b.n	8005af2 <__kernel_rem_pio2+0x292>
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa fef5 	bl	8000ab0 <__aeabi_d2iz>
 8005cc6:	ab0e      	add	r3, sp, #56	; 0x38
 8005cc8:	4625      	mov	r5, r4
 8005cca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cce:	e710      	b.n	8005af2 <__kernel_rem_pio2+0x292>
 8005cd0:	ab0e      	add	r3, sp, #56	; 0x38
 8005cd2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005cd6:	f7fa fbd1 	bl	800047c <__aeabi_i2d>
 8005cda:	4642      	mov	r2, r8
 8005cdc:	464b      	mov	r3, r9
 8005cde:	f7fa fc37 	bl	8000550 <__aeabi_dmul>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005ce8:	4b7c      	ldr	r3, [pc, #496]	; (8005edc <__kernel_rem_pio2+0x67c>)
 8005cea:	4640      	mov	r0, r8
 8005cec:	4649      	mov	r1, r9
 8005cee:	f7fa fc2f 	bl	8000550 <__aeabi_dmul>
 8005cf2:	3f01      	subs	r7, #1
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	4689      	mov	r9, r1
 8005cf8:	e708      	b.n	8005b0c <__kernel_rem_pio2+0x2ac>
 8005cfa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005d06:	f7fa fc23 	bl	8000550 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fa67 	bl	80001e4 <__adddf3>
 8005d16:	3701      	adds	r7, #1
 8005d18:	4680      	mov	r8, r0
 8005d1a:	4689      	mov	r9, r1
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	429f      	cmp	r7, r3
 8005d20:	dc01      	bgt.n	8005d26 <__kernel_rem_pio2+0x4c6>
 8005d22:	45ba      	cmp	sl, r7
 8005d24:	dae9      	bge.n	8005cfa <__kernel_rem_pio2+0x49a>
 8005d26:	ab4a      	add	r3, sp, #296	; 0x128
 8005d28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d2c:	e9c3 8900 	strd	r8, r9, [r3]
 8005d30:	f10a 0a01 	add.w	sl, sl, #1
 8005d34:	3e08      	subs	r6, #8
 8005d36:	e6f0      	b.n	8005b1a <__kernel_rem_pio2+0x2ba>
 8005d38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d85b      	bhi.n	8005df6 <__kernel_rem_pio2+0x596>
 8005d3e:	e8df f003 	tbb	[pc, r3]
 8005d42:	264a      	.short	0x264a
 8005d44:	0226      	.short	0x0226
 8005d46:	ab9a      	add	r3, sp, #616	; 0x268
 8005d48:	441c      	add	r4, r3
 8005d4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005d4e:	46a2      	mov	sl, r4
 8005d50:	46ab      	mov	fp, r5
 8005d52:	f1bb 0f00 	cmp.w	fp, #0
 8005d56:	dc6c      	bgt.n	8005e32 <__kernel_rem_pio2+0x5d2>
 8005d58:	46a2      	mov	sl, r4
 8005d5a:	46ab      	mov	fp, r5
 8005d5c:	f1bb 0f01 	cmp.w	fp, #1
 8005d60:	f300 8086 	bgt.w	8005e70 <__kernel_rem_pio2+0x610>
 8005d64:	2000      	movs	r0, #0
 8005d66:	2100      	movs	r1, #0
 8005d68:	2d01      	cmp	r5, #1
 8005d6a:	f300 80a0 	bgt.w	8005eae <__kernel_rem_pio2+0x64e>
 8005d6e:	9b02      	ldr	r3, [sp, #8]
 8005d70:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005d74:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 809e 	bne.w	8005eba <__kernel_rem_pio2+0x65a>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	e9c3 7800 	strd	r7, r8, [r3]
 8005d84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005d88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005d8c:	e033      	b.n	8005df6 <__kernel_rem_pio2+0x596>
 8005d8e:	3408      	adds	r4, #8
 8005d90:	ab4a      	add	r3, sp, #296	; 0x128
 8005d92:	441c      	add	r4, r3
 8005d94:	462e      	mov	r6, r5
 8005d96:	2000      	movs	r0, #0
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2e00      	cmp	r6, #0
 8005d9c:	da3a      	bge.n	8005e14 <__kernel_rem_pio2+0x5b4>
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d03d      	beq.n	8005e20 <__kernel_rem_pio2+0x5c0>
 8005da4:	4602      	mov	r2, r0
 8005da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005daa:	9c01      	ldr	r4, [sp, #4]
 8005dac:	e9c4 2300 	strd	r2, r3, [r4]
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005db8:	f7fa fa12 	bl	80001e0 <__aeabi_dsub>
 8005dbc:	ae4c      	add	r6, sp, #304	; 0x130
 8005dbe:	2401      	movs	r4, #1
 8005dc0:	42a5      	cmp	r5, r4
 8005dc2:	da30      	bge.n	8005e26 <__kernel_rem_pio2+0x5c6>
 8005dc4:	9b02      	ldr	r3, [sp, #8]
 8005dc6:	b113      	cbz	r3, 8005dce <__kernel_rem_pio2+0x56e>
 8005dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dcc:	4619      	mov	r1, r3
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005dd4:	e00f      	b.n	8005df6 <__kernel_rem_pio2+0x596>
 8005dd6:	ab9a      	add	r3, sp, #616	; 0x268
 8005dd8:	441c      	add	r4, r3
 8005dda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005dde:	2000      	movs	r0, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	da10      	bge.n	8005e08 <__kernel_rem_pio2+0x5a8>
 8005de6:	9b02      	ldr	r3, [sp, #8]
 8005de8:	b113      	cbz	r3, 8005df0 <__kernel_rem_pio2+0x590>
 8005dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dee:	4619      	mov	r1, r3
 8005df0:	9b01      	ldr	r3, [sp, #4]
 8005df2:	e9c3 0100 	strd	r0, r1, [r3]
 8005df6:	9b06      	ldr	r3, [sp, #24]
 8005df8:	f003 0007 	and.w	r0, r3, #7
 8005dfc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005e00:	ecbd 8b02 	vpop	{d8}
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e0c:	f7fa f9ea 	bl	80001e4 <__adddf3>
 8005e10:	3d01      	subs	r5, #1
 8005e12:	e7e6      	b.n	8005de2 <__kernel_rem_pio2+0x582>
 8005e14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e18:	f7fa f9e4 	bl	80001e4 <__adddf3>
 8005e1c:	3e01      	subs	r6, #1
 8005e1e:	e7bc      	b.n	8005d9a <__kernel_rem_pio2+0x53a>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	e7c1      	b.n	8005daa <__kernel_rem_pio2+0x54a>
 8005e26:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005e2a:	f7fa f9db 	bl	80001e4 <__adddf3>
 8005e2e:	3401      	adds	r4, #1
 8005e30:	e7c6      	b.n	8005dc0 <__kernel_rem_pio2+0x560>
 8005e32:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005e36:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	ec53 2b17 	vmov	r2, r3, d7
 8005e40:	4649      	mov	r1, r9
 8005e42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e46:	f7fa f9cd 	bl	80001e4 <__adddf3>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa f9c3 	bl	80001e0 <__aeabi_dsub>
 8005e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5e:	f7fa f9c1 	bl	80001e4 <__adddf3>
 8005e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e66:	e9ca 0100 	strd	r0, r1, [sl]
 8005e6a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005e6e:	e770      	b.n	8005d52 <__kernel_rem_pio2+0x4f2>
 8005e70:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005e74:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005e78:	4630      	mov	r0, r6
 8005e7a:	ec53 2b17 	vmov	r2, r3, d7
 8005e7e:	4639      	mov	r1, r7
 8005e80:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005e84:	f7fa f9ae 	bl	80001e4 <__adddf3>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	4689      	mov	r9, r1
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa f9a4 	bl	80001e0 <__aeabi_dsub>
 8005e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9c:	f7fa f9a2 	bl	80001e4 <__adddf3>
 8005ea0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ea4:	e9ca 0100 	strd	r0, r1, [sl]
 8005ea8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005eac:	e756      	b.n	8005d5c <__kernel_rem_pio2+0x4fc>
 8005eae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005eb2:	f7fa f997 	bl	80001e4 <__adddf3>
 8005eb6:	3d01      	subs	r5, #1
 8005eb8:	e756      	b.n	8005d68 <__kernel_rem_pio2+0x508>
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	9a01      	ldr	r2, [sp, #4]
 8005ebe:	601f      	str	r7, [r3, #0]
 8005ec0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005ec4:	605c      	str	r4, [r3, #4]
 8005ec6:	609d      	str	r5, [r3, #8]
 8005ec8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ecc:	60d3      	str	r3, [r2, #12]
 8005ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ed2:	6110      	str	r0, [r2, #16]
 8005ed4:	6153      	str	r3, [r2, #20]
 8005ed6:	e78e      	b.n	8005df6 <__kernel_rem_pio2+0x596>
 8005ed8:	41700000 	.word	0x41700000
 8005edc:	3e700000 	.word	0x3e700000

08005ee0 <__kernel_sin>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	ec55 4b10 	vmov	r4, r5, d0
 8005ee8:	b085      	sub	sp, #20
 8005eea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005eee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ef2:	ed8d 1b00 	vstr	d1, [sp]
 8005ef6:	9002      	str	r0, [sp, #8]
 8005ef8:	da06      	bge.n	8005f08 <__kernel_sin+0x28>
 8005efa:	ee10 0a10 	vmov	r0, s0
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fdd6 	bl	8000ab0 <__aeabi_d2iz>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d051      	beq.n	8005fac <__kernel_sin+0xcc>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f7fa fb1e 	bl	8000550 <__aeabi_dmul>
 8005f14:	4682      	mov	sl, r0
 8005f16:	468b      	mov	fp, r1
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fb16 	bl	8000550 <__aeabi_dmul>
 8005f24:	a341      	add	r3, pc, #260	; (adr r3, 800602c <__kernel_sin+0x14c>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4689      	mov	r9, r1
 8005f2e:	4650      	mov	r0, sl
 8005f30:	4659      	mov	r1, fp
 8005f32:	f7fa fb0d 	bl	8000550 <__aeabi_dmul>
 8005f36:	a33f      	add	r3, pc, #252	; (adr r3, 8006034 <__kernel_sin+0x154>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa f950 	bl	80001e0 <__aeabi_dsub>
 8005f40:	4652      	mov	r2, sl
 8005f42:	465b      	mov	r3, fp
 8005f44:	f7fa fb04 	bl	8000550 <__aeabi_dmul>
 8005f48:	a33c      	add	r3, pc, #240	; (adr r3, 800603c <__kernel_sin+0x15c>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f949 	bl	80001e4 <__adddf3>
 8005f52:	4652      	mov	r2, sl
 8005f54:	465b      	mov	r3, fp
 8005f56:	f7fa fafb 	bl	8000550 <__aeabi_dmul>
 8005f5a:	a33a      	add	r3, pc, #232	; (adr r3, 8006044 <__kernel_sin+0x164>)
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f7fa f93e 	bl	80001e0 <__aeabi_dsub>
 8005f64:	4652      	mov	r2, sl
 8005f66:	465b      	mov	r3, fp
 8005f68:	f7fa faf2 	bl	8000550 <__aeabi_dmul>
 8005f6c:	a337      	add	r3, pc, #220	; (adr r3, 800604c <__kernel_sin+0x16c>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f937 	bl	80001e4 <__adddf3>
 8005f76:	9b02      	ldr	r3, [sp, #8]
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	b9db      	cbnz	r3, 8005fb6 <__kernel_sin+0xd6>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4650      	mov	r0, sl
 8005f84:	4659      	mov	r1, fp
 8005f86:	f7fa fae3 	bl	8000550 <__aeabi_dmul>
 8005f8a:	a325      	add	r3, pc, #148	; (adr r3, 8006020 <__kernel_sin+0x140>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa f926 	bl	80001e0 <__aeabi_dsub>
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f7fa fada 	bl	8000550 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f7fa f91e 	bl	80001e4 <__adddf3>
 8005fa8:	4604      	mov	r4, r0
 8005faa:	460d      	mov	r5, r1
 8005fac:	ec45 4b10 	vmov	d0, r4, r5
 8005fb0:	b005      	add	sp, #20
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <__kernel_sin+0x148>)
 8005fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fbe:	f7fa fac7 	bl	8000550 <__aeabi_dmul>
 8005fc2:	4632      	mov	r2, r6
 8005fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fc8:	463b      	mov	r3, r7
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa fabf 	bl	8000550 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fda:	f7fa f901 	bl	80001e0 <__aeabi_dsub>
 8005fde:	4652      	mov	r2, sl
 8005fe0:	465b      	mov	r3, fp
 8005fe2:	f7fa fab5 	bl	8000550 <__aeabi_dmul>
 8005fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fea:	f7fa f8f9 	bl	80001e0 <__aeabi_dsub>
 8005fee:	a30c      	add	r3, pc, #48	; (adr r3, 8006020 <__kernel_sin+0x140>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	460f      	mov	r7, r1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa faa8 	bl	8000550 <__aeabi_dmul>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	f7fa f8ec 	bl	80001e4 <__adddf3>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa f8e4 	bl	80001e0 <__aeabi_dsub>
 8006018:	e7c6      	b.n	8005fa8 <__kernel_sin+0xc8>
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w
 8006020:	55555549 	.word	0x55555549
 8006024:	3fc55555 	.word	0x3fc55555
 8006028:	3fe00000 	.word	0x3fe00000
 800602c:	5acfd57c 	.word	0x5acfd57c
 8006030:	3de5d93a 	.word	0x3de5d93a
 8006034:	8a2b9ceb 	.word	0x8a2b9ceb
 8006038:	3e5ae5e6 	.word	0x3e5ae5e6
 800603c:	57b1fe7d 	.word	0x57b1fe7d
 8006040:	3ec71de3 	.word	0x3ec71de3
 8006044:	19c161d5 	.word	0x19c161d5
 8006048:	3f2a01a0 	.word	0x3f2a01a0
 800604c:	1110f8a6 	.word	0x1110f8a6
 8006050:	3f811111 	.word	0x3f811111
 8006054:	00000000 	.word	0x00000000

08006058 <atan>:
 8006058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	ec55 4b10 	vmov	r4, r5, d0
 8006060:	4bc3      	ldr	r3, [pc, #780]	; (8006370 <atan+0x318>)
 8006062:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006066:	429e      	cmp	r6, r3
 8006068:	46ab      	mov	fp, r5
 800606a:	dd18      	ble.n	800609e <atan+0x46>
 800606c:	4bc1      	ldr	r3, [pc, #772]	; (8006374 <atan+0x31c>)
 800606e:	429e      	cmp	r6, r3
 8006070:	dc01      	bgt.n	8006076 <atan+0x1e>
 8006072:	d109      	bne.n	8006088 <atan+0x30>
 8006074:	b144      	cbz	r4, 8006088 <atan+0x30>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa f8b1 	bl	80001e4 <__adddf3>
 8006082:	4604      	mov	r4, r0
 8006084:	460d      	mov	r5, r1
 8006086:	e006      	b.n	8006096 <atan+0x3e>
 8006088:	f1bb 0f00 	cmp.w	fp, #0
 800608c:	f340 8131 	ble.w	80062f2 <atan+0x29a>
 8006090:	a59b      	add	r5, pc, #620	; (adr r5, 8006300 <atan+0x2a8>)
 8006092:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006096:	ec45 4b10 	vmov	d0, r4, r5
 800609a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	4bb6      	ldr	r3, [pc, #728]	; (8006378 <atan+0x320>)
 80060a0:	429e      	cmp	r6, r3
 80060a2:	dc14      	bgt.n	80060ce <atan+0x76>
 80060a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80060a8:	429e      	cmp	r6, r3
 80060aa:	dc0d      	bgt.n	80060c8 <atan+0x70>
 80060ac:	a396      	add	r3, pc, #600	; (adr r3, 8006308 <atan+0x2b0>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	ee10 0a10 	vmov	r0, s0
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f894 	bl	80001e4 <__adddf3>
 80060bc:	2200      	movs	r2, #0
 80060be:	4baf      	ldr	r3, [pc, #700]	; (800637c <atan+0x324>)
 80060c0:	f7fa fcd6 	bl	8000a70 <__aeabi_dcmpgt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1e6      	bne.n	8006096 <atan+0x3e>
 80060c8:	f04f 3aff 	mov.w	sl, #4294967295
 80060cc:	e02b      	b.n	8006126 <atan+0xce>
 80060ce:	f000 f963 	bl	8006398 <fabs>
 80060d2:	4bab      	ldr	r3, [pc, #684]	; (8006380 <atan+0x328>)
 80060d4:	429e      	cmp	r6, r3
 80060d6:	ec55 4b10 	vmov	r4, r5, d0
 80060da:	f300 80bf 	bgt.w	800625c <atan+0x204>
 80060de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80060e2:	429e      	cmp	r6, r3
 80060e4:	f300 80a0 	bgt.w	8006228 <atan+0x1d0>
 80060e8:	ee10 2a10 	vmov	r2, s0
 80060ec:	ee10 0a10 	vmov	r0, s0
 80060f0:	462b      	mov	r3, r5
 80060f2:	4629      	mov	r1, r5
 80060f4:	f7fa f876 	bl	80001e4 <__adddf3>
 80060f8:	2200      	movs	r2, #0
 80060fa:	4ba0      	ldr	r3, [pc, #640]	; (800637c <atan+0x324>)
 80060fc:	f7fa f870 	bl	80001e0 <__aeabi_dsub>
 8006100:	2200      	movs	r2, #0
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f7fa f869 	bl	80001e4 <__adddf3>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa fb43 	bl	80007a4 <__aeabi_ddiv>
 800611e:	f04f 0a00 	mov.w	sl, #0
 8006122:	4604      	mov	r4, r0
 8006124:	460d      	mov	r5, r1
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa fa0f 	bl	8000550 <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4680      	mov	r8, r0
 8006138:	4689      	mov	r9, r1
 800613a:	f7fa fa09 	bl	8000550 <__aeabi_dmul>
 800613e:	a374      	add	r3, pc, #464	; (adr r3, 8006310 <atan+0x2b8>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	4606      	mov	r6, r0
 8006146:	460f      	mov	r7, r1
 8006148:	f7fa fa02 	bl	8000550 <__aeabi_dmul>
 800614c:	a372      	add	r3, pc, #456	; (adr r3, 8006318 <atan+0x2c0>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f7fa f847 	bl	80001e4 <__adddf3>
 8006156:	4632      	mov	r2, r6
 8006158:	463b      	mov	r3, r7
 800615a:	f7fa f9f9 	bl	8000550 <__aeabi_dmul>
 800615e:	a370      	add	r3, pc, #448	; (adr r3, 8006320 <atan+0x2c8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa f83e 	bl	80001e4 <__adddf3>
 8006168:	4632      	mov	r2, r6
 800616a:	463b      	mov	r3, r7
 800616c:	f7fa f9f0 	bl	8000550 <__aeabi_dmul>
 8006170:	a36d      	add	r3, pc, #436	; (adr r3, 8006328 <atan+0x2d0>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa f835 	bl	80001e4 <__adddf3>
 800617a:	4632      	mov	r2, r6
 800617c:	463b      	mov	r3, r7
 800617e:	f7fa f9e7 	bl	8000550 <__aeabi_dmul>
 8006182:	a36b      	add	r3, pc, #428	; (adr r3, 8006330 <atan+0x2d8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f82c 	bl	80001e4 <__adddf3>
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	f7fa f9de 	bl	8000550 <__aeabi_dmul>
 8006194:	a368      	add	r3, pc, #416	; (adr r3, 8006338 <atan+0x2e0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa f823 	bl	80001e4 <__adddf3>
 800619e:	4642      	mov	r2, r8
 80061a0:	464b      	mov	r3, r9
 80061a2:	f7fa f9d5 	bl	8000550 <__aeabi_dmul>
 80061a6:	a366      	add	r3, pc, #408	; (adr r3, 8006340 <atan+0x2e8>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4680      	mov	r8, r0
 80061ae:	4689      	mov	r9, r1
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa f9cc 	bl	8000550 <__aeabi_dmul>
 80061b8:	a363      	add	r3, pc, #396	; (adr r3, 8006348 <atan+0x2f0>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa f80f 	bl	80001e0 <__aeabi_dsub>
 80061c2:	4632      	mov	r2, r6
 80061c4:	463b      	mov	r3, r7
 80061c6:	f7fa f9c3 	bl	8000550 <__aeabi_dmul>
 80061ca:	a361      	add	r3, pc, #388	; (adr r3, 8006350 <atan+0x2f8>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa f806 	bl	80001e0 <__aeabi_dsub>
 80061d4:	4632      	mov	r2, r6
 80061d6:	463b      	mov	r3, r7
 80061d8:	f7fa f9ba 	bl	8000550 <__aeabi_dmul>
 80061dc:	a35e      	add	r3, pc, #376	; (adr r3, 8006358 <atan+0x300>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7f9 fffd 	bl	80001e0 <__aeabi_dsub>
 80061e6:	4632      	mov	r2, r6
 80061e8:	463b      	mov	r3, r7
 80061ea:	f7fa f9b1 	bl	8000550 <__aeabi_dmul>
 80061ee:	a35c      	add	r3, pc, #368	; (adr r3, 8006360 <atan+0x308>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7f9 fff4 	bl	80001e0 <__aeabi_dsub>
 80061f8:	4632      	mov	r2, r6
 80061fa:	463b      	mov	r3, r7
 80061fc:	f7fa f9a8 	bl	8000550 <__aeabi_dmul>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4640      	mov	r0, r8
 8006206:	4649      	mov	r1, r9
 8006208:	f7f9 ffec 	bl	80001e4 <__adddf3>
 800620c:	4622      	mov	r2, r4
 800620e:	462b      	mov	r3, r5
 8006210:	f7fa f99e 	bl	8000550 <__aeabi_dmul>
 8006214:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	d14b      	bne.n	80062b6 <atan+0x25e>
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7f9 ffdd 	bl	80001e0 <__aeabi_dsub>
 8006226:	e72c      	b.n	8006082 <atan+0x2a>
 8006228:	ee10 0a10 	vmov	r0, s0
 800622c:	2200      	movs	r2, #0
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <atan+0x324>)
 8006230:	4629      	mov	r1, r5
 8006232:	f7f9 ffd5 	bl	80001e0 <__aeabi_dsub>
 8006236:	2200      	movs	r2, #0
 8006238:	4606      	mov	r6, r0
 800623a:	460f      	mov	r7, r1
 800623c:	4b4f      	ldr	r3, [pc, #316]	; (800637c <atan+0x324>)
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	f7f9 ffcf 	bl	80001e4 <__adddf3>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	f7fa faa9 	bl	80007a4 <__aeabi_ddiv>
 8006252:	f04f 0a01 	mov.w	sl, #1
 8006256:	4604      	mov	r4, r0
 8006258:	460d      	mov	r5, r1
 800625a:	e764      	b.n	8006126 <atan+0xce>
 800625c:	4b49      	ldr	r3, [pc, #292]	; (8006384 <atan+0x32c>)
 800625e:	429e      	cmp	r6, r3
 8006260:	dc1d      	bgt.n	800629e <atan+0x246>
 8006262:	ee10 0a10 	vmov	r0, s0
 8006266:	2200      	movs	r2, #0
 8006268:	4b47      	ldr	r3, [pc, #284]	; (8006388 <atan+0x330>)
 800626a:	4629      	mov	r1, r5
 800626c:	f7f9 ffb8 	bl	80001e0 <__aeabi_dsub>
 8006270:	2200      	movs	r2, #0
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	4b44      	ldr	r3, [pc, #272]	; (8006388 <atan+0x330>)
 8006278:	4620      	mov	r0, r4
 800627a:	4629      	mov	r1, r5
 800627c:	f7fa f968 	bl	8000550 <__aeabi_dmul>
 8006280:	2200      	movs	r2, #0
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <atan+0x324>)
 8006284:	f7f9 ffae 	bl	80001e4 <__adddf3>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4630      	mov	r0, r6
 800628e:	4639      	mov	r1, r7
 8006290:	f7fa fa88 	bl	80007a4 <__aeabi_ddiv>
 8006294:	f04f 0a02 	mov.w	sl, #2
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	e743      	b.n	8006126 <atan+0xce>
 800629e:	462b      	mov	r3, r5
 80062a0:	ee10 2a10 	vmov	r2, s0
 80062a4:	2000      	movs	r0, #0
 80062a6:	4939      	ldr	r1, [pc, #228]	; (800638c <atan+0x334>)
 80062a8:	f7fa fa7c 	bl	80007a4 <__aeabi_ddiv>
 80062ac:	f04f 0a03 	mov.w	sl, #3
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	e737      	b.n	8006126 <atan+0xce>
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <atan+0x338>)
 80062b8:	4e36      	ldr	r6, [pc, #216]	; (8006394 <atan+0x33c>)
 80062ba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80062be:	4456      	add	r6, sl
 80062c0:	449a      	add	sl, r3
 80062c2:	e9da 2300 	ldrd	r2, r3, [sl]
 80062c6:	f7f9 ff8b 	bl	80001e0 <__aeabi_dsub>
 80062ca:	4622      	mov	r2, r4
 80062cc:	462b      	mov	r3, r5
 80062ce:	f7f9 ff87 	bl	80001e0 <__aeabi_dsub>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80062da:	f7f9 ff81 	bl	80001e0 <__aeabi_dsub>
 80062de:	f1bb 0f00 	cmp.w	fp, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	f6bf aed6 	bge.w	8006096 <atan+0x3e>
 80062ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ee:	461d      	mov	r5, r3
 80062f0:	e6d1      	b.n	8006096 <atan+0x3e>
 80062f2:	a51d      	add	r5, pc, #116	; (adr r5, 8006368 <atan+0x310>)
 80062f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062f8:	e6cd      	b.n	8006096 <atan+0x3e>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	54442d18 	.word	0x54442d18
 8006304:	3ff921fb 	.word	0x3ff921fb
 8006308:	8800759c 	.word	0x8800759c
 800630c:	7e37e43c 	.word	0x7e37e43c
 8006310:	e322da11 	.word	0xe322da11
 8006314:	3f90ad3a 	.word	0x3f90ad3a
 8006318:	24760deb 	.word	0x24760deb
 800631c:	3fa97b4b 	.word	0x3fa97b4b
 8006320:	a0d03d51 	.word	0xa0d03d51
 8006324:	3fb10d66 	.word	0x3fb10d66
 8006328:	c54c206e 	.word	0xc54c206e
 800632c:	3fb745cd 	.word	0x3fb745cd
 8006330:	920083ff 	.word	0x920083ff
 8006334:	3fc24924 	.word	0x3fc24924
 8006338:	5555550d 	.word	0x5555550d
 800633c:	3fd55555 	.word	0x3fd55555
 8006340:	2c6a6c2f 	.word	0x2c6a6c2f
 8006344:	bfa2b444 	.word	0xbfa2b444
 8006348:	52defd9a 	.word	0x52defd9a
 800634c:	3fadde2d 	.word	0x3fadde2d
 8006350:	af749a6d 	.word	0xaf749a6d
 8006354:	3fb3b0f2 	.word	0x3fb3b0f2
 8006358:	fe231671 	.word	0xfe231671
 800635c:	3fbc71c6 	.word	0x3fbc71c6
 8006360:	9998ebc4 	.word	0x9998ebc4
 8006364:	3fc99999 	.word	0x3fc99999
 8006368:	54442d18 	.word	0x54442d18
 800636c:	bff921fb 	.word	0xbff921fb
 8006370:	440fffff 	.word	0x440fffff
 8006374:	7ff00000 	.word	0x7ff00000
 8006378:	3fdbffff 	.word	0x3fdbffff
 800637c:	3ff00000 	.word	0x3ff00000
 8006380:	3ff2ffff 	.word	0x3ff2ffff
 8006384:	40037fff 	.word	0x40037fff
 8006388:	3ff80000 	.word	0x3ff80000
 800638c:	bff00000 	.word	0xbff00000
 8006390:	08006960 	.word	0x08006960
 8006394:	08006940 	.word	0x08006940

08006398 <fabs>:
 8006398:	ec51 0b10 	vmov	r0, r1, d0
 800639c:	ee10 2a10 	vmov	r2, s0
 80063a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063a4:	ec43 2b10 	vmov	d0, r2, r3
 80063a8:	4770      	bx	lr

080063aa <finite>:
 80063aa:	ee10 3a90 	vmov	r3, s1
 80063ae:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80063b2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80063b6:	0fc0      	lsrs	r0, r0, #31
 80063b8:	4770      	bx	lr
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <floor>:
 80063c0:	ec51 0b10 	vmov	r0, r1, d0
 80063c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80063d0:	2e13      	cmp	r6, #19
 80063d2:	460c      	mov	r4, r1
 80063d4:	ee10 5a10 	vmov	r5, s0
 80063d8:	4680      	mov	r8, r0
 80063da:	dc34      	bgt.n	8006446 <floor+0x86>
 80063dc:	2e00      	cmp	r6, #0
 80063de:	da16      	bge.n	800640e <floor+0x4e>
 80063e0:	a335      	add	r3, pc, #212	; (adr r3, 80064b8 <floor+0xf8>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7f9 fefd 	bl	80001e4 <__adddf3>
 80063ea:	2200      	movs	r2, #0
 80063ec:	2300      	movs	r3, #0
 80063ee:	f7fa fb3f 	bl	8000a70 <__aeabi_dcmpgt>
 80063f2:	b148      	cbz	r0, 8006408 <floor+0x48>
 80063f4:	2c00      	cmp	r4, #0
 80063f6:	da59      	bge.n	80064ac <floor+0xec>
 80063f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80063fc:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <floor+0x100>)
 80063fe:	432b      	orrs	r3, r5
 8006400:	2500      	movs	r5, #0
 8006402:	42ab      	cmp	r3, r5
 8006404:	bf18      	it	ne
 8006406:	4614      	movne	r4, r2
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	e025      	b.n	800645a <floor+0x9a>
 800640e:	4f2d      	ldr	r7, [pc, #180]	; (80064c4 <floor+0x104>)
 8006410:	4137      	asrs	r7, r6
 8006412:	ea01 0307 	and.w	r3, r1, r7
 8006416:	4303      	orrs	r3, r0
 8006418:	d01f      	beq.n	800645a <floor+0x9a>
 800641a:	a327      	add	r3, pc, #156	; (adr r3, 80064b8 <floor+0xf8>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 fee0 	bl	80001e4 <__adddf3>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	f7fa fb22 	bl	8000a70 <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0eb      	beq.n	8006408 <floor+0x48>
 8006430:	2c00      	cmp	r4, #0
 8006432:	bfbe      	ittt	lt
 8006434:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006438:	fa43 f606 	asrlt.w	r6, r3, r6
 800643c:	19a4      	addlt	r4, r4, r6
 800643e:	ea24 0407 	bic.w	r4, r4, r7
 8006442:	2500      	movs	r5, #0
 8006444:	e7e0      	b.n	8006408 <floor+0x48>
 8006446:	2e33      	cmp	r6, #51	; 0x33
 8006448:	dd0b      	ble.n	8006462 <floor+0xa2>
 800644a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800644e:	d104      	bne.n	800645a <floor+0x9a>
 8006450:	ee10 2a10 	vmov	r2, s0
 8006454:	460b      	mov	r3, r1
 8006456:	f7f9 fec5 	bl	80001e4 <__adddf3>
 800645a:	ec41 0b10 	vmov	d0, r0, r1
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006462:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	fa23 f707 	lsr.w	r7, r3, r7
 800646e:	4207      	tst	r7, r0
 8006470:	d0f3      	beq.n	800645a <floor+0x9a>
 8006472:	a311      	add	r3, pc, #68	; (adr r3, 80064b8 <floor+0xf8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7f9 feb4 	bl	80001e4 <__adddf3>
 800647c:	2200      	movs	r2, #0
 800647e:	2300      	movs	r3, #0
 8006480:	f7fa faf6 	bl	8000a70 <__aeabi_dcmpgt>
 8006484:	2800      	cmp	r0, #0
 8006486:	d0bf      	beq.n	8006408 <floor+0x48>
 8006488:	2c00      	cmp	r4, #0
 800648a:	da02      	bge.n	8006492 <floor+0xd2>
 800648c:	2e14      	cmp	r6, #20
 800648e:	d103      	bne.n	8006498 <floor+0xd8>
 8006490:	3401      	adds	r4, #1
 8006492:	ea25 0507 	bic.w	r5, r5, r7
 8006496:	e7b7      	b.n	8006408 <floor+0x48>
 8006498:	2301      	movs	r3, #1
 800649a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800649e:	fa03 f606 	lsl.w	r6, r3, r6
 80064a2:	4435      	add	r5, r6
 80064a4:	4545      	cmp	r5, r8
 80064a6:	bf38      	it	cc
 80064a8:	18e4      	addcc	r4, r4, r3
 80064aa:	e7f2      	b.n	8006492 <floor+0xd2>
 80064ac:	2500      	movs	r5, #0
 80064ae:	462c      	mov	r4, r5
 80064b0:	e7aa      	b.n	8006408 <floor+0x48>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
 80064b8:	8800759c 	.word	0x8800759c
 80064bc:	7e37e43c 	.word	0x7e37e43c
 80064c0:	bff00000 	.word	0xbff00000
 80064c4:	000fffff 	.word	0x000fffff

080064c8 <matherr>:
 80064c8:	2000      	movs	r0, #0
 80064ca:	4770      	bx	lr
 80064cc:	0000      	movs	r0, r0
	...

080064d0 <nan>:
 80064d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80064d8 <nan+0x8>
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	00000000 	.word	0x00000000
 80064dc:	7ff80000 	.word	0x7ff80000

080064e0 <rint>:
 80064e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e2:	ec51 0b10 	vmov	r0, r1, d0
 80064e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80064ee:	2e13      	cmp	r6, #19
 80064f0:	460b      	mov	r3, r1
 80064f2:	ee10 4a10 	vmov	r4, s0
 80064f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80064fa:	dc56      	bgt.n	80065aa <rint+0xca>
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	da2b      	bge.n	8006558 <rint+0x78>
 8006500:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006504:	4302      	orrs	r2, r0
 8006506:	d023      	beq.n	8006550 <rint+0x70>
 8006508:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800650c:	4302      	orrs	r2, r0
 800650e:	4254      	negs	r4, r2
 8006510:	4314      	orrs	r4, r2
 8006512:	0c4b      	lsrs	r3, r1, #17
 8006514:	0b24      	lsrs	r4, r4, #12
 8006516:	045b      	lsls	r3, r3, #17
 8006518:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800651c:	ea44 0103 	orr.w	r1, r4, r3
 8006520:	460b      	mov	r3, r1
 8006522:	492f      	ldr	r1, [pc, #188]	; (80065e0 <rint+0x100>)
 8006524:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006528:	e9d1 6700 	ldrd	r6, r7, [r1]
 800652c:	4602      	mov	r2, r0
 800652e:	4639      	mov	r1, r7
 8006530:	4630      	mov	r0, r6
 8006532:	f7f9 fe57 	bl	80001e4 <__adddf3>
 8006536:	e9cd 0100 	strd	r0, r1, [sp]
 800653a:	463b      	mov	r3, r7
 800653c:	4632      	mov	r2, r6
 800653e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006542:	f7f9 fe4d 	bl	80001e0 <__aeabi_dsub>
 8006546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800654a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800654e:	4639      	mov	r1, r7
 8006550:	ec41 0b10 	vmov	d0, r0, r1
 8006554:	b003      	add	sp, #12
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <rint+0x104>)
 800655a:	4132      	asrs	r2, r6
 800655c:	ea01 0702 	and.w	r7, r1, r2
 8006560:	4307      	orrs	r7, r0
 8006562:	d0f5      	beq.n	8006550 <rint+0x70>
 8006564:	0852      	lsrs	r2, r2, #1
 8006566:	4011      	ands	r1, r2
 8006568:	430c      	orrs	r4, r1
 800656a:	d00b      	beq.n	8006584 <rint+0xa4>
 800656c:	ea23 0202 	bic.w	r2, r3, r2
 8006570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006574:	2e13      	cmp	r6, #19
 8006576:	fa43 f306 	asr.w	r3, r3, r6
 800657a:	bf0c      	ite	eq
 800657c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006580:	2400      	movne	r4, #0
 8006582:	4313      	orrs	r3, r2
 8006584:	4916      	ldr	r1, [pc, #88]	; (80065e0 <rint+0x100>)
 8006586:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800658a:	4622      	mov	r2, r4
 800658c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	f7f9 fe26 	bl	80001e4 <__adddf3>
 8006598:	e9cd 0100 	strd	r0, r1, [sp]
 800659c:	4622      	mov	r2, r4
 800659e:	462b      	mov	r3, r5
 80065a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a4:	f7f9 fe1c 	bl	80001e0 <__aeabi_dsub>
 80065a8:	e7d2      	b.n	8006550 <rint+0x70>
 80065aa:	2e33      	cmp	r6, #51	; 0x33
 80065ac:	dd07      	ble.n	80065be <rint+0xde>
 80065ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065b2:	d1cd      	bne.n	8006550 <rint+0x70>
 80065b4:	ee10 2a10 	vmov	r2, s0
 80065b8:	f7f9 fe14 	bl	80001e4 <__adddf3>
 80065bc:	e7c8      	b.n	8006550 <rint+0x70>
 80065be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80065c2:	f04f 32ff 	mov.w	r2, #4294967295
 80065c6:	40f2      	lsrs	r2, r6
 80065c8:	4210      	tst	r0, r2
 80065ca:	d0c1      	beq.n	8006550 <rint+0x70>
 80065cc:	0852      	lsrs	r2, r2, #1
 80065ce:	4210      	tst	r0, r2
 80065d0:	bf1f      	itttt	ne
 80065d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80065d6:	ea20 0202 	bicne.w	r2, r0, r2
 80065da:	4134      	asrne	r4, r6
 80065dc:	4314      	orrne	r4, r2
 80065de:	e7d1      	b.n	8006584 <rint+0xa4>
 80065e0:	08006980 	.word	0x08006980
 80065e4:	000fffff 	.word	0x000fffff

080065e8 <scalbn>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	ec55 4b10 	vmov	r4, r5, d0
 80065ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80065f2:	4606      	mov	r6, r0
 80065f4:	462b      	mov	r3, r5
 80065f6:	b9aa      	cbnz	r2, 8006624 <scalbn+0x3c>
 80065f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065fc:	4323      	orrs	r3, r4
 80065fe:	d03b      	beq.n	8006678 <scalbn+0x90>
 8006600:	4b31      	ldr	r3, [pc, #196]	; (80066c8 <scalbn+0xe0>)
 8006602:	4629      	mov	r1, r5
 8006604:	2200      	movs	r2, #0
 8006606:	ee10 0a10 	vmov	r0, s0
 800660a:	f7f9 ffa1 	bl	8000550 <__aeabi_dmul>
 800660e:	4b2f      	ldr	r3, [pc, #188]	; (80066cc <scalbn+0xe4>)
 8006610:	429e      	cmp	r6, r3
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
 8006616:	da12      	bge.n	800663e <scalbn+0x56>
 8006618:	a327      	add	r3, pc, #156	; (adr r3, 80066b8 <scalbn+0xd0>)
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f7f9 ff97 	bl	8000550 <__aeabi_dmul>
 8006622:	e009      	b.n	8006638 <scalbn+0x50>
 8006624:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006628:	428a      	cmp	r2, r1
 800662a:	d10c      	bne.n	8006646 <scalbn+0x5e>
 800662c:	ee10 2a10 	vmov	r2, s0
 8006630:	4620      	mov	r0, r4
 8006632:	4629      	mov	r1, r5
 8006634:	f7f9 fdd6 	bl	80001e4 <__adddf3>
 8006638:	4604      	mov	r4, r0
 800663a:	460d      	mov	r5, r1
 800663c:	e01c      	b.n	8006678 <scalbn+0x90>
 800663e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006642:	460b      	mov	r3, r1
 8006644:	3a36      	subs	r2, #54	; 0x36
 8006646:	4432      	add	r2, r6
 8006648:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800664c:	428a      	cmp	r2, r1
 800664e:	dd0b      	ble.n	8006668 <scalbn+0x80>
 8006650:	ec45 4b11 	vmov	d1, r4, r5
 8006654:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80066c0 <scalbn+0xd8>
 8006658:	f000 f83c 	bl	80066d4 <copysign>
 800665c:	a318      	add	r3, pc, #96	; (adr r3, 80066c0 <scalbn+0xd8>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	ec51 0b10 	vmov	r0, r1, d0
 8006666:	e7da      	b.n	800661e <scalbn+0x36>
 8006668:	2a00      	cmp	r2, #0
 800666a:	dd08      	ble.n	800667e <scalbn+0x96>
 800666c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006674:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006678:	ec45 4b10 	vmov	d0, r4, r5
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006682:	da0d      	bge.n	80066a0 <scalbn+0xb8>
 8006684:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006688:	429e      	cmp	r6, r3
 800668a:	ec45 4b11 	vmov	d1, r4, r5
 800668e:	dce1      	bgt.n	8006654 <scalbn+0x6c>
 8006690:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80066b8 <scalbn+0xd0>
 8006694:	f000 f81e 	bl	80066d4 <copysign>
 8006698:	a307      	add	r3, pc, #28	; (adr r3, 80066b8 <scalbn+0xd0>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	e7e0      	b.n	8006662 <scalbn+0x7a>
 80066a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066a4:	3236      	adds	r2, #54	; 0x36
 80066a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	2200      	movs	r2, #0
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <scalbn+0xe8>)
 80066b6:	e7b2      	b.n	800661e <scalbn+0x36>
 80066b8:	c2f8f359 	.word	0xc2f8f359
 80066bc:	01a56e1f 	.word	0x01a56e1f
 80066c0:	8800759c 	.word	0x8800759c
 80066c4:	7e37e43c 	.word	0x7e37e43c
 80066c8:	43500000 	.word	0x43500000
 80066cc:	ffff3cb0 	.word	0xffff3cb0
 80066d0:	3c900000 	.word	0x3c900000

080066d4 <copysign>:
 80066d4:	ec51 0b10 	vmov	r0, r1, d0
 80066d8:	ee11 0a90 	vmov	r0, s3
 80066dc:	ee10 2a10 	vmov	r2, s0
 80066e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80066e8:	ea41 0300 	orr.w	r3, r1, r0
 80066ec:	ec43 2b10 	vmov	d0, r2, r3
 80066f0:	4770      	bx	lr
	...

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
