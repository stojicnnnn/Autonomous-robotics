
kretanje.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08006220  08006220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a0  080064a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080064a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000080  08006528  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08006528  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000945b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d67  00000000  00000000  0002950b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  0002b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162d1  00000000  00000000  0002be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000822f  00000000  00000000  00042131  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082a60  00000000  00000000  0004a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccdc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d94  00000000  00000000  000cce3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006204 	.word	0x08006204

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006204 	.word	0x08006204

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <napred>:
#include <stdint.h>
#include <stdbool.h>
#include "stm32f4xx.h"


void napred(float x,float y,float theta,float v_cr, float w_cr, _Bool smer ){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000eaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eae:	ed87 1a03 	vstr	s2, [r7, #12]
 8000eb2:	edc7 1a02 	vstr	s3, [r7, #8]
 8000eb6:	ed87 2a01 	vstr	s4, [r7, #4]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	70fb      	strb	r3, [r7, #3]
	pid_init();
 8000ebe:	f000 fa69 	bl	8001394 <pid_init>
	if(smer == 1){
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d009      	beq.n	8000edc <napred+0x3c>
		set_theta_smer();
 8000ec8:	f000 fa3a 	bl	8001340 <set_theta_smer>
		set_dist(-1);
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f001 f8ce 	bl	8002070 <set_dist>
		set_or(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f001 f8db 	bl	8002090 <set_or>
 8000eda:	e005      	b.n	8000ee8 <napred+0x48>

	}
	else{
		set_or(0);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f001 f8d7 	bl	8002090 <set_or>
		set_dist(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f001 f8c4 	bl	8002070 <set_dist>
	}
	set_det(smer);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	f001 fc5f 	bl	80027b8 <set_det>

		//set_dist(1);
	while(get_faza()<3){
 8000efa:	e013      	b.n	8000f24 <napred+0x84>
	  set_x(x);
 8000efc:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f00:	f001 fc4a 	bl	8002798 <set_x>
	  set_y(y);
 8000f04:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f08:	f001 fc6c 	bl	80027e4 <set_y>
	  set_theta(theta);
 8000f0c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f10:	f001 fc78 	bl	8002804 <set_theta>
	  set_v_cr(v_cr);
 8000f14:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f18:	f001 f88a 	bl	8002030 <set_v_cr>
	  set_w_cr(w_cr);
 8000f1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f20:	f001 f896 	bl	8002050 <set_w_cr>
	while(get_faza()<3){
 8000f24:	f001 f878 	bl	8002018 <get_faza>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	dde6      	ble.n	8000efc <napred+0x5c>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <motor_init>:
#include <stdbool.h>
#include "biblioteka/pwm.h"
#include "stm32f4xx.h"
#include "biblioteka/motor.h"

void motor_init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0);
 8000f3c:	4b38      	ldr	r3, [pc, #224]	; (8001020 <motor_init+0xe8>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a37      	ldr	r2, [pc, #220]	; (8001020 <motor_init+0xe8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1);
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <motor_init+0xe8>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a34      	ldr	r2, [pc, #208]	; (8001020 <motor_init+0xe8>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(0b11 << 8 * 2);
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <motor_init+0xec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a32      	ldr	r2, [pc, #200]	; (8001024 <motor_init+0xec>)
 8000f5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f5e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 8 * 2);  // DIR A8
 8000f60:	4b30      	ldr	r3, [pc, #192]	; (8001024 <motor_init+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <motor_init+0xec>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(0b11 << 10 * 2);
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <motor_init+0xf0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <motor_init+0xf0>)
 8000f72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000f76:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0b11 << 10 * 2);
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <motor_init+0xf0>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <motor_init+0xf0>)
 8000f7e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000f82:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |=  (0b01 << 10 * 2);  // FLT B10
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <motor_init+0xf0>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <motor_init+0xf0>)
 8000f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f8e:	60d3      	str	r3, [r2, #12]

	GPIOA->MODER &= ~(0b11 << 10 * 2);
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <motor_init+0xec>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a23      	ldr	r2, [pc, #140]	; (8001024 <motor_init+0xec>)
 8000f96:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000f9a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 10 * 2);
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <motor_init+0xec>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <motor_init+0xec>)
 8000fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (0b1 << 10); 			//SLP A10
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <motor_init+0xec>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <motor_init+0xec>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6153      	str	r3, [r2, #20]


	GPIOA->MODER &= ~(0b11 << 9 * 2);	// DIR A9
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <motor_init+0xec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <motor_init+0xec>)
 8000fba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b01 << 9 * 2);
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <motor_init+0xec>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <motor_init+0xec>)
 8000fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0b11 << 6 * 2);    // FLT A6
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <motor_init+0xec>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <motor_init+0xec>)
 8000fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fd6:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(0b11 << 6 * 2);
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <motor_init+0xec>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a11      	ldr	r2, [pc, #68]	; (8001024 <motor_init+0xec>)
 8000fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0b01 << 6 * 2);
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <motor_init+0xec>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <motor_init+0xec>)
 8000fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fee:	60d3      	str	r3, [r2, #12]

	GPIOB->MODER &= ~(0b11 << 8 * 2);
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <motor_init+0xf0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <motor_init+0xf0>)
 8000ff6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ffa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (0b01 << 8 * 2); 	// SLP B8
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <motor_init+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a09      	ldr	r2, [pc, #36]	; (8001028 <motor_init+0xf0>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (0b1 << 8);
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <motor_init+0xf0>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <motor_init+0xf0>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6153      	str	r3, [r2, #20]

}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400

0800102c <inc_2_rad>:
static	float y;
static	float theta;
static	float v;
static	float w;

 float inc_2_rad(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	return ((2*M_PI)/(2048*4));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <inc_2_rad+0x18>)
 8001032:	ee07 3a90 	vmov	s15, r3
}
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	3a490fdb 	.word	0x3a490fdb

08001048 <odometrija>:
	theta=0;
	v=0;
	w=0;
}

void odometrija(int dt){
 8001048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800104c:	ed2d 8b02 	vpush	{d8}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]

	  theta += w;
	  x+= v*(cos(theta));
	  y+= v*(sin(theta));*/

	    dt_sec = dt / 1000.;
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fa10 	bl	800047c <__aeabi_i2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <odometrija+0x26c>)
 8001062:	f7ff fb9f 	bl	80007a4 <__aeabi_ddiv>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	4618      	mov	r0, r3
 800106c:	4621      	mov	r1, r4
 800106e:	f7ff fd47 	bl	8000b00 <__aeabi_d2f>
 8001072:	4602      	mov	r2, r0
 8001074:	4b90      	ldr	r3, [pc, #576]	; (80012b8 <odometrija+0x270>)
 8001076:	601a      	str	r2, [r3, #0]

		 enc_r = enc1_GetInc();
 8001078:	f001 faee 	bl	8002658 <enc1_GetInc>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b8e      	ldr	r3, [pc, #568]	; (80012bc <odometrija+0x274>)
 8001082:	601a      	str	r2, [r3, #0]
		 enc_l = enc2_GetInc();
 8001084:	f001 fb70 	bl	8002768 <enc2_GetInc>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <odometrija+0x278>)
 800108e:	601a      	str	r2, [r3, #0]



		// INC * RAD/INC * 1/s * m
		w_r = enc_r * inc_2_rad() / dt_sec;
 8001090:	4b8a      	ldr	r3, [pc, #552]	; (80012bc <odometrija+0x274>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800109c:	f7ff ffc6 	bl	800102c <inc_2_rad>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	ee68 6a27 	vmul.f32	s13, s16, s15
 80010a8:	4b83      	ldr	r3, [pc, #524]	; (80012b8 <odometrija+0x270>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b2:	4b84      	ldr	r3, [pc, #528]	; (80012c4 <odometrija+0x27c>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
		w_l = enc_l * inc_2_rad() / dt_sec;
 80010b8:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <odometrija+0x278>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010c4:	f7ff ffb2 	bl	800102c <inc_2_rad>
 80010c8:	eef0 7a40 	vmov.f32	s15, s0
 80010cc:	ee68 6a27 	vmul.f32	s13, s16, s15
 80010d0:	4b79      	ldr	r3, [pc, #484]	; (80012b8 <odometrija+0x270>)
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010da:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <odometrija+0x280>)
 80010dc:	edc3 7a00 	vstr	s15, [r3]

		v_r = w_r * (d_tocka/2);
 80010e0:	4b78      	ldr	r3, [pc, #480]	; (80012c4 <odometrija+0x27c>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80010ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ee:	4b77      	ldr	r3, [pc, #476]	; (80012cc <odometrija+0x284>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
		v_l = w_l * (d_tocka/2);
 80010f4:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <odometrija+0x280>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80010fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <odometrija+0x288>)
 8001104:	edc3 7a00 	vstr	s15, [r3]

		 v = (v_r + v_l)/2;
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <odometrija+0x284>)
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <odometrija+0x288>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001118:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <odometrija+0x28c>)
 8001122:	edc3 7a00 	vstr	s15, [r3]
		 w = (v_r - v_l)/razmak_tockova;
 8001126:	4b69      	ldr	r3, [pc, #420]	; (80012cc <odometrija+0x284>)
 8001128:	ed93 7a00 	vldr	s14, [r3]
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <odometrija+0x288>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	eddf 6a68 	vldr	s13, [pc, #416]	; 80012d8 <odometrija+0x290>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <odometrija+0x294>)
 8001140:	edc3 7a00 	vstr	s15, [r3]

		 theta = normalize_angle(theta+ w * dt_sec);
 8001144:	4b65      	ldr	r3, [pc, #404]	; (80012dc <odometrija+0x294>)
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <odometrija+0x270>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001154:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <odometrija+0x298>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f000 f965 	bl	8001430 <normalize_angle>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <odometrija+0x298>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
		x +=v* cos(theta + (w*dt_sec/2)) * dt_sec;
 8001170:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <odometrija+0x29c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f993 	bl	80004a0 <__aeabi_f2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <odometrija+0x28c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f98c 	bl	80004a0 <__aeabi_f2d>
 8001188:	4680      	mov	r8, r0
 800118a:	4689      	mov	r9, r1
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <odometrija+0x294>)
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <odometrija+0x270>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011a4:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <odometrija+0x298>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	ee17 0a90 	vmov	r0, s15
 80011b2:	f7ff f975 	bl	80004a0 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b10 	vmov	d0, r2, r3
 80011be:	f002 fd23 	bl	8003c08 <cos>
 80011c2:	ec53 2b10 	vmov	r2, r3, d0
 80011c6:	4640      	mov	r0, r8
 80011c8:	4649      	mov	r1, r9
 80011ca:	f7ff f9c1 	bl	8000550 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4690      	mov	r8, r2
 80011d4:	4699      	mov	r9, r3
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <odometrija+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f960 	bl	80004a0 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4640      	mov	r0, r8
 80011e6:	4649      	mov	r1, r9
 80011e8:	f7ff f9b2 	bl	8000550 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7fe fff6 	bl	80001e4 <__adddf3>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f7ff fc7e 	bl	8000b00 <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <odometrija+0x29c>)
 8001208:	601a      	str	r2, [r3, #0]
		y += v * sin(theta + (w*dt_sec/2)) * dt_sec;
 800120a:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <odometrija+0x2a0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f946 	bl	80004a0 <__aeabi_f2d>
 8001214:	4604      	mov	r4, r0
 8001216:	460d      	mov	r5, r1
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <odometrija+0x28c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f93f 	bl	80004a0 <__aeabi_f2d>
 8001222:	4680      	mov	r8, r0
 8001224:	4689      	mov	r9, r1
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <odometrija+0x294>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <odometrija+0x270>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800123a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <odometrija+0x298>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f928 	bl	80004a0 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	ec43 2b10 	vmov	d0, r2, r3
 8001258:	f002 fd1a 	bl	8003c90 <sin>
 800125c:	ec53 2b10 	vmov	r2, r3, d0
 8001260:	4640      	mov	r0, r8
 8001262:	4649      	mov	r1, r9
 8001264:	f7ff f974 	bl	8000550 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4690      	mov	r8, r2
 800126e:	4699      	mov	r9, r3
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <odometrija+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f913 	bl	80004a0 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4640      	mov	r0, r8
 8001280:	4649      	mov	r1, r9
 8001282:	f7ff f965 	bl	8000550 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4620      	mov	r0, r4
 800128c:	4629      	mov	r1, r5
 800128e:	f7fe ffa9 	bl	80001e4 <__adddf3>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	4618      	mov	r0, r3
 8001298:	4621      	mov	r1, r4
 800129a:	f7ff fc31 	bl	8000b00 <__aeabi_d2f>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <odometrija+0x2a0>)
 80012a2:	601a      	str	r2, [r3, #0]


}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	ecbd 8b02 	vpop	{d8}
 80012ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012b2:	bf00      	nop
 80012b4:	408f4000 	.word	0x408f4000
 80012b8:	200000ac 	.word	0x200000ac
 80012bc:	200000a8 	.word	0x200000a8
 80012c0:	200000a4 	.word	0x200000a4
 80012c4:	200000a0 	.word	0x200000a0
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	200001ac 	.word	0x200001ac
 80012d0:	200001a4 	.word	0x200001a4
 80012d4:	200000bc 	.word	0x200000bc
 80012d8:	43960000 	.word	0x43960000
 80012dc:	200000c0 	.word	0x200000c0
 80012e0:	200000b8 	.word	0x200000b8
 80012e4:	200000b0 	.word	0x200000b0
 80012e8:	200000b4 	.word	0x200000b4

080012ec <get_x>:

float get_x (){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return x;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <get_x+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	200000b0 	.word	0x200000b0

08001308 <get_y>:

float get_y (){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return y;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <get_y+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	200000b4 	.word	0x200000b4

08001324 <get_theta>:

float get_theta (){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return theta;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <get_theta+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200000b8 	.word	0x200000b8

08001340 <set_theta_smer>:

void set_theta_smer (){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	 theta=+M_PI;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <set_theta_smer+0x14>)
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <set_theta_smer+0x18>)
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200000b8 	.word	0x200000b8
 8001358:	40490fdb 	.word	0x40490fdb

0800135c <get_w>:

float get_w (){
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
	return w;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <get_w+0x18>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
}
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	200000c0 	.word	0x200000c0

08001378 <get_v>:

float get_v (){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	return v;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <get_v+0x18>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	ee07 3a90 	vmov	s15, r3
}
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	200000bc 	.word	0x200000bc

08001394 <pid_init>:
static float const w_min = -6;
static float const vel_max = 2100;
static float const vel_min = -2100;

void pid_init ()
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	e=0;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <pid_init+0x68>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
	ei=0;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <pid_init+0x6c>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
	ed=0;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <pid_init+0x70>)
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
	e_pre=0;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <pid_init+0x74>)
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	u=0;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <pid_init+0x78>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
	faza=0;
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <pid_init+0x7c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
	v_dref=0;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <pid_init+0x80>)
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
	v_lref=0;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <pid_init+0x84>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	w_cr=0;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <pid_init+0x88>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	v_cr=0;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <pid_init+0x8c>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
	brojac=0;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <pid_init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
	izlazak=0;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <pid_init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	200000c4 	.word	0x200000c4
 8001400:	200000c8 	.word	0x200000c8
 8001404:	200000cc 	.word	0x200000cc
 8001408:	200000d0 	.word	0x200000d0
 800140c:	200000e8 	.word	0x200000e8
 8001410:	200000f4 	.word	0x200000f4
 8001414:	200001b8 	.word	0x200001b8
 8001418:	200001b0 	.word	0x200001b0
 800141c:	200001b4 	.word	0x200001b4
 8001420:	200001bc 	.word	0x200001bc
 8001424:	200000e0 	.word	0x200000e0
 8001428:	200000ec 	.word	0x200000ec
 800142c:	00000000 	.word	0x00000000

08001430 <normalize_angle>:

float  normalize_angle(float angle){
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle > M_PI){
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff f830 	bl	80004a0 <__aeabi_f2d>
 8001440:	a31d      	add	r3, pc, #116	; (adr r3, 80014b8 <normalize_angle+0x88>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fb13 	bl	8000a70 <__aeabi_dcmpgt>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d010      	beq.n	8001472 <normalize_angle+0x42>
        angle = angle - M_PI*2;
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f825 	bl	80004a0 <__aeabi_f2d>
 8001456:	a31a      	add	r3, pc, #104	; (adr r3, 80014c0 <normalize_angle+0x90>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe fec0 	bl	80001e0 <__aeabi_dsub>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	4618      	mov	r0, r3
 8001466:	4621      	mov	r1, r4
 8001468:	f7ff fb4a 	bl	8000b00 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	e01a      	b.n	80014a8 <normalize_angle+0x78>
    }
	else if (angle < - M_PI){
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff f814 	bl	80004a0 <__aeabi_f2d>
 8001478:	a313      	add	r3, pc, #76	; (adr r3, 80014c8 <normalize_angle+0x98>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff fad9 	bl	8000a34 <__aeabi_dcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00f      	beq.n	80014a8 <normalize_angle+0x78>
        angle +=M_PI*2 ;
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff f809 	bl	80004a0 <__aeabi_f2d>
 800148e:	a30c      	add	r3, pc, #48	; (adr r3, 80014c0 <normalize_angle+0x90>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fea6 	bl	80001e4 <__adddf3>
 8001498:	4603      	mov	r3, r0
 800149a:	460c      	mov	r4, r1
 800149c:	4618      	mov	r0, r3
 800149e:	4621      	mov	r1, r4
 80014a0:	f7ff fb2e 	bl	8000b00 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	607b      	str	r3, [r7, #4]
    }

    return angle;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	ee07 3a90 	vmov	s15, r3
}
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	54442d18 	.word	0x54442d18
 80014bc:	400921fb 	.word	0x400921fb
 80014c0:	54442d18 	.word	0x54442d18
 80014c4:	401921fb 	.word	0x401921fb
 80014c8:	54442d18 	.word	0x54442d18
 80014cc:	c00921fb 	.word	0xc00921fb

080014d0 <pid_brzina>:
    return angle;
}


float pid_brzina (float Kp,float Ki, float Kd,float ref_v,float mes_v)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80014da:	edc7 0a04 	vstr	s1, [r7, #16]
 80014de:	ed87 1a03 	vstr	s2, [r7, #12]
 80014e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80014e6:	ed87 2a01 	vstr	s4, [r7, #4]


	e=  ref_v - mes_v;
 80014ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <pid_brzina+0x114>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	ei += e;
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <pid_brzina+0x118>)
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <pid_brzina+0x114>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <pid_brzina+0x118>)
 800150e:	edc3 7a00 	vstr	s15, [r3]
	ed = e - e_pre;
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <pid_brzina+0x114>)
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <pid_brzina+0x11c>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <pid_brzina+0x120>)
 8001524:	edc3 7a00 	vstr	s15, [r3]

	 if (ei > EI_MAX)
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <pid_brzina+0x118>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80015f4 <pid_brzina+0x124>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd03      	ble.n	8001544 <pid_brzina+0x74>
	    {
	      ei = EI_MAX;
 800153c:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <pid_brzina+0x128>)
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <pid_brzina+0x118>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00c      	b.n	800155e <pid_brzina+0x8e>
	    }
	  else if (ei < EI_MIN)
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <pid_brzina+0x118>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80015fc <pid_brzina+0x12c>
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d502      	bpl.n	800155e <pid_brzina+0x8e>
	    {
	      ei = EI_MIN;
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <pid_brzina+0x130>)
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <pid_brzina+0x118>)
 800155c:	601a      	str	r2, [r3, #0]
	    }

	  u = Kp * e + Ki * ei + Kd * ed;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <pid_brzina+0x114>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	edd7 7a05 	vldr	s15, [r7, #20]
 8001568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <pid_brzina+0x118>)
 800156e:	edd3 6a00 	vldr	s13, [r3]
 8001572:	edd7 7a04 	vldr	s15, [r7, #16]
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <pid_brzina+0x120>)
 8001580:	edd3 6a00 	vldr	s13, [r3]
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <pid_brzina+0x134>)
 8001592:	edc3 7a00 	vstr	s15, [r3]

	  //smer
	   if (u > U_MAX)
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <pid_brzina+0x134>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001608 <pid_brzina+0x138>
 80015a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	dd03      	ble.n	80015b2 <pid_brzina+0xe2>
	   {
	       u = U_MAX;
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <pid_brzina+0x13c>)
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <pid_brzina+0x134>)
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e00c      	b.n	80015cc <pid_brzina+0xfc>
	   }
	   else if (u < U_MIN)
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <pid_brzina+0x134>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001610 <pid_brzina+0x140>
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d502      	bpl.n	80015cc <pid_brzina+0xfc>
	   {
	  	   u = U_MIN;
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <pid_brzina+0x144>)
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <pid_brzina+0x134>)
 80015ca:	601a      	str	r2, [r3, #0]
	   }


			 return u;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <pid_brzina+0x134>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
	   e_pre = e;

}
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200000c4 	.word	0x200000c4
 80015e8:	200000c8 	.word	0x200000c8
 80015ec:	200000d0 	.word	0x200000d0
 80015f0:	200000cc 	.word	0x200000cc
 80015f4:	447a0000 	.word	0x447a0000
 80015f8:	447a0000 	.word	0x447a0000
 80015fc:	c47a0000 	.word	0xc47a0000
 8001600:	c47a0000 	.word	0xc47a0000
 8001604:	200000e8 	.word	0x200000e8
 8001608:	45034000 	.word	0x45034000
 800160c:	45034000 	.word	0x45034000
 8001610:	c5034000 	.word	0xc5034000
 8001614:	c5034000 	.word	0xc5034000

08001618 <racunanje_brzine>:

void racunanje_brzine(float v, float w){
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001622:	edc7 0a00 	vstr	s1, [r7]
	  if (v > v_max){
 8001626:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80016c4 <racunanje_brzine+0xac>
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd02      	ble.n	800163e <racunanje_brzine+0x26>
		       v = v_max;
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <racunanje_brzine+0xb0>)
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	e00a      	b.n	8001654 <racunanje_brzine+0x3c>
		   }
	  else if (v < v_min){
 800163e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80016cc <racunanje_brzine+0xb4>
 8001642:	edd7 7a01 	vldr	s15, [r7, #4]
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d501      	bpl.n	8001654 <racunanje_brzine+0x3c>
		  	   v = v_min;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <racunanje_brzine+0xb8>)
 8001652:	607b      	str	r3, [r7, #4]
		   }
	  if (w > w_max){
 8001654:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001658:	edd7 7a00 	vldr	s15, [r7]
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd02      	ble.n	800166c <racunanje_brzine+0x54>
		       w = w_max;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <racunanje_brzine+0xbc>)
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	e00a      	b.n	8001682 <racunanje_brzine+0x6a>
		   }
	  else if (w < w_min){
 800166c:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001670:	edd7 7a00 	vldr	s15, [r7]
 8001674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	d501      	bpl.n	8001682 <racunanje_brzine+0x6a>
		  	   w = w_min;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <racunanje_brzine+0xc0>)
 8001680:	603b      	str	r3, [r7, #0]
		   }

	  vel_d= v + w*(razmak_tockova/2);
 8001682:	edd7 7a00 	vldr	s15, [r7]
 8001686:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80016dc <racunanje_brzine+0xc4>
 800168a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <racunanje_brzine+0xc8>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
	  vel_l= v - w*(razmak_tockova/2);}
 800169c:	edd7 7a00 	vldr	s15, [r7]
 80016a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016dc <racunanje_brzine+0xc4>
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <racunanje_brzine+0xcc>)
 80016b2:	edc3 7a00 	vstr	s15, [r3]
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	45034000 	.word	0x45034000
 80016c8:	45034000 	.word	0x45034000
 80016cc:	c5034000 	.word	0xc5034000
 80016d0:	c5034000 	.word	0xc5034000
 80016d4:	40c00000 	.word	0x40c00000
 80016d8:	c0c00000 	.word	0xc0c00000
 80016dc:	43160000 	.word	0x43160000
 80016e0:	200001a8 	.word	0x200001a8
 80016e4:	200001a0 	.word	0x200001a0

080016e8 <regulacija_pozicije>:
	 motor2_set_PWM(vel_l1);*/




void regulacija_pozicije(float x_ref, float y_ref, float theta_ref, float x, float y, float theta){
 80016e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	ed87 0a05 	vstr	s0, [r7, #20]
 80016f4:	edc7 0a04 	vstr	s1, [r7, #16]
 80016f8:	ed87 1a03 	vstr	s2, [r7, #12]
 80016fc:	edc7 1a02 	vstr	s3, [r7, #8]
 8001700:	ed87 2a01 	vstr	s4, [r7, #4]
 8001704:	edc7 2a00 	vstr	s5, [r7]
//dodati mozda i regulator zbog prepucavanja ugla pri brzoj rotaciji

		v_pid=0;
 8001708:	4b9b      	ldr	r3, [pc, #620]	; (8001978 <regulacija_pozicije+0x290>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
		w_pid=0;
 8001710:	4b9a      	ldr	r3, [pc, #616]	; (800197c <regulacija_pozicije+0x294>)
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
		theta=theta;
		dist =smer* sqrt(pow((x_ref-x),2)+pow((y_ref-y),2));
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <regulacija_pozicije+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fead 	bl	800047c <__aeabi_i2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	ed97 7a05 	vldr	s14, [r7, #20]
 800172a:	edd7 7a02 	vldr	s15, [r7, #8]
 800172e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001732:	ee17 0a90 	vmov	r0, s15
 8001736:	f7fe feb3 	bl	80004a0 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8001968 <regulacija_pozicije+0x280>
 8001742:	ec43 2b10 	vmov	d0, r2, r3
 8001746:	f002 faed 	bl	8003d24 <pow>
 800174a:	ec59 8b10 	vmov	r8, r9, d0
 800174e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001752:	edd7 7a01 	vldr	s15, [r7, #4]
 8001756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175a:	ee17 0a90 	vmov	r0, s15
 800175e:	f7fe fe9f 	bl	80004a0 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001968 <regulacija_pozicije+0x280>
 800176a:	ec43 2b10 	vmov	d0, r2, r3
 800176e:	f002 fad9 	bl	8003d24 <pow>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	4640      	mov	r0, r8
 8001778:	4649      	mov	r1, r9
 800177a:	f7fe fd33 	bl	80001e4 <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	ec43 2b17 	vmov	d7, r2, r3
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f002 fc39 	bl	8004004 <sqrt>
 8001792:	ec53 2b10 	vmov	r2, r3, d0
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7fe fed9 	bl	8000550 <__aeabi_dmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	4618      	mov	r0, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	f7ff f9ab 	bl	8000b00 <__aeabi_d2f>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <regulacija_pozicije+0x29c>)
 80017ae:	601a      	str	r2, [r3, #0]
		//distx = sqrt(pow(x_ref-x,2));
		//disty = sqrt(pow(y_ref-y,2));
		phi = atan2(y_ref - y, x_ref - x);
 80017b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	ee17 0a90 	vmov	r0, s15
 80017c0:	f7fe fe6e 	bl	80004a0 <__aeabi_f2d>
 80017c4:	4604      	mov	r4, r0
 80017c6:	460d      	mov	r5, r1
 80017c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80017cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	ee17 0a90 	vmov	r0, s15
 80017d8:	f7fe fe62 	bl	80004a0 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	ec43 2b11 	vmov	d1, r2, r3
 80017e4:	ec45 4b10 	vmov	d0, r4, r5
 80017e8:	f002 fa9a 	bl	8003d20 <atan2>
 80017ec:	ec54 3b10 	vmov	r3, r4, d0
 80017f0:	4618      	mov	r0, r3
 80017f2:	4621      	mov	r1, r4
 80017f4:	f7ff f984 	bl	8000b00 <__aeabi_d2f>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b63      	ldr	r3, [pc, #396]	; (8001988 <regulacija_pozicije+0x2a0>)
 80017fc:	601a      	str	r2, [r3, #0]
		phi_error = normalize_angle(phi - theta ); //promjeni ovo
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <regulacija_pozicije+0x2a0>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	edd7 7a00 	vldr	s15, [r7]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	eeb0 0a67 	vmov.f32	s0, s15
 8001810:	f7ff fe0e 	bl	8001430 <normalize_angle>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	4b5c      	ldr	r3, [pc, #368]	; (800198c <regulacija_pozicije+0x2a4>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		phi_prim_error = normalize_angle(  theta_ref - theta );
 800181e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001822:	edd7 7a00 	vldr	s15, [r7]
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f7ff fdff 	bl	8001430 <normalize_angle>
 8001832:	eef0 7a40 	vmov.f32	s15, s0
 8001836:	4b56      	ldr	r3, [pc, #344]	; (8001990 <regulacija_pozicije+0x2a8>)
 8001838:	edc3 7a00 	vstr	s15, [r3]

	eps_dist = 6;
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <regulacija_pozicije+0x2ac>)
 800183e:	4a56      	ldr	r2, [pc, #344]	; (8001998 <regulacija_pozicije+0x2b0>)
 8001840:	601a      	str	r2, [r3, #0]
	eps_theta = (4*M_PI)/180;
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <regulacija_pozicije+0x2b4>)
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <regulacija_pozicije+0x2b8>)
 8001846:	601a      	str	r2, [r3, #0]


	Kp_w =9; //6 bilo 3.5 bilo
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <regulacija_pozicije+0x2bc>)
 800184a:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <regulacija_pozicije+0x2c0>)
 800184c:	601a      	str	r2, [r3, #0]
	Kp_d = 3.8;
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <regulacija_pozicije+0x2c4>)
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <regulacija_pozicije+0x2c8>)
 8001852:	601a      	str	r2, [r3, #0]
		brojac++;
	}
	else
		dist=fabs(dist);
*/
	greska=(phi_prim_error*180/M_PI);
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <regulacija_pozicije+0x2a8>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80019b4 <regulacija_pozicije+0x2cc>
 800185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001862:	ee17 0a90 	vmov	r0, s15
 8001866:	f7fe fe1b 	bl	80004a0 <__aeabi_f2d>
 800186a:	a341      	add	r3, pc, #260	; (adr r3, 8001970 <regulacija_pozicije+0x288>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe ff98 	bl	80007a4 <__aeabi_ddiv>
 8001874:	4603      	mov	r3, r0
 8001876:	460c      	mov	r4, r1
 8001878:	4618      	mov	r0, r3
 800187a:	4621      	mov	r1, r4
 800187c:	f7ff f940 	bl	8000b00 <__aeabi_d2f>
 8001880:	4602      	mov	r2, r0
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <regulacija_pozicije+0x2d0>)
 8001884:	601a      	str	r2, [r3, #0]

	if(faza == 0){
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <regulacija_pozicije+0x2d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80a2 	bne.w	80019d4 <regulacija_pozicije+0x2ec>
test1=1;
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <regulacija_pozicije+0x2d8>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
		v_pid=0;
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <regulacija_pozicije+0x290>)
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 800189e:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <regulacija_pozicije+0x2dc>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d802      	bhi.n	80018b8 <regulacija_pozicije+0x1d0>
			Kp_w=14;
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <regulacija_pozicije+0x2bc>)
 80018b4:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <regulacija_pozicije+0x2e0>)
 80018b6:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_error;
 80018b8:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <regulacija_pozicije+0x2bc>)
 80018ba:	ed93 7a00 	vldr	s14, [r3]
 80018be:	4b33      	ldr	r3, [pc, #204]	; (800198c <regulacija_pozicije+0x2a4>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <regulacija_pozicije+0x294>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]

		greska1=(phi_error*180/M_PI);
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <regulacija_pozicije+0x2a4>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80019b4 <regulacija_pozicije+0x2cc>
 80018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018dc:	ee17 0a90 	vmov	r0, s15
 80018e0:	f7fe fdde 	bl	80004a0 <__aeabi_f2d>
 80018e4:	a322      	add	r3, pc, #136	; (adr r3, 8001970 <regulacija_pozicije+0x288>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe ff5b 	bl	80007a4 <__aeabi_ddiv>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	4618      	mov	r0, r3
 80018f4:	4621      	mov	r1, r4
 80018f6:	f7ff f903 	bl	8000b00 <__aeabi_d2f>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <regulacija_pozicije+0x2e4>)
 80018fe:	601a      	str	r2, [r3, #0]
		uslov = get_w ();
 8001900:	f7ff fd2c 	bl	800135c <get_w>
 8001904:	eef0 7a40 	vmov.f32	s15, s0
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <regulacija_pozicije+0x2e8>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
		//if((fabs(phi_prim_error) <= eps_theta))
		//	faza=1;
		if((fabs(phi_error) <= eps_theta) & (fabs(uslov) <= 1)){
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <regulacija_pozicije+0x2a4>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	eeb0 7ae7 	vabs.f32	s14, s15
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <regulacija_pozicije+0x2b4>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	bf94      	ite	ls
 8001928:	2301      	movls	r3, #1
 800192a:	2300      	movhi	r3, #0
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <regulacija_pozicije+0x2e8>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef0 7ae7 	vabs.f32	s15, s15
 8001938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	bf94      	ite	ls
 8001946:	2301      	movls	r3, #1
 8001948:	2300      	movhi	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4013      	ands	r3, r2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 814c 	beq.w	8001bee <regulacija_pozicije+0x506>
			//0.001 greska bila
			faza=1;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <regulacija_pozicije+0x2d4>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
			test1=2;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <regulacija_pozicije+0x2d8>)
 800195e:	2202      	movs	r2, #2
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e144      	b.n	8001bee <regulacija_pozicije+0x506>
 8001964:	f3af 8000 	nop.w
 8001968:	00000000 	.word	0x00000000
 800196c:	40000000 	.word	0x40000000
 8001970:	54442d18 	.word	0x54442d18
 8001974:	400921fb 	.word	0x400921fb
 8001978:	20000100 	.word	0x20000100
 800197c:	20000104 	.word	0x20000104
 8001980:	20000000 	.word	0x20000000
 8001984:	20000108 	.word	0x20000108
 8001988:	2000010c 	.word	0x2000010c
 800198c:	20000110 	.word	0x20000110
 8001990:	20000114 	.word	0x20000114
 8001994:	20000118 	.word	0x20000118
 8001998:	40c00000 	.word	0x40c00000
 800199c:	2000011c 	.word	0x2000011c
 80019a0:	3d8efa35 	.word	0x3d8efa35
 80019a4:	20000120 	.word	0x20000120
 80019a8:	41100000 	.word	0x41100000
 80019ac:	20000124 	.word	0x20000124
 80019b0:	40733333 	.word	0x40733333
 80019b4:	43340000 	.word	0x43340000
 80019b8:	200000d4 	.word	0x200000d4
 80019bc:	200000f4 	.word	0x200000f4
 80019c0:	200000f0 	.word	0x200000f0
 80019c4:	200001b4 	.word	0x200001b4
 80019c8:	41600000 	.word	0x41600000
 80019cc:	200000d8 	.word	0x200000d8
 80019d0:	20000128 	.word	0x20000128

		}
	}
	else if (faza ==1){
 80019d4:	4ba4      	ldr	r3, [pc, #656]	; (8001c68 <regulacija_pozicije+0x580>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f040 80bb 	bne.w	8001b54 <regulacija_pozicije+0x46c>
	if(v_cr > 400){
 80019de:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <regulacija_pozicije+0x584>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001c70 <regulacija_pozicije+0x588>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	dd02      	ble.n	80019f8 <regulacija_pozicije+0x310>
			Kp_d=2.3;
 80019f2:	4ba0      	ldr	r3, [pc, #640]	; (8001c74 <regulacija_pozicije+0x58c>)
 80019f4:	4aa0      	ldr	r2, [pc, #640]	; (8001c78 <regulacija_pozicije+0x590>)
 80019f6:	601a      	str	r2, [r3, #0]
		}
	if(v_cr > 800){
 80019f8:	4b9c      	ldr	r3, [pc, #624]	; (8001c6c <regulacija_pozicije+0x584>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001c7c <regulacija_pozicije+0x594>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd02      	ble.n	8001a12 <regulacija_pozicije+0x32a>
				Kp_d=1.7;
 8001a0c:	4b99      	ldr	r3, [pc, #612]	; (8001c74 <regulacija_pozicije+0x58c>)
 8001a0e:	4a9c      	ldr	r2, [pc, #624]	; (8001c80 <regulacija_pozicije+0x598>)
 8001a10:	601a      	str	r2, [r3, #0]
			}
	if(v_cr > 1190){
 8001a12:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <regulacija_pozicije+0x584>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001c84 <regulacija_pozicije+0x59c>
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dd02      	ble.n	8001a2c <regulacija_pozicije+0x344>
					Kp_d=1.69;
 8001a26:	4b93      	ldr	r3, [pc, #588]	; (8001c74 <regulacija_pozicije+0x58c>)
 8001a28:	4a97      	ldr	r2, [pc, #604]	; (8001c88 <regulacija_pozicije+0x5a0>)
 8001a2a:	601a      	str	r2, [r3, #0]
				}
		w_pid = Kp_w * phi_error;
 8001a2c:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <regulacija_pozicije+0x5a4>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	4b97      	ldr	r3, [pc, #604]	; (8001c90 <regulacija_pozicije+0x5a8>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	4b95      	ldr	r3, [pc, #596]	; (8001c94 <regulacija_pozicije+0x5ac>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
		v_pid = Kp_d * dist;
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <regulacija_pozicije+0x58c>)
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <regulacija_pozicije+0x5b0>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a52:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
		fleg=dist;
 8001a58:	4b8f      	ldr	r3, [pc, #572]	; (8001c98 <regulacija_pozicije+0x5b0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <regulacija_pozicije+0x5b8>)
 8001a5e:	6013      	str	r3, [r2, #0]
		if((fleg<50) & (fleg>-50)){
 8001a60:	4b8f      	ldr	r3, [pc, #572]	; (8001ca0 <regulacija_pozicije+0x5b8>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001ca4 <regulacija_pozicije+0x5bc>
 8001a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	bf4c      	ite	mi
 8001a74:	2301      	movmi	r3, #1
 8001a76:	2300      	movpl	r3, #0
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <regulacija_pozicije+0x5b8>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001ca8 <regulacija_pozicije+0x5c0>
 8001a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	bfcc      	ite	gt
 8001a8e:	2301      	movgt	r3, #1
 8001a90:	2300      	movle	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01a      	beq.n	8001ad2 <regulacija_pozicije+0x3ea>
			izlazak++;
 8001a9c:	4b83      	ldr	r3, [pc, #524]	; (8001cac <regulacija_pozicije+0x5c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a82      	ldr	r2, [pc, #520]	; (8001cac <regulacija_pozicije+0x5c4>)
 8001aa4:	6013      	str	r3, [r2, #0]
			Kp_w=0;
 8001aa6:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <regulacija_pozicije+0x5a4>)
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
			w_pid = Kp_w * phi_error;
 8001aae:	4b77      	ldr	r3, [pc, #476]	; (8001c8c <regulacija_pozicije+0x5a4>)
 8001ab0:	ed93 7a00 	vldr	s14, [r3]
 8001ab4:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <regulacija_pozicije+0x5a8>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <regulacija_pozicije+0x5ac>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
			if(izlazak>=80){
 8001ac4:	4b79      	ldr	r3, [pc, #484]	; (8001cac <regulacija_pozicije+0x5c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b4f      	cmp	r3, #79	; 0x4f
 8001aca:	dd02      	ble.n	8001ad2 <regulacija_pozicije+0x3ea>
			faza=2;
 8001acc:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <regulacija_pozicije+0x580>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	601a      	str	r2, [r3, #0]
			}
		}


		greska1=(phi_error*180/M_PI);
 8001ad2:	4b6f      	ldr	r3, [pc, #444]	; (8001c90 <regulacija_pozicije+0x5a8>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001cb0 <regulacija_pozicije+0x5c8>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	ee17 0a90 	vmov	r0, s15
 8001ae4:	f7fe fcdc 	bl	80004a0 <__aeabi_f2d>
 8001ae8:	a35d      	add	r3, pc, #372	; (adr r3, 8001c60 <regulacija_pozicije+0x578>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fe59 	bl	80007a4 <__aeabi_ddiv>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	4618      	mov	r0, r3
 8001af8:	4621      	mov	r1, r4
 8001afa:	f7ff f801 	bl	8000b00 <__aeabi_d2f>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <regulacija_pozicije+0x5cc>)
 8001b02:	601a      	str	r2, [r3, #0]
		if ((fabs(dist) <= eps_dist) & (fabs(get_v()) <= 10))
 8001b04:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <regulacija_pozicije+0x5b0>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <regulacija_pozicije+0x5d0>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	bf94      	ite	ls
 8001b1e:	2301      	movls	r3, #1
 8001b20:	2300      	movhi	r3, #0
 8001b22:	b2dc      	uxtb	r4, r3
 8001b24:	f7ff fc28 	bl	8001378 <get_v>
 8001b28:	eef0 7a40 	vmov.f32	s15, s0
 8001b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8001b30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	bf94      	ite	ls
 8001b3e:	2301      	movls	r3, #1
 8001b40:	2300      	movhi	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4023      	ands	r3, r4
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d050      	beq.n	8001bee <regulacija_pozicije+0x506>
			faza =2;
 8001b4c:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <regulacija_pozicije+0x580>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e04c      	b.n	8001bee <regulacija_pozicije+0x506>
			//faza= 2;
		//else if( (fabs(disty) <= eps_disty) & (fabs(get_v()) <= 10))
				//	faza= 2;

	}
	else if (faza ==2){
 8001b54:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <regulacija_pozicije+0x580>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d148      	bne.n	8001bee <regulacija_pozicije+0x506>
		v_pid=0;
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
		if(w_cr<=2)
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <regulacija_pozicije+0x5d4>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	d802      	bhi.n	8001b7e <regulacija_pozicije+0x496>
					Kp_w=11;
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <regulacija_pozicije+0x5a4>)
 8001b7a:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <regulacija_pozicije+0x5d8>)
 8001b7c:	601a      	str	r2, [r3, #0]
		w_pid=Kp_w * phi_prim_error;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <regulacija_pozicije+0x5a4>)
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <regulacija_pozicije+0x5dc>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <regulacija_pozicije+0x5ac>)
 8001b90:	edc3 7a00 	vstr	s15, [r3]


		uslov = get_w ();
 8001b94:	f7ff fbe2 	bl	800135c <get_w>
 8001b98:	eef0 7a40 	vmov.f32	s15, s0
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <regulacija_pozicije+0x5e0>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
		if((fabs(phi_prim_error) <= eps_theta) & (fabs(uslov) <= 1)){
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <regulacija_pozicije+0x5dc>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bac:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <regulacija_pozicije+0x5e4>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	bf94      	ite	ls
 8001bbc:	2301      	movls	r3, #1
 8001bbe:	2300      	movhi	r3, #0
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <regulacija_pozicije+0x5e0>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	bf94      	ite	ls
 8001bda:	2301      	movls	r3, #1
 8001bdc:	2300      	movhi	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4013      	ands	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <regulacija_pozicije+0x506>
			faza=3;
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <regulacija_pozicije+0x580>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	601a      	str	r2, [r3, #0]
		}
	}



	if( (v_pid < v_cr) & (v_pid > -v_cr))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <regulacija_pozicije+0x584>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	bf4c      	ite	mi
 8001c04:	2301      	movmi	r3, #1
 8001c06:	2300      	movpl	r3, #0
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <regulacija_pozicije+0x584>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	eeb1 7a67 	vneg.f32	s14, s15
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	bf4c      	ite	mi
 8001c24:	2301      	movmi	r3, #1
 8001c26:	2300      	movpl	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <regulacija_pozicije+0x554>
		v = v_pid;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <regulacija_pozicije+0x5e8>)
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e060      	b.n	8001cfe <regulacija_pozicije+0x616>
	else if (v_pid>v_cr)
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <regulacija_pozicije+0x5b4>)
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <regulacija_pozicije+0x584>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	dd40      	ble.n	8001cd4 <regulacija_pozicije+0x5ec>
		v=v_cr;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <regulacija_pozicije+0x584>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <regulacija_pozicije+0x5e8>)
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e050      	b.n	8001cfe <regulacija_pozicije+0x616>
 8001c5c:	f3af 8000 	nop.w
 8001c60:	54442d18 	.word	0x54442d18
 8001c64:	400921fb 	.word	0x400921fb
 8001c68:	200000f4 	.word	0x200000f4
 8001c6c:	200001bc 	.word	0x200001bc
 8001c70:	43c80000 	.word	0x43c80000
 8001c74:	20000124 	.word	0x20000124
 8001c78:	40133333 	.word	0x40133333
 8001c7c:	44480000 	.word	0x44480000
 8001c80:	3fd9999a 	.word	0x3fd9999a
 8001c84:	4494c000 	.word	0x4494c000
 8001c88:	3fd851ec 	.word	0x3fd851ec
 8001c8c:	20000120 	.word	0x20000120
 8001c90:	20000110 	.word	0x20000110
 8001c94:	20000104 	.word	0x20000104
 8001c98:	20000108 	.word	0x20000108
 8001c9c:	20000100 	.word	0x20000100
 8001ca0:	200000dc 	.word	0x200000dc
 8001ca4:	42480000 	.word	0x42480000
 8001ca8:	c2480000 	.word	0xc2480000
 8001cac:	200000ec 	.word	0x200000ec
 8001cb0:	43340000 	.word	0x43340000
 8001cb4:	200000d8 	.word	0x200000d8
 8001cb8:	20000118 	.word	0x20000118
 8001cbc:	200001b4 	.word	0x200001b4
 8001cc0:	41300000 	.word	0x41300000
 8001cc4:	20000114 	.word	0x20000114
 8001cc8:	20000128 	.word	0x20000128
 8001ccc:	2000011c 	.word	0x2000011c
 8001cd0:	200000fc 	.word	0x200000fc
	else if(v_pid<-v_cr)
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <regulacija_pozicije+0x6d0>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb1 7a67 	vneg.f32	s14, s15
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <regulacija_pozicije+0x6d4>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd07      	ble.n	8001cfe <regulacija_pozicije+0x616>
		v = -v_cr;
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <regulacija_pozicije+0x6d0>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	eef1 7a67 	vneg.f32	s15, s15
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <regulacija_pozicije+0x6d8>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]



	if( (w_pid < w_cr) & (w_pid > -w_cr))
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <regulacija_pozicije+0x6dc>)
 8001d00:	ed93 7a00 	vldr	s14, [r3]
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	bf4c      	ite	mi
 8001d14:	2301      	movmi	r3, #1
 8001d16:	2300      	movpl	r3, #0
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	eeb1 7a67 	vneg.f32	s14, s15
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <regulacija_pozicije+0x6dc>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	bf4c      	ite	mi
 8001d34:	2301      	movmi	r3, #1
 8001d36:	2300      	movpl	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <regulacija_pozicije+0x664>
		w = w_pid;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <regulacija_pozicije+0x6dc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <regulacija_pozicije+0x6e4>)
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e024      	b.n	8001d96 <regulacija_pozicije+0x6ae>
	else if (w_pid>w_cr)
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <regulacija_pozicije+0x6dc>)
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	dd04      	ble.n	8001d6c <regulacija_pozicije+0x684>
		w=w_cr;
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <regulacija_pozicije+0x6e4>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e014      	b.n	8001d96 <regulacija_pozicije+0x6ae>
	else if(w_pid<-w_cr)
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	eeb1 7a67 	vneg.f32	s14, s15
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <regulacija_pozicije+0x6dc>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	dd07      	ble.n	8001d96 <regulacija_pozicije+0x6ae>
		w = -w_cr;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <regulacija_pozicije+0x6e0>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eef1 7a67 	vneg.f32	s15, s15
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <regulacija_pozicije+0x6e4>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]

	racunanje_brzine(v,w);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <regulacija_pozicije+0x6d8>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <regulacija_pozicije+0x6e4>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	eef0 0a47 	vmov.f32	s1, s14
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	f7ff fc35 	bl	8001618 <racunanje_brzine>

}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db8:	200001bc 	.word	0x200001bc
 8001dbc:	20000100 	.word	0x20000100
 8001dc0:	200000fc 	.word	0x200000fc
 8001dc4:	20000104 	.word	0x20000104
 8001dc8:	200001b4 	.word	0x200001b4
 8001dcc:	200000f8 	.word	0x200000f8

08001dd0 <regulacija_brzine>:



void regulacija_brzine(){
 8001dd0:	b598      	push	{r3, r4, r7, lr}
 8001dd2:	af00      	add	r7, sp, #0


//saturacija trazene
	 if (vel_d > vel_max){
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <regulacija_brzine+0x210>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001fe4 <regulacija_brzine+0x214>
 8001dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	dd03      	ble.n	8001df0 <regulacija_brzine+0x20>
		 vel_d = vel_max;
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <regulacija_brzine+0x218>)
 8001dea:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <regulacija_brzine+0x210>)
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e00c      	b.n	8001e0a <regulacija_brzine+0x3a>
	 }
     else if (vel_d < vel_min){
 8001df0:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <regulacija_brzine+0x210>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001fec <regulacija_brzine+0x21c>
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	d502      	bpl.n	8001e0a <regulacija_brzine+0x3a>
    	 vel_d = vel_min;
 8001e04:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <regulacija_brzine+0x220>)
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <regulacija_brzine+0x210>)
 8001e08:	601a      	str	r2, [r3, #0]
     }

	 if (vel_l > vel_max){
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <regulacija_brzine+0x224>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001fe4 <regulacija_brzine+0x214>
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd03      	ble.n	8001e26 <regulacija_brzine+0x56>
			 vel_l = vel_max;
 8001e1e:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <regulacija_brzine+0x218>)
 8001e20:	4b74      	ldr	r3, [pc, #464]	; (8001ff4 <regulacija_brzine+0x224>)
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e00c      	b.n	8001e40 <regulacija_brzine+0x70>
		 }
	 else if (vel_l < vel_min){
 8001e26:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <regulacija_brzine+0x224>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001fec <regulacija_brzine+0x21c>
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d502      	bpl.n	8001e40 <regulacija_brzine+0x70>
	    	 vel_l = vel_min;
 8001e3a:	4a6d      	ldr	r2, [pc, #436]	; (8001ff0 <regulacija_brzine+0x220>)
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <regulacija_brzine+0x224>)
 8001e3e:	601a      	str	r2, [r3, #0]
	     }

// ubrzanje
	//

	 if(v_dref < vel_d)
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <regulacija_brzine+0x228>)
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <regulacija_brzine+0x210>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	d513      	bpl.n	8001e7e <regulacija_brzine+0xae>
		 v_dref +=0.7;
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <regulacija_brzine+0x228>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb20 	bl	80004a0 <__aeabi_f2d>
 8001e60:	a35d      	add	r3, pc, #372	; (adr r3, 8001fd8 <regulacija_brzine+0x208>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe f9bd 	bl	80001e4 <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe45 	bl	8000b00 <__aeabi_d2f>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <regulacija_brzine+0x228>)
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e022      	b.n	8001ec4 <regulacija_brzine+0xf4>
	 else if(v_dref > vel_d)
 8001e7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <regulacija_brzine+0x228>)
 8001e80:	ed93 7a00 	vldr	s14, [r3]
 8001e84:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <regulacija_brzine+0x210>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dd13      	ble.n	8001ebc <regulacija_brzine+0xec>
		//v_dref = vel_d - 0.6;
		 v_dref -= 0.7;
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <regulacija_brzine+0x228>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb01 	bl	80004a0 <__aeabi_f2d>
 8001e9e:	a34e      	add	r3, pc, #312	; (adr r3, 8001fd8 <regulacija_brzine+0x208>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe f99c 	bl	80001e0 <__aeabi_dsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	4618      	mov	r0, r3
 8001eae:	4621      	mov	r1, r4
 8001eb0:	f7fe fe26 	bl	8000b00 <__aeabi_d2f>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <regulacija_brzine+0x228>)
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e003      	b.n	8001ec4 <regulacija_brzine+0xf4>
	else
		 v_dref=vel_d;
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <regulacija_brzine+0x210>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <regulacija_brzine+0x228>)
 8001ec2:	6013      	str	r3, [r2, #0]

	 if(v_lref < vel_l)
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <regulacija_brzine+0x22c>)
 8001ec6:	ed93 7a00 	vldr	s14, [r3]
 8001eca:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <regulacija_brzine+0x224>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d513      	bpl.n	8001f02 <regulacija_brzine+0x132>
		v_lref += 0.7;
 8001eda:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <regulacija_brzine+0x22c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fade 	bl	80004a0 <__aeabi_f2d>
 8001ee4:	a33c      	add	r3, pc, #240	; (adr r3, 8001fd8 <regulacija_brzine+0x208>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe f97b 	bl	80001e4 <__adddf3>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f7fe fe03 	bl	8000b00 <__aeabi_d2f>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <regulacija_brzine+0x22c>)
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e022      	b.n	8001f48 <regulacija_brzine+0x178>
	 else if(v_lref > vel_l)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <regulacija_brzine+0x22c>)
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <regulacija_brzine+0x224>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	dd13      	ble.n	8001f40 <regulacija_brzine+0x170>
		// v_lref=vel_l - 0.6;
		 v_lref -= 0.7;
 8001f18:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <regulacija_brzine+0x22c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fabf 	bl	80004a0 <__aeabi_f2d>
 8001f22:	a32d      	add	r3, pc, #180	; (adr r3, 8001fd8 <regulacija_brzine+0x208>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	f7fe f95a 	bl	80001e0 <__aeabi_dsub>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	4618      	mov	r0, r3
 8001f32:	4621      	mov	r1, r4
 8001f34:	f7fe fde4 	bl	8000b00 <__aeabi_d2f>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <regulacija_brzine+0x22c>)
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e003      	b.n	8001f48 <regulacija_brzine+0x178>
	 else
		 v_lref=vel_l;
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <regulacija_brzine+0x224>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <regulacija_brzine+0x22c>)
 8001f46:	6013      	str	r3, [r2, #0]




	 u_l=pid_brzina(4, 0.105, 0, v_lref, v_l); //kp 4.3 bilo
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <regulacija_brzine+0x22c>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <regulacija_brzine+0x230>)
 8001f50:	ed93 7a00 	vldr	s14, [r3]
 8001f54:	eeb0 2a47 	vmov.f32	s4, s14
 8001f58:	eef0 1a67 	vmov.f32	s3, s15
 8001f5c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8002004 <regulacija_brzine+0x234>
 8001f60:	eddf 0a29 	vldr	s1, [pc, #164]	; 8002008 <regulacija_brzine+0x238>
 8001f64:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001f68:	f7ff fab2 	bl	80014d0 <pid_brzina>
 8001f6c:	eef0 7a40 	vmov.f32	s15, s0
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <regulacija_brzine+0x23c>)
 8001f72:	edc3 7a00 	vstr	s15, [r3]
	 u_d=pid_brzina(4, 0.105, 0, v_dref, v_r);
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <regulacija_brzine+0x228>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <regulacija_brzine+0x240>)
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	eeb0 2a47 	vmov.f32	s4, s14
 8001f86:	eef0 1a67 	vmov.f32	s3, s15
 8001f8a:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002004 <regulacija_brzine+0x234>
 8001f8e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8002008 <regulacija_brzine+0x238>
 8001f92:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001f96:	f7ff fa9b 	bl	80014d0 <pid_brzina>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <regulacija_brzine+0x244>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]

	 motor1_set_PWM((int16_t)u_d); //probaj ovde da dodas mnozenje sa -or ili tako nes
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <regulacija_brzine+0x244>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 3a90 	vmov	r3, s15
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f943 	bl	8002240 <motor1_set_PWM>
	 motor2_set_PWM((int16_t)u_l);
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <regulacija_brzine+0x23c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc4:	ee17 3a90 	vmov	r3, s15
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f97e 	bl	80022cc <motor2_set_PWM>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd98      	pop	{r3, r4, r7, pc}
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	66666666 	.word	0x66666666
 8001fdc:	3fe66666 	.word	0x3fe66666
 8001fe0:	200001a8 	.word	0x200001a8
 8001fe4:	45034000 	.word	0x45034000
 8001fe8:	45034000 	.word	0x45034000
 8001fec:	c5034000 	.word	0xc5034000
 8001ff0:	c5034000 	.word	0xc5034000
 8001ff4:	200001a0 	.word	0x200001a0
 8001ff8:	200001b8 	.word	0x200001b8
 8001ffc:	200001b0 	.word	0x200001b0
 8002000:	200001a4 	.word	0x200001a4
 8002004:	00000000 	.word	0x00000000
 8002008:	3dd70a3d 	.word	0x3dd70a3d
 800200c:	20000130 	.word	0x20000130
 8002010:	200001ac 	.word	0x200001ac
 8002014:	2000012c 	.word	0x2000012c

08002018 <get_faza>:


int get_faza(){
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	return faza;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <get_faza+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200000f4 	.word	0x200000f4

08002030 <set_v_cr>:

void set_faza(){
	faza=0;
}

void set_v_cr(float novo){
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	ed87 0a01 	vstr	s0, [r7, #4]
	v_cr=novo;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <set_v_cr+0x1c>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200001bc 	.word	0x200001bc

08002050 <set_w_cr>:
void set_w_cr(float novo){
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	ed87 0a01 	vstr	s0, [r7, #4]
	w_cr=novo;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <set_w_cr+0x1c>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	200001b4 	.word	0x200001b4

08002070 <set_dist>:

void set_dist(int a){
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	smer=a;
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <set_dist+0x1c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000

08002090 <set_or>:
void set_or(novo){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	or=novo;
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <set_or+0x1c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200000e4 	.word	0x200000e4

080020b0 <init_PWM>:

static uint32_t jedan;
static uint32_t dva;

void init_PWM()
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

	//M1_PWM -> PC7 ( TIM3_CH2), AF2
	//M2_PWM -> PB6 ( TIM4_CH1), AF2
	RCC->AHB1ENR |= (1 << 1);
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <init_PWM+0x17c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4a5c      	ldr	r2, [pc, #368]	; (800222c <init_PWM+0x17c>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 2);
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <init_PWM+0x17c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <init_PWM+0x17c>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~(0b11 << 6*2);   // PB6
 80020cc:	4b58      	ldr	r3, [pc, #352]	; (8002230 <init_PWM+0x180>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a57      	ldr	r2, [pc, #348]	; (8002230 <init_PWM+0x180>)
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0b10 << 6*2);
 80020d8:	4b55      	ldr	r3, [pc, #340]	; (8002230 <init_PWM+0x180>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a54      	ldr	r2, [pc, #336]	; (8002230 <init_PWM+0x180>)
 80020de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020e2:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(0b1111 << 6 * 4);
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <init_PWM+0x180>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <init_PWM+0x180>)
 80020ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80020ee:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (0b0010 << 6*4);
 80020f0:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <init_PWM+0x180>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <init_PWM+0x180>)
 80020f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fa:	6213      	str	r3, [r2, #32]

	GPIOC->MODER &= ~(0b11 << 7*2);   //PC7
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <init_PWM+0x184>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <init_PWM+0x184>)
 8002102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002106:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b10 << 7*2);
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <init_PWM+0x184>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a49      	ldr	r2, [pc, #292]	; (8002234 <init_PWM+0x184>)
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[0] &= ~(0b1111 << 7 * 4);
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <init_PWM+0x184>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a46      	ldr	r2, [pc, #280]	; (8002234 <init_PWM+0x184>)
 800211a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800211e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0b0010 << 7*4);
 8002120:	4b44      	ldr	r3, [pc, #272]	; (8002234 <init_PWM+0x184>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a43      	ldr	r2, [pc, #268]	; (8002234 <init_PWM+0x184>)
 8002126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212a:	6213      	str	r3, [r2, #32]

	//TIM3

	RCC->APB1ENR |= (1 << 1);
 800212c:	4b3f      	ldr	r3, [pc, #252]	; (800222c <init_PWM+0x17c>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a3e      	ldr	r2, [pc, #248]	; (800222c <init_PWM+0x17c>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
		                    // 84MHZ
	TIM3->PSC = 1-1; //84MHZ
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <init_PWM+0x188>)
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 2100-1; // 20KHZ
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <init_PWM+0x188>)
 8002140:	f640 0233 	movw	r2, #2099	; 0x833
 8002144:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = 0.0;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <init_PWM+0x188>)
 8002148:	2200      	movs	r2, #0
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM3->CCMR1 &= ~(0b111 << 12);
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <init_PWM+0x188>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a39      	ldr	r2, [pc, #228]	; (8002238 <init_PWM+0x188>)
 8002152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002156:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (0b110 << 12);
 8002158:	4b37      	ldr	r3, [pc, #220]	; (8002238 <init_PWM+0x188>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a36      	ldr	r2, [pc, #216]	; (8002238 <init_PWM+0x188>)
 800215e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002162:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= (1 << 11);
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <init_PWM+0x188>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4a33      	ldr	r2, [pc, #204]	; (8002238 <init_PWM+0x188>)
 800216a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216e:	6193      	str	r3, [r2, #24]

	TIM3->CCR2 = 0UL; // NE ZZNAM STA JE
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <init_PWM+0x188>)
 8002172:	2200      	movs	r2, #0
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->EGR |= (1 << 0);
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <init_PWM+0x188>)
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <init_PWM+0x188>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6153      	str	r3, [r2, #20]
	TIM3->CCER |=(1 << 4);
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <init_PWM+0x188>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <init_PWM+0x188>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= (1 << 7);
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <init_PWM+0x188>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <init_PWM+0x188>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (0b1 << 0);
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <init_PWM+0x188>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <init_PWM+0x188>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]

	// TIM4

	RCC->APB1ENR |= (1 << 2);
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <init_PWM+0x17c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <init_PWM+0x17c>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
			                    // 84MHZ
	TIM4->PSC = 1-1; //84MHZ
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <init_PWM+0x18c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 2100-1; // 20KHZ
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <init_PWM+0x18c>)
 80021ba:	f640 0233 	movw	r2, #2099	; 0x833
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR1 = 0.0;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <init_PWM+0x18c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
	///TIM4->CCR1 = (500-1)*0.5; //FAKTOR ISPUNE ?
	TIM4->CCMR1 &= ~(0b111 << 4);
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <init_PWM+0x18c>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <init_PWM+0x18c>)
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (0b110 << 4);
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <init_PWM+0x18c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <init_PWM+0x18c>)
 80021d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021dc:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1 << 3);
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <init_PWM+0x18c>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a16      	ldr	r2, [pc, #88]	; (800223c <init_PWM+0x18c>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6193      	str	r3, [r2, #24]

	TIM4->CCR1 = 0UL; // NE ZZNAM STA JE
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <init_PWM+0x18c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->EGR |= (1 << 0);
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <init_PWM+0x18c>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <init_PWM+0x18c>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6153      	str	r3, [r2, #20]
	TIM4->CCER |=(1 << 0);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <init_PWM+0x18c>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <init_PWM+0x18c>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
	TIM4->CR1 |= (1 << 7);
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <init_PWM+0x18c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <init_PWM+0x18c>)
 800220e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002212:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= (0b1 << 0);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <init_PWM+0x18c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <init_PWM+0x18c>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800

08002240 <motor1_set_PWM>:


// TODO UINXT promeniti tip duc
void motor1_set_PWM(int16_t duc)
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
	 if(duc<0) {
 800224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	da06      	bge.n	8002260 <motor1_set_PWM+0x20>
			// GPIOA->MODER &=  ~(0b01 << 8 * 2);
		 GPIOA->ODR &= ~(0b01 << 8);
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <motor1_set_PWM+0x80>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <motor1_set_PWM+0x80>)
 8002258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800225c:	6153      	str	r3, [r2, #20]
 800225e:	e009      	b.n	8002274 <motor1_set_PWM+0x34>
		}
	 else if(duc>=0){
 8002260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db05      	blt.n	8002274 <motor1_set_PWM+0x34>
		 GPIOA->ODR |= (0b01 << 8);
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <motor1_set_PWM+0x80>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <motor1_set_PWM+0x80>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6153      	str	r3, [r2, #20]
	 }
	 duc = fabs(duc);
 8002274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f8ff 	bl	800047c <__aeabi_i2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fe fc10 	bl	8000ab0 <__aeabi_d2iz>
 8002290:	4603      	mov	r3, r0
 8002292:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 8002294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002298:	f640 0233 	movw	r2, #2099	; 0x833
 800229c:	4293      	cmp	r3, r2
 800229e:	dd02      	ble.n	80022a6 <motor1_set_PWM+0x66>
		duc = 2100-1;
 80022a0:	f640 0333 	movw	r3, #2099	; 0x833
 80022a4:	80fb      	strh	r3, [r7, #6]

	}
	TIM3->CCR2 =  duc;
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <motor1_set_PWM+0x84>)
 80022a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ac:	6393      	str	r3, [r2, #56]	; 0x38
	jedan = TIM3->CCR2;
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <motor1_set_PWM+0x84>)
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <motor1_set_PWM+0x88>)
 80022b4:	6013      	str	r3, [r2, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdb0      	pop	{r4, r5, r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	20000134 	.word	0x20000134

080022cc <motor2_set_PWM>:

void motor2_set_PWM(int16_t duc)
{
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	80fb      	strh	r3, [r7, #6]

	if(duc<0) {
 80022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da06      	bge.n	80022ec <motor2_set_PWM+0x20>
				GPIOA->ODR &= ~(0b01 << 9);
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <motor2_set_PWM+0x80>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <motor2_set_PWM+0x80>)
 80022e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022e8:	6153      	str	r3, [r2, #20]
 80022ea:	e009      	b.n	8002300 <motor2_set_PWM+0x34>
			}
	else if(duc>=0){
 80022ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db05      	blt.n	8002300 <motor2_set_PWM+0x34>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
		GPIOA->ODR |=  (0b01 << 9);
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <motor2_set_PWM+0x80>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <motor2_set_PWM+0x80>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6153      	str	r3, [r2, #20]
	}
	duc = fabs(duc);
 8002300:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8b9 	bl	800047c <__aeabi_i2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4614      	mov	r4, r2
 8002310:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe fbca 	bl	8000ab0 <__aeabi_d2iz>
 800231c:	4603      	mov	r3, r0
 800231e:	80fb      	strh	r3, [r7, #6]
	if (duc > 2100-1){
 8002320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002324:	f640 0233 	movw	r2, #2099	; 0x833
 8002328:	4293      	cmp	r3, r2
 800232a:	dd02      	ble.n	8002332 <motor2_set_PWM+0x66>
			duc = 2100-1;
 800232c:	f640 0333 	movw	r3, #2099	; 0x833
 8002330:	80fb      	strh	r3, [r7, #6]

		}
	TIM4->CCR1 = duc;
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <motor2_set_PWM+0x84>)
 8002334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002338:	6353      	str	r3, [r2, #52]	; 0x34
	dva = TIM4->CCR1;
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <motor2_set_PWM+0x84>)
 800233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <motor2_set_PWM+0x88>)
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bdb0      	pop	{r4, r5, r7, pc}
 800234a:	bf00      	nop
 800234c:	40020000 	.word	0x40020000
 8002350:	40000800 	.word	0x40000800
 8002354:	20000138 	.word	0x20000138

08002358 <init_senzor>:
#include <stdint.h>
#include <stdbool.h>
#include "biblioteka/tajmer.h"
#include "biblioteka/senzori.h"

void init_senzor(){
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0


	RCC->AHB1ENR |= (1 << 2); // c port
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <init_senzor+0x130>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a49      	ldr	r2, [pc, #292]	; (8002488 <init_senzor+0x130>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 0);  // a port
 8002368:	4b47      	ldr	r3, [pc, #284]	; (8002488 <init_senzor+0x130>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <init_senzor+0x130>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
	//1.  C12
			GPIOC->MODER &= ~(0b11 << 12*2);  // kliruje
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <init_senzor+0x134>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a44      	ldr	r2, [pc, #272]	; (800248c <init_senzor+0x134>)
 800237a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800237e:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 12*2);  // stavlja ga na input
 8002380:	4b42      	ldr	r3, [pc, #264]	; (800248c <init_senzor+0x134>)
 8002382:	4a42      	ldr	r2, [pc, #264]	; (800248c <init_senzor+0x134>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 12*2);  // kliruje pin za input bitova
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <init_senzor+0x134>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a3f      	ldr	r2, [pc, #252]	; (800248c <init_senzor+0x134>)
 800238e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002392:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 12*2);  // Setujem pull-down
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <init_senzor+0x134>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a3c      	ldr	r2, [pc, #240]	; (800248c <init_senzor+0x134>)
 800239a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800239e:	60d3      	str	r3, [r2, #12]
		//2.   C3
			GPIOC->MODER &= ~(0b11 << 3*2);  // kliruje
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <init_senzor+0x134>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a39      	ldr	r2, [pc, #228]	; (800248c <init_senzor+0x134>)
 80023a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023aa:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 3*2);  // stavlja ga na input
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <init_senzor+0x134>)
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <init_senzor+0x134>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 3*2);  // kliruje pin za input bitova
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <init_senzor+0x134>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a34      	ldr	r2, [pc, #208]	; (800248c <init_senzor+0x134>)
 80023ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023be:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 3*2);  // Setujem pull-down
 80023c0:	4b32      	ldr	r3, [pc, #200]	; (800248c <init_senzor+0x134>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <init_senzor+0x134>)
 80023c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ca:	60d3      	str	r3, [r2, #12]
		//3.  A15
			GPIOA->MODER &= ~(0b11 << 15*2);  // kliruje
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <init_senzor+0x138>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <init_senzor+0x138>)
 80023d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80023d6:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (0b00 << 15*2);  // stavlja ga na input
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <init_senzor+0x138>)
 80023da:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <init_senzor+0x138>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6013      	str	r3, [r2, #0]
			GPIOA->PUPDR &= ~(0b11 << 15*2);  // kliruje pin za input bitova
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <init_senzor+0x138>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <init_senzor+0x138>)
 80023e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80023ea:	60d3      	str	r3, [r2, #12]
			GPIOA->PUPDR |= (0b10 << 15*2);  // Setujem pull-down
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <init_senzor+0x138>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <init_senzor+0x138>)
 80023f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	60d3      	str	r3, [r2, #12]

			//ZADNJA STRANA
			//1.  c13
			GPIOC->MODER &= ~(0b11 << 13*2);  // kliruje
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <init_senzor+0x134>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a23      	ldr	r2, [pc, #140]	; (800248c <init_senzor+0x134>)
 80023fe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002402:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 13*2);  // stavlja ga na input
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <init_senzor+0x134>)
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <init_senzor+0x134>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 13*2);  // kliruje pin za input bitova
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <init_senzor+0x134>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <init_senzor+0x134>)
 8002412:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002416:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 13*2);  // Setujem pull-down
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <init_senzor+0x134>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <init_senzor+0x134>)
 800241e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002422:	60d3      	str	r3, [r2, #12]
			//2.   C0
			GPIOC->MODER &= ~(0b11 << 0*2);  // kliruje
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <init_senzor+0x134>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <init_senzor+0x134>)
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 0*2);  // stavlja ga na input
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <init_senzor+0x134>)
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <init_senzor+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 0*2);  // kliruje pin za input bitova
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <init_senzor+0x134>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <init_senzor+0x134>)
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 0*2);  // Setujem pull-down
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <init_senzor+0x134>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <init_senzor+0x134>)
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	60d3      	str	r3, [r2, #12]
			//3.  C2
			GPIOC->MODER &= ~(0b11 << 2*2);  // kliruje
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <init_senzor+0x134>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <init_senzor+0x134>)
 8002456:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800245a:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (0b00 << 2*2);  // stavlja ga na input
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <init_senzor+0x134>)
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <init_senzor+0x134>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6013      	str	r3, [r2, #0]
			GPIOC->PUPDR &= ~(0b11 << 2*2);  // kliruje pin za input bitova
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <init_senzor+0x134>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a08      	ldr	r2, [pc, #32]	; (800248c <init_senzor+0x134>)
 800246a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800246e:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (0b10 << 2*2);  // Setujem pull-down*/
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <init_senzor+0x134>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a05      	ldr	r2, [pc, #20]	; (800248c <init_senzor+0x134>)
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40020800 	.word	0x40020800
 8002490:	40020000 	.word	0x40020000

08002494 <tajmer_init>:
static float c=0;



void tajmer_init()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  tim2_init ();
 8002498:	f000 f80a 	bl	80024b0 <tim2_init>

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <enc_init>:

void enc_init(){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	 enc1_init();
 80024a4:	f000 f85e 	bl	8002564 <enc1_init>
	 enc2_init();
 80024a8:	f000 f8ee 	bl	8002688 <enc2_init>
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <tim2_init>:

static void
tim2_init ()
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= (0b1 << 0);
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <tim2_init+0xa8>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <tim2_init+0xa8>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44

  // 84MHz -> 1MHz
  TIM1->PSC = 84 - 1;
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <tim2_init+0xac>)
 80024c4:	2253      	movs	r2, #83	; 0x53
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
  // 1MHz -> 1kHz
  TIM1->ARR = 1000 - 1;
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <tim2_init+0xac>)
 80024ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM1->CR1 &= ~(0b1 << 1);
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <tim2_init+0xac>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <tim2_init+0xac>)
 80024d6:	f023 0302 	bic.w	r3, r3, #2
 80024da:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~(0b1 << 2);
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <tim2_init+0xac>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1e      	ldr	r2, [pc, #120]	; (800255c <tim2_init+0xac>)
 80024e2:	f023 0304 	bic.w	r3, r3, #4
 80024e6:	6013      	str	r3, [r2, #0]

  TIM1->EGR |= (0b1 << 0);
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <tim2_init+0xac>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4a1b      	ldr	r2, [pc, #108]	; (800255c <tim2_init+0xac>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6153      	str	r3, [r2, #20]

  TIM1->DIER |= (0b1 << 0);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <tim2_init+0xac>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a18      	ldr	r2, [pc, #96]	; (800255c <tim2_init+0xac>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	60d3      	str	r3, [r2, #12]

  while (!(TIM1->SR & (0b1 << 0)))
 8002500:	e000      	b.n	8002504 <tim2_init+0x54>
    {
      __NOP();
 8002502:	bf00      	nop
  while (!(TIM1->SR & (0b1 << 0)))
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <tim2_init+0xac>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f8      	beq.n	8002502 <tim2_init+0x52>
    }
  TIM1->SR &= ~(0b1 << 0);
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <tim2_init+0xac>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <tim2_init+0xac>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6113      	str	r3, [r2, #16]

  TIM1->CR1 |= (0b1 << 2);
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <tim2_init+0xac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <tim2_init+0xac>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6013      	str	r3, [r2, #0]

  uint8_t const TIM1_PREKID = 25;
 8002528:	2319      	movs	r3, #25
 800252a:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[0] |= (0b1 << TIM1_PREKID);
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <tim2_init+0xb0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f202 	lsl.w	r2, r1, r2
 8002538:	4611      	mov	r1, r2
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <tim2_init+0xb0>)
 800253c:	430b      	orrs	r3, r1
 800253e:	6013      	str	r3, [r2, #0]

  TIM1->CR1 |= (0b1 << 0);
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <tim2_init+0xac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <tim2_init+0xac>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40023800 	.word	0x40023800
 800255c:	40010000 	.word	0x40010000
 8002560:	e000e100 	.word	0xe000e100

08002564 <enc1_init>:

static void enc1_init()
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // A port
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <enc1_init+0xe8>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <enc1_init+0xe8>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 1); // B port
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <enc1_init+0xe8>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4a34      	ldr	r2, [pc, #208]	; (800264c <enc1_init+0xe8>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6313      	str	r3, [r2, #48]	; 0x30



	GPIOB->MODER |=  (0b10 << 3*2); //B3
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <enc1_init+0xec>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a32      	ldr	r2, [pc, #200]	; (8002650 <enc1_init+0xec>)
 8002586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0b10 << 5*2); //A5
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <enc1_init+0xf0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a30      	ldr	r2, [pc, #192]	; (8002654 <enc1_init+0xf0>)
 8002592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002596:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] |=  (0b0001 << 3* 4);
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <enc1_init+0xec>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <enc1_init+0xec>)
 800259e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (0b0001 << 5* 4);//SAD OVDE OBRNUO
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <enc1_init+0xf0>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a2a      	ldr	r2, [pc, #168]	; (8002654 <enc1_init+0xf0>)
 80025aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ae:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 0);
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <enc1_init+0xe8>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <enc1_init+0xe8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 0;
 80025bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF;
 80025c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c


	TIM2->SMCR &= ~(0b111 << 0 * 3);
 80025ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	6093      	str	r3, [r2, #8]
	TIM2->SMCR |=  (0b011 << 0 * 3);
 80025de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e8:	f043 0303 	orr.w	r3, r3, #3
 80025ec:	6093      	str	r3, [r2, #8]

	TIM2->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 80025ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fc:	f023 0303 	bic.w	r3, r3, #3
 8002600:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8002602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6193      	str	r3, [r2, #24]

	TIM2->CR1 |= (0b1 << 0);
 8002616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]
	TIM2->EGR |= (0b1 << 0);
 8002626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6153      	str	r3, [r2, #20]

	TIM2->CNT = 65536/2;
 8002636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800263a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400
 8002654:	40020000 	.word	0x40020000

08002658 <enc1_GetInc>:

int16_t enc1_GetInc()
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
	int16_t cnt = TIM2->CNT- 65536/2;
 800265e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	b29b      	uxth	r3, r3
 8002666:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800266a:	b29b      	uxth	r3, r3
 800266c:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT = 65536/2;
 800266e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002672:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 8002678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <enc2_init>:


static void enc2_init()
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 0); // a port
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <enc2_init+0xd4>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a32      	ldr	r2, [pc, #200]	; (800275c <enc2_init+0xd4>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= (0b10 << 0*2); // A0
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <enc2_init+0xd8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a30      	ldr	r2, [pc, #192]	; (8002760 <enc2_init+0xd8>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (0b10 << 1*2); // A1
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <enc2_init+0xd8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2d      	ldr	r2, [pc, #180]	; (8002760 <enc2_init+0xd8>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6013      	str	r3, [r2, #0]

		GPIOA->OSPEEDR |= (0b11 << 0*2);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <enc2_init+0xd8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <enc2_init+0xd8>)
 80026b6:	f043 0303 	orr.w	r3, r3, #3
 80026ba:	6093      	str	r3, [r2, #8]
		GPIOA->OSPEEDR |= (0b11 << 1*2);
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <enc2_init+0xd8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <enc2_init+0xd8>)
 80026c2:	f043 030c 	orr.w	r3, r3, #12
 80026c6:	6093      	str	r3, [r2, #8]

		GPIOA->AFR[0] |= (0b0010<< 0*4);
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <enc2_init+0xd8>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a24      	ldr	r2, [pc, #144]	; (8002760 <enc2_init+0xd8>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (0b0010 << 1*4);
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <enc2_init+0xd8>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a21      	ldr	r2, [pc, #132]	; (8002760 <enc2_init+0xd8>)
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (0b1 << 3);
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <enc2_init+0xd4>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <enc2_init+0xd4>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->PSC = 0;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <enc2_init+0xdc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 0xFFFF;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <enc2_init+0xdc>)
 80026f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM5->SMCR &= ~(0b111 << 0 * 3);
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <enc2_init+0xdc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a19      	ldr	r2, [pc, #100]	; (8002764 <enc2_init+0xdc>)
 8002700:	f023 0307 	bic.w	r3, r3, #7
 8002704:	6093      	str	r3, [r2, #8]
	TIM5->SMCR |=  (0b011 << 0 * 3);
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <enc2_init+0xdc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <enc2_init+0xdc>)
 800270c:	f043 0303 	orr.w	r3, r3, #3
 8002710:	6093      	str	r3, [r2, #8]

	TIM5->CCMR1 &= ~(0b11 << 0 | 0b11 << 8);
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <enc2_init+0xdc>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <enc2_init+0xdc>)
 8002718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	6193      	str	r3, [r2, #24]
	TIM5->CCMR1 |=  (0b01 << 0 | 0b01 << 8);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <enc2_init+0xdc>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <enc2_init+0xdc>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6193      	str	r3, [r2, #24]

	TIM5->CR1 |= (0b1 << 0);
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <enc2_init+0xdc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <enc2_init+0xdc>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6013      	str	r3, [r2, #0]
	TIM5->EGR |= (0b1 << 0);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <enc2_init+0xdc>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <enc2_init+0xdc>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6153      	str	r3, [r2, #20]

	TIM5->CNT = 65536/2;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <enc2_init+0xdc>)
 800274c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000
 8002764:	40000c00 	.word	0x40000c00

08002768 <enc2_GetInc>:

int16_t enc2_GetInc()
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
	int16_t cnt = TIM5->CNT -65536/2;
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <enc2_GetInc+0x2c>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b29b      	uxth	r3, r3
 8002774:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002778:	b29b      	uxth	r3, r3
 800277a:	80fb      	strh	r3, [r7, #6]
	TIM5->CNT = 65536/2;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <enc2_GetInc+0x2c>)
 800277e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

	return cnt;
 8002784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40000c00 	.word	0x40000c00

08002798 <set_x>:


void set_x(float nova){
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	ed87 0a01 	vstr	s0, [r7, #4]
	x=nova;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <set_x+0x1c>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20000140 	.word	0x20000140

080027b8 <set_det>:

void set_det(float nova){
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	ed87 0a01 	vstr	s0, [r7, #4]
	det=nova;
 80027c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 2a90 	vmov	r2, s15
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <set_det+0x28>)
 80027d0:	601a      	str	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000015c 	.word	0x2000015c

080027e4 <set_y>:

void set_y(float nova){
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	ed87 0a01 	vstr	s0, [r7, #4]
	y=nova;
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <set_y+0x1c>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20000144 	.word	0x20000144

08002804 <set_theta>:

void set_theta(float nova){
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	ed87 0a01 	vstr	s0, [r7, #4]
	theta=nova;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <set_theta+0x1c>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000148 	.word	0x20000148

08002824 <TIM1_UP_TIM10_IRQHandler>:
	theta=nova;
}


void TIM1_UP_TIM10_IRQHandler()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	ed2d 8b06 	vpush	{d8-d10}
 800282a:	af00      	add	r7, sp, #0

  if ((TIM1->SR & (0b1 << 0)) == (0b1 << 0))
 800282c:	4b97      	ldr	r3, [pc, #604]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x268>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 8115 	bne.w	8002a64 <TIM1_UP_TIM10_IRQHandler+0x240>
    {

	  odometrija(1);
 800283a:	2001      	movs	r0, #1
 800283c:	f7fe fc04 	bl	8001048 <odometrija>

	  regulacija_brzine();
 8002840:	f7ff fac6 	bl	8001dd0 <regulacija_brzine>

	  a = get_x();
 8002844:	f7fe fd52 	bl	80012ec <get_x>
 8002848:	eef0 7a40 	vmov.f32	s15, s0
 800284c:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <TIM1_UP_TIM10_IRQHandler+0x26c>)
 800284e:	edc3 7a00 	vstr	s15, [r3]
	  b = get_y();
 8002852:	f7fe fd59 	bl	8001308 <get_y>
 8002856:	eef0 7a40 	vmov.f32	s15, s0
 800285a:	4b8e      	ldr	r3, [pc, #568]	; (8002a94 <TIM1_UP_TIM10_IRQHandler+0x270>)
 800285c:	edc3 7a00 	vstr	s15, [r3]
	  c = get_theta();
 8002860:	f7fe fd60 	bl	8001324 <get_theta>
 8002864:	eef0 7a40 	vmov.f32	s15, s0
 8002868:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <TIM1_UP_TIM10_IRQHandler+0x274>)
 800286a:	edc3 7a00 	vstr	s15, [r3]
	  if(test==1){
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <TIM1_UP_TIM10_IRQHandler+0x64>
		  pid_init();
 8002876:	f7fe fd8d 	bl	8001394 <pid_init>
		  racunanje_brzine(0,0);
 800287a:	eddf 0a89 	vldr	s1, [pc, #548]	; 8002aa0 <TIM1_UP_TIM10_IRQHandler+0x27c>
 800287e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002aa0 <TIM1_UP_TIM10_IRQHandler+0x27c>
 8002882:	f7fe fec9 	bl	8001618 <racunanje_brzine>
 8002886:	e058      	b.n	800293a <TIM1_UP_TIM10_IRQHandler+0x116>
	  }
	  else{
	  if (sistemsko_vreme % vreme_pozicija == 0){
 8002888:	4b86      	ldr	r3, [pc, #536]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a86      	ldr	r2, [pc, #536]	; (8002aa8 <TIM1_UP_TIM10_IRQHandler+0x284>)
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	fbb3 f1f2 	udiv	r1, r3, r2
 8002894:	fb02 f201 	mul.w	r2, r2, r1
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d14d      	bne.n	800293a <TIM1_UP_TIM10_IRQHandler+0x116>
		 if(faza1==0){
 800289e:	4b83      	ldr	r3, [pc, #524]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d126      	bne.n	80028f4 <TIM1_UP_TIM10_IRQHandler+0xd0>
		  		  regulacija_pozicije(get_x(), get_y(), get_theta(), get_x(),  get_y(),  get_theta());
 80028a6:	f7fe fd21 	bl	80012ec <get_x>
 80028aa:	eeb0 8a40 	vmov.f32	s16, s0
 80028ae:	f7fe fd2b 	bl	8001308 <get_y>
 80028b2:	eef0 8a40 	vmov.f32	s17, s0
 80028b6:	f7fe fd35 	bl	8001324 <get_theta>
 80028ba:	eeb0 9a40 	vmov.f32	s18, s0
 80028be:	f7fe fd15 	bl	80012ec <get_x>
 80028c2:	eef0 9a40 	vmov.f32	s19, s0
 80028c6:	f7fe fd1f 	bl	8001308 <get_y>
 80028ca:	eeb0 aa40 	vmov.f32	s20, s0
 80028ce:	f7fe fd29 	bl	8001324 <get_theta>
 80028d2:	eef0 7a40 	vmov.f32	s15, s0
 80028d6:	eef0 2a67 	vmov.f32	s5, s15
 80028da:	eeb0 2a4a 	vmov.f32	s4, s20
 80028de:	eef0 1a69 	vmov.f32	s3, s19
 80028e2:	eeb0 1a49 	vmov.f32	s2, s18
 80028e6:	eef0 0a68 	vmov.f32	s1, s17
 80028ea:	eeb0 0a48 	vmov.f32	s0, s16
 80028ee:	f7fe fefb 	bl	80016e8 <regulacija_pozicije>
 80028f2:	e022      	b.n	800293a <TIM1_UP_TIM10_IRQHandler+0x116>
		  	  }
		  else
		  regulacija_pozicije(x, y, theta, get_x(),  get_y(),  get_theta());
 80028f4:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <TIM1_UP_TIM10_IRQHandler+0x28c>)
 80028f6:	ed93 8a00 	vldr	s16, [r3]
 80028fa:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <TIM1_UP_TIM10_IRQHandler+0x290>)
 80028fc:	edd3 8a00 	vldr	s17, [r3]
 8002900:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <TIM1_UP_TIM10_IRQHandler+0x294>)
 8002902:	ed93 9a00 	vldr	s18, [r3]
 8002906:	f7fe fcf1 	bl	80012ec <get_x>
 800290a:	eef0 9a40 	vmov.f32	s19, s0
 800290e:	f7fe fcfb 	bl	8001308 <get_y>
 8002912:	eeb0 aa40 	vmov.f32	s20, s0
 8002916:	f7fe fd05 	bl	8001324 <get_theta>
 800291a:	eef0 7a40 	vmov.f32	s15, s0
 800291e:	eef0 2a67 	vmov.f32	s5, s15
 8002922:	eeb0 2a4a 	vmov.f32	s4, s20
 8002926:	eef0 1a69 	vmov.f32	s3, s19
 800292a:	eeb0 1a49 	vmov.f32	s2, s18
 800292e:	eef0 0a68 	vmov.f32	s1, s17
 8002932:	eeb0 0a48 	vmov.f32	s0, s16
 8002936:	f7fe fed7 	bl	80016e8 <regulacija_pozicije>

		  }
	  }
	  if(!(GPIOC->IDR & (1<<11))){
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <TIM1_UP_TIM10_IRQHandler+0x13c>
		  sistemsko_vreme++;
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a55      	ldr	r2, [pc, #340]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 800294e:	6013      	str	r3, [r2, #0]
		  if(sistemsko_vreme == 100000)
 8002950:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d102      	bne.n	8002960 <TIM1_UP_TIM10_IRQHandler+0x13c>
		     	 flag_100s=true;
 800295a:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
	  }

	  if((GPIOC->IDR & (1<<0)) | (GPIOC->IDR & (1<<2)) | (GPIOC->IDR & (1<<13))){ //zadnja strana
 8002960:	4b56      	ldr	r3, [pc, #344]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0201 	and.w	r2, r3, #1
 8002968:	4b54      	ldr	r3, [pc, #336]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	431a      	orrs	r2, r3
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297a:	4313      	orrs	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d018      	beq.n	80029b2 <TIM1_UP_TIM10_IRQHandler+0x18e>
		if(det==1){
 8002980:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d117      	bne.n	80029b8 <TIM1_UP_TIM10_IRQHandler+0x194>
			if(brojac==0){
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <TIM1_UP_TIM10_IRQHandler+0x174>

			 temp=faza1;
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a4e      	ldr	r2, [pc, #312]	; (8002ad0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002996:	6013      	str	r3, [r2, #0]
		 }
		  faza1=0;
 8002998:	4b44      	ldr	r3, [pc, #272]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
		  brojac=1;
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
		  z=0;
 80029a4:	4b4b      	ldr	r3, [pc, #300]	; (8002ad4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
		  test=1;
 80029aa:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x278>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e002      	b.n	80029b8 <TIM1_UP_TIM10_IRQHandler+0x194>
		}

	  }
	  else{
		  z=1;
 80029b2:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
	  }



	  if((GPIOC->IDR & (1<<3)) | (GPIOC->IDR & (1<<12)) | (GPIOA->IDR & (1<<15))){ //prednja strana
 80029b8:	4b40      	ldr	r3, [pc, #256]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0208 	and.w	r2, r3, #8
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <TIM1_UP_TIM10_IRQHandler+0x298>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c8:	431a      	orrs	r2, r3
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <TIM1_UP_TIM10_IRQHandler+0x2b4>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d2:	4313      	orrs	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d018      	beq.n	8002a0a <TIM1_UP_TIM10_IRQHandler+0x1e6>
		if(det==0){
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <TIM1_UP_TIM10_IRQHandler+0x2a4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d117      	bne.n	8002a10 <TIM1_UP_TIM10_IRQHandler+0x1ec>
			if(brojac==0){
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <TIM1_UP_TIM10_IRQHandler+0x1cc>
			 temp=faza1;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 80029ee:	6013      	str	r3, [r2, #0]
		 }
		   faza1=0;
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
		   brojac=1;
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
		   p=0;
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
		   test=1;
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e002      	b.n	8002a10 <TIM1_UP_TIM10_IRQHandler+0x1ec>
		}
	  }
	  else{
		  p=1;
 8002a0a:	4b34      	ldr	r3, [pc, #208]	; (8002adc <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
	  }

	  if((brojac==1) & ((z==1) & (p==1))){
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <TIM1_UP_TIM10_IRQHandler+0x2b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <TIM1_UP_TIM10_IRQHandler+0x2b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	400b      	ands	r3, r1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <TIM1_UP_TIM10_IRQHandler+0x240>
		  faza1=temp;
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a18      	ldr	r2, [pc, #96]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x288>)
 8002a4c:	6013      	str	r3, [r2, #0]
		  temp=0;
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <TIM1_UP_TIM10_IRQHandler+0x2ac>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
		  brojac=0;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <TIM1_UP_TIM10_IRQHandler+0x2a8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
		  pid_init();
 8002a5a:	f7fe fc9b 	bl	8001394 <pid_init>
		  test=0;
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x278>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
	  else
		  P1=0;
*/
	  }

      TIM1->SR &= ~(0b1 << 0);
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x268>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <TIM1_UP_TIM10_IRQHandler+0x268>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6113      	str	r3, [r2, #16]
      if(sistemsko_vreme == 100000)
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <TIM1_UP_TIM10_IRQHandler+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <TIM1_UP_TIM10_IRQHandler+0x29c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d102      	bne.n	8002a80 <TIM1_UP_TIM10_IRQHandler+0x25c>
    	  flag_100s=true;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <TIM1_UP_TIM10_IRQHandler+0x2a0>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]



}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	ecbd 8b06 	vpop	{d8-d10}
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	20000164 	.word	0x20000164
 8002a94:	20000168 	.word	0x20000168
 8002a98:	2000016c 	.word	0x2000016c
 8002a9c:	20000160 	.word	0x20000160
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	2000019c 	.word	0x2000019c
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000140 	.word	0x20000140
 8002ab4:	20000144 	.word	0x20000144
 8002ab8:	20000148 	.word	0x20000148
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	000186a0 	.word	0x000186a0
 8002ac4:	2000013c 	.word	0x2000013c
 8002ac8:	2000015c 	.word	0x2000015c
 8002acc:	2000014c 	.word	0x2000014c
 8002ad0:	20000150 	.word	0x20000150
 8002ad4:	20000158 	.word	0x20000158
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	20000154 	.word	0x20000154

08002ae0 <uart_init>:
static void
uart6_init ();

void
uart_init ()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  uart6_init ();
 8002ae4:	f000 f802 	bl	8002aec <uart6_init>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <uart6_init>:

static void
uart6_init ()
{
 8002aec:	b490      	push	{r4, r7}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (0b1 << 0); // Dozvola takta na GPIO Port-u A
 8002af2:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <uart6_init+0x250>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a91      	ldr	r2, [pc, #580]	; (8002d3c <uart6_init+0x250>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->APB2ENR |= (0b1 << 5); // Dozvola takta na USART6 periferiji
 8002afe:	4b8f      	ldr	r3, [pc, #572]	; (8002d3c <uart6_init+0x250>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a8e      	ldr	r2, [pc, #568]	; (8002d3c <uart6_init+0x250>)
 8002b04:	f043 0320 	orr.w	r3, r3, #32
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44

  uint8_t const TX_PIN = 11; //PC6  PA11
 8002b0a:	230b      	movs	r3, #11
 8002b0c:	71fb      	strb	r3, [r7, #7]
  uint8_t const RX_PIN = 12; //PC7   PA12
 8002b0e:	230c      	movs	r3, #12
 8002b10:	71bb      	strb	r3, [r7, #6]

  GPIOA->MODER &= ~(0b11 << TX_PIN * 2);
 8002b12:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <uart6_init+0x254>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	0052      	lsls	r2, r2, #1
 8002b1a:	2103      	movs	r1, #3
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	43d2      	mvns	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	4a86      	ldr	r2, [pc, #536]	; (8002d40 <uart6_init+0x254>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << TX_PIN * 2);
 8002b2a:	4b85      	ldr	r3, [pc, #532]	; (8002d40 <uart6_init+0x254>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	0052      	lsls	r2, r2, #1
 8002b32:	2102      	movs	r1, #2
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4a81      	ldr	r2, [pc, #516]	; (8002d40 <uart6_init+0x254>)
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]
 GPIOA->MODER &= ~(0b11 << RX_PIN * 2);
 8002b40:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <uart6_init+0x254>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	79ba      	ldrb	r2, [r7, #6]
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	2103      	movs	r1, #3
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	43d2      	mvns	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4a7b      	ldr	r2, [pc, #492]	; (8002d40 <uart6_init+0x254>)
 8002b54:	400b      	ands	r3, r1
 8002b56:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0b10 << RX_PIN * 2);
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <uart6_init+0x254>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	79ba      	ldrb	r2, [r7, #6]
 8002b5e:	0052      	lsls	r2, r2, #1
 8002b60:	2102      	movs	r1, #2
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4a75      	ldr	r2, [pc, #468]	; (8002d40 <uart6_init+0x254>)
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6013      	str	r3, [r2, #0]

  // Podešavanje da TX pin bude pull up open drain
  // kako bi radio kao half duplex
  GPIOA->OTYPER |= (0b1 << TX_PIN);
 8002b6e:	4b74      	ldr	r3, [pc, #464]	; (8002d40 <uart6_init+0x254>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	79fa      	ldrb	r2, [r7, #7]
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4a70      	ldr	r2, [pc, #448]	; (8002d40 <uart6_init+0x254>)
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	6053      	str	r3, [r2, #4]
  GPIOA->PUPDR &= ~(0b11 << TX_PIN * 2);
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <uart6_init+0x254>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	79fa      	ldrb	r2, [r7, #7]
 8002b88:	0052      	lsls	r2, r2, #1
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	43d2      	mvns	r2, r2
 8002b92:	4611      	mov	r1, r2
 8002b94:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <uart6_init+0x254>)
 8002b96:	400b      	ands	r3, r1
 8002b98:	60d3      	str	r3, [r2, #12]
  GPIOA->PUPDR |= (0b01 << TX_PIN * 2);
 8002b9a:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <uart6_init+0x254>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	79fa      	ldrb	r2, [r7, #7]
 8002ba0:	0052      	lsls	r2, r2, #1
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4a65      	ldr	r2, [pc, #404]	; (8002d40 <uart6_init+0x254>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	60d3      	str	r3, [r2, #12]

  uint8_t const AF = 8;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	717b      	strb	r3, [r7, #5]

  GPIOA->AFR[TX_PIN / 8] &= ~(0b1111 << (TX_PIN % 8) * 4);
 8002bb4:	4a62      	ldr	r2, [pc, #392]	; (8002d40 <uart6_init+0x254>)
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	f002 0207 	and.w	r2, r2, #7
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	210f      	movs	r1, #15
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	43d2      	mvns	r2, r2
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	495a      	ldr	r1, [pc, #360]	; (8002d40 <uart6_init+0x254>)
 8002bd6:	79fa      	ldrb	r2, [r7, #7]
 8002bd8:	08d2      	lsrs	r2, r2, #3
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4610      	mov	r0, r2
 8002bde:	ea03 0204 	and.w	r2, r3, r4
 8002be2:	f100 0308 	add.w	r3, r0, #8
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[TX_PIN / 8] |= (AF << (TX_PIN % 8) * 4);
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <uart6_init+0x254>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	7979      	ldrb	r1, [r7, #5]
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4614      	mov	r4, r2
 8002c08:	494d      	ldr	r1, [pc, #308]	; (8002d40 <uart6_init+0x254>)
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	08d2      	lsrs	r2, r2, #3
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4610      	mov	r0, r2
 8002c12:	ea43 0204 	orr.w	r2, r3, r4
 8002c16:	f100 0308 	add.w	r3, r0, #8
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] &= ~(0b1111 << (RX_PIN % 8) * 4);
 8002c1e:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <uart6_init+0x254>)
 8002c20:	79bb      	ldrb	r3, [r7, #6]
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3308      	adds	r3, #8
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	79ba      	ldrb	r2, [r7, #6]
 8002c2e:	f002 0207 	and.w	r2, r2, #7
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	210f      	movs	r1, #15
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	43d2      	mvns	r2, r2
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	4940      	ldr	r1, [pc, #256]	; (8002d40 <uart6_init+0x254>)
 8002c40:	79ba      	ldrb	r2, [r7, #6]
 8002c42:	08d2      	lsrs	r2, r2, #3
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	4610      	mov	r0, r2
 8002c48:	ea03 0204 	and.w	r2, r3, r4
 8002c4c:	f100 0308 	add.w	r3, r0, #8
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  GPIOA->AFR[RX_PIN / 8] |= (AF << (RX_PIN % 8) * 4);
 8002c54:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <uart6_init+0x254>)
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	7979      	ldrb	r1, [r7, #5]
 8002c64:	79ba      	ldrb	r2, [r7, #6]
 8002c66:	f002 0207 	and.w	r2, r2, #7
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4614      	mov	r4, r2
 8002c72:	4933      	ldr	r1, [pc, #204]	; (8002d40 <uart6_init+0x254>)
 8002c74:	79ba      	ldrb	r2, [r7, #6]
 8002c76:	08d2      	lsrs	r2, r2, #3
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	ea43 0204 	orr.w	r2, r3, r4
 8002c80:	f100 0308 	add.w	r3, r0, #8
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  USART6->CR1 &= ~(0b1 << 12); // Dužina poruke
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <uart6_init+0x258>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <uart6_init+0x258>)
 8002c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c92:	60d3      	str	r3, [r2, #12]
  USART6->CR2 &= ~(0b11 << 12); // Broj stop bitova
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <uart6_init+0x258>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <uart6_init+0x258>)
 8002c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9e:	6113      	str	r3, [r2, #16]

  // Baudrate = 9600
  //USART6->BRR = 0;
  USART6->BRR &= ~(0xFFFF);
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <uart6_init+0x258>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <uart6_init+0x258>)
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	6093      	str	r3, [r2, #8]
  USART6->BRR |= ((546 << 4) | (14 << 0));
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <uart6_init+0x258>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <uart6_init+0x258>)
 8002cb2:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8002cb6:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8002cba:	6093      	str	r3, [r2, #8]

  // Uključivanje TX i RX pinova
  USART6->CR1 |= ((0b1 << 2) | (0b1 << 3));
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <uart6_init+0x258>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <uart6_init+0x258>)
 8002cc2:	f043 030c 	orr.w	r3, r3, #12
 8002cc6:	60d3      	str	r3, [r2, #12]

  // Uključivanje prekida za prihvatanje poruke
  USART6->CR1 |= (0b1 << 5);
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <uart6_init+0x258>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <uart6_init+0x258>)
 8002cce:	f043 0320 	orr.w	r3, r3, #32
 8002cd2:	60d3      	str	r3, [r2, #12]

  // Uključivanje Half-duplex komunikacije
  USART6->CR2 &= ~((0b1 << 11) | (0b1 << 14));
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <uart6_init+0x258>)
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <uart6_init+0x258>)
 8002cda:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002cde:	6113      	str	r3, [r2, #16]
  USART6->CR3 &= ~((0b1 << 1) | (0b1 << 5));
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <uart6_init+0x258>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <uart6_init+0x258>)
 8002ce6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cea:	6153      	str	r3, [r2, #20]
  USART6->CR3 |= (0b1 << 3);
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <uart6_init+0x258>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <uart6_init+0x258>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6153      	str	r3, [r2, #20]

  // Odabir prekidne rutike koja se izvršava
  uint8_t const USART6_PREKID = 71;
 8002cf8:	2347      	movs	r3, #71	; 0x47
 8002cfa:	713b      	strb	r3, [r7, #4]
  NVIC->ISER[USART6_PREKID / 32] |= (0b1 << USART6_PREKID % 32);
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <uart6_init+0x25c>)
 8002cfe:	793b      	ldrb	r3, [r7, #4]
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	793a      	ldrb	r2, [r7, #4]
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4610      	mov	r0, r2
 8002d16:	490c      	ldr	r1, [pc, #48]	; (8002d48 <uart6_init+0x25c>)
 8002d18:	793a      	ldrb	r2, [r7, #4]
 8002d1a:	0952      	lsrs	r2, r2, #5
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  // Uključivanje UART-a
  USART6->CR1 |= (0b1 << 13);
 8002d24:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <uart6_init+0x258>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <uart6_init+0x258>)
 8002d2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc90      	pop	{r4, r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <uart_pisi>:
}

// Piši u buffer
void
uart_pisi (uint8_t podatak)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  if (velicina != MAX_VELICINA_BUFFERA)
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <uart_pisi+0xc0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b1e      	cmp	r3, #30
 8002d5e:	d021      	beq.n	8002da4 <uart_pisi+0x58>
    {
      buffer[index_pisi] = podatak;
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <uart_pisi+0xc4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4619      	mov	r1, r3
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <uart_pisi+0xc8>)
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <uart_pisi+0xc4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <uart_pisi+0xcc>)
 8002d78:	fb83 1302 	smull	r1, r3, r3, r2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	1119      	asrs	r1, r3, #4
 8002d80:	17d3      	asrs	r3, r2, #31
 8002d82:	1ac9      	subs	r1, r1, r3
 8002d84:	460b      	mov	r3, r1
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a5b      	subs	r3, r3, r1
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	1ad1      	subs	r1, r2, r3
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <uart_pisi+0xc4>)
 8002d92:	701a      	strb	r2, [r3, #0]
      velicina++;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <uart_pisi+0xc0>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <uart_pisi+0xc0>)
 8002da0:	701a      	strb	r2, [r3, #0]
    {
      buffer[index_pisi] = podatak;
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
    }
}
 8002da2:	e02c      	b.n	8002dfe <uart_pisi+0xb2>
      buffer[index_pisi] = podatak;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <uart_pisi+0xc4>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <uart_pisi+0xc8>)
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	5453      	strb	r3, [r2, r1]
      index_pisi = (index_pisi + 1) % MAX_VELICINA_BUFFERA;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <uart_pisi+0xc4>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <uart_pisi+0xcc>)
 8002dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	1119      	asrs	r1, r3, #4
 8002dc4:	17d3      	asrs	r3, r2, #31
 8002dc6:	1ac9      	subs	r1, r1, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a5b      	subs	r3, r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	1ad1      	subs	r1, r2, r3
 8002dd2:	b2ca      	uxtb	r2, r1
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <uart_pisi+0xc4>)
 8002dd6:	701a      	strb	r2, [r3, #0]
      index_citaj = (index_citaj + 1) % MAX_VELICINA_BUFFERA;
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <uart_pisi+0xd0>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <uart_pisi+0xcc>)
 8002de2:	fb83 1302 	smull	r1, r3, r3, r2
 8002de6:	4413      	add	r3, r2
 8002de8:	1119      	asrs	r1, r3, #4
 8002dea:	17d3      	asrs	r3, r2, #31
 8002dec:	1ac9      	subs	r1, r1, r3
 8002dee:	460b      	mov	r3, r1
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a5b      	subs	r3, r3, r1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	1ad1      	subs	r1, r2, r3
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <uart_pisi+0xd0>)
 8002dfc:	701a      	strb	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000018e 	.word	0x2000018e
 8002e10:	2000018f 	.word	0x2000018f
 8002e14:	20000170 	.word	0x20000170
 8002e18:	88888889 	.word	0x88888889
 8002e1c:	20000190 	.word	0x20000190

08002e20 <USART6_IRQHandler>:
    }
}

void
USART6_IRQHandler ()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  if (USART6->SR & (0b1 << 5))
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <USART6_IRQHandler+0x20>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <USART6_IRQHandler+0x1c>
    {
      //input = USART6->DR;
      uart_pisi(USART6->DR);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <USART6_IRQHandler+0x20>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff88 	bl	8002d4c <uart_pisi>
    }
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40011400 	.word	0x40011400

08002e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
       	/* MCU Configuration--------------------------------------------------------*/  	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */                                                                                                                                                                                                     HAL_Init();
 8002e48:	f000 f94c 	bl	80030e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  tajmer_init();
 8002e4c:	f7ff fb22 	bl	8002494 <tajmer_init>
  enc_init();
 8002e50:	f7ff fb26 	bl	80024a0 <enc_init>
  motor_init();
 8002e54:	f7fe f870 	bl	8000f38 <motor_init>
  pid_init();
 8002e58:	f7fe fa9c 	bl	8001394 <pid_init>
  init_PWM();
 8002e5c:	f7ff f928 	bl	80020b0 <init_PWM>
  uart_init();
 8002e60:	f7ff fe3e 	bl	8002ae0 <uart_init>
 init_senzor();
 8002e64:	f7ff fa78 	bl	8002358 <init_senzor>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e68:	f000 f834 	bl	8002ed4 <SystemClock_Config>
  /* Infinite loop */


  /* USER CODE BEGIN WHILE */

while(0){
 8002e6c:	bf00      	nop



}
	  while (1) {
		  if(j==0){ //-(60*M_PI)/180
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <main+0x80>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <main+0x48>
	      pid_init();
 8002e76:	f7fe fa8d 	bl	8001394 <pid_init>
	      racunanje_brzine(0, 0);
 8002e7a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002ec8 <main+0x84>
 8002e7e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002ec8 <main+0x84>
 8002e82:	f7fe fbc9 	bl	8001618 <racunanje_brzine>

	      j=1;
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <main+0x80>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
		  }
		  if(j==1){ //-(60*M_PI)/180
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <main+0x80>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10f      	bne.n	8002eb4 <main+0x70>

			   //napred(-100,0,M_PI,600,4,1);
			  // Move forward
			      napred(200, 0, 0, 300, 4, 0);  // Move forward to (200, 0)
 8002e94:	2000      	movs	r0, #0
 8002e96:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 8002e9a:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8002ecc <main+0x88>
 8002e9e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002ec8 <main+0x84>
 8002ea2:	eddf 0a09 	vldr	s1, [pc, #36]	; 8002ec8 <main+0x84>
 8002ea6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002ed0 <main+0x8c>
 8002eaa:	f7fd fff9 	bl	8000ea0 <napred>


		  	      j=2;}
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <main+0x80>)
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
		  	    if(j==2){ //-(60*M_PI)/180
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <main+0x80>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d1d8      	bne.n	8002e6e <main+0x2a>

		  	    			   //napred(-100,0,M_PI,600,4,1)
		  	    	    // Move backward
		  	    		  	      j=2;
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <main+0x80>)
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	601a      	str	r2, [r3, #0]
		  if(j==0){ //-(60*M_PI)/180
 8002ec2:	e7d4      	b.n	8002e6e <main+0x2a>
 8002ec4:	20000194 	.word	0x20000194
 8002ec8:	00000000 	.word	0x00000000
 8002ecc:	43960000 	.word	0x43960000
 8002ed0:	43480000 	.word	0x43480000

08002ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b094      	sub	sp, #80	; 0x50
 8002ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eda:	f107 0320 	add.w	r3, r7, #32
 8002ede:	2230      	movs	r2, #48	; 0x30
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fe88 	bl	8003bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <SystemClock_Config+0xcc>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <SystemClock_Config+0xcc>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <SystemClock_Config+0xcc>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <SystemClock_Config+0xd0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f20:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <SystemClock_Config+0xd0>)
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <SystemClock_Config+0xd0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f40:	2302      	movs	r3, #2
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002f4c:	2354      	movs	r3, #84	; 0x54
 8002f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f54:	2304      	movs	r3, #4
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa19 	bl	8003394 <HAL_RCC_OscConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f68:	f000 f81e 	bl	8002fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f70:	2302      	movs	r3, #2
 8002f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fc73 	bl	8003874 <HAL_RCC_ClockConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002f94:	f000 f808 	bl	8002fa8 <Error_Handler>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3750      	adds	r7, #80	; 0x50
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */

}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <HAL_MspInit+0x4c>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_MspInit+0x4c>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_MspInit+0x4c>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_MspInit+0x4c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 {
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <MemManage_Handler+0x4>

08003022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler+0x4>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800305c:	f000 f894 	bl	8003188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <SystemInit+0x28>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <SystemInit+0x28>)
 8003070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <SystemInit+0x28>)
 800307a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307e:	609a      	str	r2, [r3, #8]
#endif
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003094:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003096:	e003      	b.n	80030a0 <LoopCopyDataInit>

08003098 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800309a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800309c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800309e:	3104      	adds	r1, #4

080030a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030a8:	d3f6      	bcc.n	8003098 <CopyDataInit>
  ldr  r2, =_sbss
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030ac:	e002      	b.n	80030b4 <LoopFillZerobss>

080030ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030b0:	f842 3b04 	str.w	r3, [r2], #4

080030b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030b8:	d3f9      	bcc.n	80030ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ba:	f7ff ffd3 	bl	8003064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030be:	f000 fd77 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c2:	f7ff febf 	bl	8002e44 <main>
  bx  lr    
 80030c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80030cc:	080064a8 	.word	0x080064a8
  ldr  r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030d4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80030d8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80030dc:	200001c4 	.word	0x200001c4

080030e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e0:	e7fe      	b.n	80030e0 <ADC_IRQHandler>
	...

080030e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_Init+0x40>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_Init+0x40>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_Init+0x40>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 f90d 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	2000      	movs	r0, #0
 8003114:	f000 f808 	bl	8003128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f7ff ff4e 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00

08003128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x54>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_InitTick+0x58>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f917 	bl	800337a <HAL_SYSTICK_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e00e      	b.n	8003174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b0f      	cmp	r3, #15
 800315a:	d80a      	bhi.n	8003172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800315c:	2200      	movs	r2, #0
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f000 f8ed 	bl	8003342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <HAL_InitTick+0x5c>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000000c 	.word	0x2000000c
 8003180:	20000014 	.word	0x20000014
 8003184:	20000010 	.word	0x20000010

08003188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x20>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x24>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_IncTick+0x24>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000014 	.word	0x20000014
 80031ac:	200001c0 	.word	0x200001c0

080031b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return uwTick;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GetTick+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	200001c0 	.word	0x200001c0

080031c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fa:	4a04      	ldr	r2, [pc, #16]	; (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60d3      	str	r3, [r2, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	; (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	; (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff47 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff5c 	bl	8003210 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffb0 	bl	80032e8 <SysTick_Config>
 8003388:	4603      	mov	r3, r0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e25b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b2:	4ba3      	ldr	r3, [pc, #652]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d00c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d112      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ca:	4b9d      	ldr	r3, [pc, #628]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d157      	bne.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e236      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x74>
 80033fa:	4b91      	ldr	r3, [pc, #580]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a90      	ldr	r2, [pc, #576]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a8a      	ldr	r2, [pc, #552]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 800342c:	4b84      	ldr	r3, [pc, #528]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a83      	ldr	r2, [pc, #524]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a80      	ldr	r2, [pc, #512]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff feb0 	bl	80031b0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003454:	f7ff feac 	bl	80031b0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1fb      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xc0>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff fe9c 	bl	80031b0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800347c:	f7ff fe98 	bl	80031b0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e1e7      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d063      	beq.n	8003572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b62      	ldr	r3, [pc, #392]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1bb      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4952      	ldr	r1, [pc, #328]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_OscConfig+0x2b0>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7ff fe51 	bl	80031b0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7ff fe4d 	bl	80031b0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e19c      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4940      	ldr	r1, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_OscConfig+0x2b0>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7ff fe30 	bl	80031b0 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003554:	f7ff fe2c 	bl	80031b0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e17b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d030      	beq.n	80035e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x2b4>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7ff fe10 	bl	80031b0 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003594:	f7ff fe0c 	bl	80031b0 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e15b      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x200>
 80035b2:	e015      	b.n	80035e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x2b4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7ff fdf9 	bl	80031b0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c2:	f7ff fdf5 	bl	80031b0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e144      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a0 	beq.w	800372e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d121      	bne.n	800366e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_RCC_OscConfig+0x2b8>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7ff fdbb 	bl	80031b0 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	e011      	b.n	8003662 <HAL_RCC_OscConfig+0x2ce>
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	42470000 	.word	0x42470000
 8003648:	42470e80 	.word	0x42470e80
 800364c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7ff fdae 	bl	80031b0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0fd      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b81      	ldr	r3, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x4d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x2f0>
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a7c      	ldr	r2, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x32a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x312>
 800368c:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a76      	ldr	r2, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	4b74      	ldr	r3, [pc, #464]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x32a>
 80036a6:	4b71      	ldr	r3, [pc, #452]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a70      	ldr	r2, [pc, #448]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b6e      	ldr	r3, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a6d      	ldr	r2, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c6:	f7ff fd73 	bl	80031b0 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7ff fd6f 	bl	80031b0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0bc      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x33a>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7ff fd5d 	bl	80031b0 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7ff fd59 	bl	80031b0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0a6      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b52      	ldr	r3, [pc, #328]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a51      	ldr	r2, [pc, #324]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8092 	beq.w	800385c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d05c      	beq.n	80037fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d141      	bne.n	80037d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7ff fd2d 	bl	80031b0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375a:	f7ff fd29 	bl	80031b0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e078      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	019b      	lsls	r3, r3, #6
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	4933      	ldr	r1, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7ff fd02 	bl	80031b0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff fcfe 	bl	80031b0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04d      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x41c>
 80037ce:	e045      	b.n	800385c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x4dc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7ff fceb 	bl	80031b0 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7ff fce7 	bl	80031b0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e036      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x44a>
 80037fc:	e02e      	b.n	800385c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e029      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <HAL_RCC_OscConfig+0x4d8>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	429a      	cmp	r2, r3
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d115      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003838:	4293      	cmp	r3, r2
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40007000 	.word	0x40007000
 800386c:	40023800 	.word	0x40023800
 8003870:	42470060 	.word	0x42470060

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0cc      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d90c      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d044      	beq.n	8003994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d119      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d003      	beq.n	8003932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	2b03      	cmp	r3, #3
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e06f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e067      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4934      	ldr	r1, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003964:	f7ff fc24 	bl	80031b0 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7ff fc20 	bl	80031b0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e04f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d20c      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4601      	mov	r1, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	5cd3      	ldrb	r3, [r2, r3]
 8003a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fb84 	bl	8003128 <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	08006220 	.word	0x08006220
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	20000010 	.word	0x20000010

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a56:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d007      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x32>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d008      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x38>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 808d 	bne.w	8003b86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a6e:	60bb      	str	r3, [r7, #8]
       break;
 8003a70:	e08c      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a74:	60bb      	str	r3, [r7, #8]
      break;
 8003a76:	e089      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a82:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d023      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	ea03 0501 	and.w	r5, r3, r1
 8003aa4:	ea04 0602 	and.w	r6, r4, r2
 8003aa8:	4a3d      	ldr	r2, [pc, #244]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aaa:	fb02 f106 	mul.w	r1, r2, r6
 8003aae:	2200      	movs	r2, #0
 8003ab0:	fb02 f205 	mul.w	r2, r2, r5
 8003ab4:	440a      	add	r2, r1
 8003ab6:	493a      	ldr	r1, [pc, #232]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ab8:	fba5 0101 	umull	r0, r1, r5, r1
 8003abc:	1853      	adds	r3, r2, r1
 8003abe:	4619      	mov	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4623      	mov	r3, r4
 8003aca:	f7fd f869 	bl	8000ba0 <__aeabi_uldivmod>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e049      	b.n	8003b6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	f04f 0400 	mov.w	r4, #0
 8003ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	ea03 0501 	and.w	r5, r3, r1
 8003aec:	ea04 0602 	and.w	r6, r4, r2
 8003af0:	4629      	mov	r1, r5
 8003af2:	4632      	mov	r2, r6
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	0154      	lsls	r4, r2, #5
 8003afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b02:	014b      	lsls	r3, r1, #5
 8003b04:	4619      	mov	r1, r3
 8003b06:	4622      	mov	r2, r4
 8003b08:	1b49      	subs	r1, r1, r5
 8003b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	f04f 0400 	mov.w	r4, #0
 8003b16:	0194      	lsls	r4, r2, #6
 8003b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b1c:	018b      	lsls	r3, r1, #6
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	eb64 0402 	sbc.w	r4, r4, r2
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	00e2      	lsls	r2, r4, #3
 8003b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b32:	00d9      	lsls	r1, r3, #3
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	195b      	adds	r3, r3, r5
 8003b3a:	eb44 0406 	adc.w	r4, r4, r6
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	02a2      	lsls	r2, r4, #10
 8003b48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b4c:	0299      	lsls	r1, r3, #10
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4614      	mov	r4, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	4621      	mov	r1, r4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f04f 0400 	mov.w	r4, #0
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	f7fd f81e 	bl	8000ba0 <__aeabi_uldivmod>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	3301      	adds	r3, #1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	60bb      	str	r3, [r7, #8]
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b88:	60bb      	str	r3, [r7, #8]
      break;
 8003b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	017d7840 	.word	0x017d7840

08003ba4 <__errno>:
 8003ba4:	4b01      	ldr	r3, [pc, #4]	; (8003bac <__errno+0x8>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000018 	.word	0x20000018

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	4e0d      	ldr	r6, [pc, #52]	; (8003be8 <__libc_init_array+0x38>)
 8003bb4:	4c0d      	ldr	r4, [pc, #52]	; (8003bec <__libc_init_array+0x3c>)
 8003bb6:	1ba4      	subs	r4, r4, r6
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	2500      	movs	r5, #0
 8003bbc:	42a5      	cmp	r5, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	4e0b      	ldr	r6, [pc, #44]	; (8003bf0 <__libc_init_array+0x40>)
 8003bc2:	4c0c      	ldr	r4, [pc, #48]	; (8003bf4 <__libc_init_array+0x44>)
 8003bc4:	f002 fb1e 	bl	8006204 <_init>
 8003bc8:	1ba4      	subs	r4, r4, r6
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	2500      	movs	r5, #0
 8003bce:	42a5      	cmp	r5, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd8:	4798      	blx	r3
 8003bda:	3501      	adds	r5, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be2:	4798      	blx	r3
 8003be4:	3501      	adds	r5, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	080064a0 	.word	0x080064a0
 8003bec:	080064a0 	.word	0x080064a0
 8003bf0:	080064a0 	.word	0x080064a0
 8003bf4:	080064a4 	.word	0x080064a4

08003bf8 <memset>:
 8003bf8:	4402      	add	r2, r0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d100      	bne.n	8003c02 <memset+0xa>
 8003c00:	4770      	bx	lr
 8003c02:	f803 1b01 	strb.w	r1, [r3], #1
 8003c06:	e7f9      	b.n	8003bfc <memset+0x4>

08003c08 <cos>:
 8003c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c0a:	ec51 0b10 	vmov	r0, r1, d0
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	; (8003c88 <cos+0x80>)
 8003c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c14:	4293      	cmp	r3, r2
 8003c16:	dc06      	bgt.n	8003c26 <cos+0x1e>
 8003c18:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003c80 <cos+0x78>
 8003c1c:	f001 fae0 	bl	80051e0 <__kernel_cos>
 8003c20:	ec51 0b10 	vmov	r0, r1, d0
 8003c24:	e007      	b.n	8003c36 <cos+0x2e>
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <cos+0x84>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	dd09      	ble.n	8003c40 <cos+0x38>
 8003c2c:	ee10 2a10 	vmov	r2, s0
 8003c30:	460b      	mov	r3, r1
 8003c32:	f7fc fad5 	bl	80001e0 <__aeabi_dsub>
 8003c36:	ec41 0b10 	vmov	d0, r0, r1
 8003c3a:	b005      	add	sp, #20
 8003c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c40:	4668      	mov	r0, sp
 8003c42:	f001 f829 	bl	8004c98 <__ieee754_rem_pio2>
 8003c46:	f000 0003 	and.w	r0, r0, #3
 8003c4a:	2801      	cmp	r0, #1
 8003c4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c50:	ed9d 0b00 	vldr	d0, [sp]
 8003c54:	d007      	beq.n	8003c66 <cos+0x5e>
 8003c56:	2802      	cmp	r0, #2
 8003c58:	d00e      	beq.n	8003c78 <cos+0x70>
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d0de      	beq.n	8003c1c <cos+0x14>
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f001 fec6 	bl	80059f0 <__kernel_sin>
 8003c64:	e7dc      	b.n	8003c20 <cos+0x18>
 8003c66:	f001 fec3 	bl	80059f0 <__kernel_sin>
 8003c6a:	ec53 2b10 	vmov	r2, r3, d0
 8003c6e:	ee10 0a10 	vmov	r0, s0
 8003c72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003c76:	e7de      	b.n	8003c36 <cos+0x2e>
 8003c78:	f001 fab2 	bl	80051e0 <__kernel_cos>
 8003c7c:	e7f5      	b.n	8003c6a <cos+0x62>
 8003c7e:	bf00      	nop
	...
 8003c88:	3fe921fb 	.word	0x3fe921fb
 8003c8c:	7fefffff 	.word	0x7fefffff

08003c90 <sin>:
 8003c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c92:	ec51 0b10 	vmov	r0, r1, d0
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <sin+0x88>)
 8003c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	dc07      	bgt.n	8003cb0 <sin+0x20>
 8003ca0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003d10 <sin+0x80>
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f001 fea3 	bl	80059f0 <__kernel_sin>
 8003caa:	ec51 0b10 	vmov	r0, r1, d0
 8003cae:	e007      	b.n	8003cc0 <sin+0x30>
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <sin+0x8c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	dd09      	ble.n	8003cca <sin+0x3a>
 8003cb6:	ee10 2a10 	vmov	r2, s0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	f7fc fa90 	bl	80001e0 <__aeabi_dsub>
 8003cc0:	ec41 0b10 	vmov	d0, r0, r1
 8003cc4:	b005      	add	sp, #20
 8003cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cca:	4668      	mov	r0, sp
 8003ccc:	f000 ffe4 	bl	8004c98 <__ieee754_rem_pio2>
 8003cd0:	f000 0003 	and.w	r0, r0, #3
 8003cd4:	2801      	cmp	r0, #1
 8003cd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cda:	ed9d 0b00 	vldr	d0, [sp]
 8003cde:	d004      	beq.n	8003cea <sin+0x5a>
 8003ce0:	2802      	cmp	r0, #2
 8003ce2:	d005      	beq.n	8003cf0 <sin+0x60>
 8003ce4:	b970      	cbnz	r0, 8003d04 <sin+0x74>
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	e7dd      	b.n	8003ca6 <sin+0x16>
 8003cea:	f001 fa79 	bl	80051e0 <__kernel_cos>
 8003cee:	e7dc      	b.n	8003caa <sin+0x1a>
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f001 fe7d 	bl	80059f0 <__kernel_sin>
 8003cf6:	ec53 2b10 	vmov	r2, r3, d0
 8003cfa:	ee10 0a10 	vmov	r0, s0
 8003cfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003d02:	e7dd      	b.n	8003cc0 <sin+0x30>
 8003d04:	f001 fa6c 	bl	80051e0 <__kernel_cos>
 8003d08:	e7f5      	b.n	8003cf6 <sin+0x66>
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
	...
 8003d18:	3fe921fb 	.word	0x3fe921fb
 8003d1c:	7fefffff 	.word	0x7fefffff

08003d20 <atan2>:
 8003d20:	f000 b9ca 	b.w	80040b8 <__ieee754_atan2>

08003d24 <pow>:
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	ed2d 8b04 	vpush	{d8-d9}
 8003d2c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004000 <pow+0x2dc>
 8003d30:	b08d      	sub	sp, #52	; 0x34
 8003d32:	ec57 6b10 	vmov	r6, r7, d0
 8003d36:	ec55 4b11 	vmov	r4, r5, d1
 8003d3a:	f000 fa9d 	bl	8004278 <__ieee754_pow>
 8003d3e:	f999 3000 	ldrsb.w	r3, [r9]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	eeb0 8a40 	vmov.f32	s16, s0
 8003d4a:	eef0 8a60 	vmov.f32	s17, s1
 8003d4e:	46c8      	mov	r8, r9
 8003d50:	d05f      	beq.n	8003e12 <pow+0xee>
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fe93 	bl	8000a84 <__aeabi_dcmpun>
 8003d5e:	4683      	mov	fp, r0
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d156      	bne.n	8003e12 <pow+0xee>
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	4630      	mov	r0, r6
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	f7fc fe8a 	bl	8000a84 <__aeabi_dcmpun>
 8003d70:	9001      	str	r0, [sp, #4]
 8003d72:	b1e8      	cbz	r0, 8003db0 <pow+0x8c>
 8003d74:	2200      	movs	r2, #0
 8003d76:	2300      	movs	r3, #0
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	f7fc fe50 	bl	8000a20 <__aeabi_dcmpeq>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d046      	beq.n	8003e12 <pow+0xee>
 8003d84:	2301      	movs	r3, #1
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	4b96      	ldr	r3, [pc, #600]	; (8003fe4 <pow+0x2c0>)
 8003d8a:	9303      	str	r3, [sp, #12]
 8003d8c:	4b96      	ldr	r3, [pc, #600]	; (8003fe8 <pow+0x2c4>)
 8003d8e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d98:	9b00      	ldr	r3, [sp, #0]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003da0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003da4:	d033      	beq.n	8003e0e <pow+0xea>
 8003da6:	a802      	add	r0, sp, #8
 8003da8:	f002 f916 	bl	8005fd8 <matherr>
 8003dac:	bb48      	cbnz	r0, 8003e02 <pow+0xde>
 8003dae:	e05d      	b.n	8003e6c <pow+0x148>
 8003db0:	f04f 0a00 	mov.w	sl, #0
 8003db4:	f04f 0b00 	mov.w	fp, #0
 8003db8:	4652      	mov	r2, sl
 8003dba:	465b      	mov	r3, fp
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	4639      	mov	r1, r7
 8003dc0:	f7fc fe2e 	bl	8000a20 <__aeabi_dcmpeq>
 8003dc4:	ec4b ab19 	vmov	d9, sl, fp
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d054      	beq.n	8003e76 <pow+0x152>
 8003dcc:	4652      	mov	r2, sl
 8003dce:	465b      	mov	r3, fp
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fe24 	bl	8000a20 <__aeabi_dcmpeq>
 8003dd8:	4680      	mov	r8, r0
 8003dda:	b318      	cbz	r0, 8003e24 <pow+0x100>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	9302      	str	r3, [sp, #8]
 8003de0:	4b80      	ldr	r3, [pc, #512]	; (8003fe4 <pow+0x2c0>)
 8003de2:	9303      	str	r3, [sp, #12]
 8003de4:	9b01      	ldr	r3, [sp, #4]
 8003de6:	930a      	str	r3, [sp, #40]	; 0x28
 8003de8:	9b00      	ldr	r3, [sp, #0]
 8003dea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003df2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0d5      	beq.n	8003da6 <pow+0x82>
 8003dfa:	4b7b      	ldr	r3, [pc, #492]	; (8003fe8 <pow+0x2c4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e04:	b11b      	cbz	r3, 8003e0e <pow+0xea>
 8003e06:	f7ff fecd 	bl	8003ba4 <__errno>
 8003e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e0c:	6003      	str	r3, [r0, #0]
 8003e0e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003e12:	eeb0 0a48 	vmov.f32	s0, s16
 8003e16:	eef0 0a68 	vmov.f32	s1, s17
 8003e1a:	b00d      	add	sp, #52	; 0x34
 8003e1c:	ecbd 8b04 	vpop	{d8-d9}
 8003e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e24:	ec45 4b10 	vmov	d0, r4, r5
 8003e28:	f002 f847 	bl	8005eba <finite>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0f0      	beq.n	8003e12 <pow+0xee>
 8003e30:	4652      	mov	r2, sl
 8003e32:	465b      	mov	r3, fp
 8003e34:	4620      	mov	r0, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	f7fc fdfc 	bl	8000a34 <__aeabi_dcmplt>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d0e8      	beq.n	8003e12 <pow+0xee>
 8003e40:	2301      	movs	r3, #1
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <pow+0x2c0>)
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	f999 3000 	ldrsb.w	r3, [r9]
 8003e4c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003e50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e54:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e58:	b913      	cbnz	r3, 8003e60 <pow+0x13c>
 8003e5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003e5e:	e7a2      	b.n	8003da6 <pow+0x82>
 8003e60:	4962      	ldr	r1, [pc, #392]	; (8003fec <pow+0x2c8>)
 8003e62:	2000      	movs	r0, #0
 8003e64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d19c      	bne.n	8003da6 <pow+0x82>
 8003e6c:	f7ff fe9a 	bl	8003ba4 <__errno>
 8003e70:	2321      	movs	r3, #33	; 0x21
 8003e72:	6003      	str	r3, [r0, #0]
 8003e74:	e7c5      	b.n	8003e02 <pow+0xde>
 8003e76:	eeb0 0a48 	vmov.f32	s0, s16
 8003e7a:	eef0 0a68 	vmov.f32	s1, s17
 8003e7e:	f002 f81c 	bl	8005eba <finite>
 8003e82:	9000      	str	r0, [sp, #0]
 8003e84:	2800      	cmp	r0, #0
 8003e86:	f040 8081 	bne.w	8003f8c <pow+0x268>
 8003e8a:	ec47 6b10 	vmov	d0, r6, r7
 8003e8e:	f002 f814 	bl	8005eba <finite>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d07a      	beq.n	8003f8c <pow+0x268>
 8003e96:	ec45 4b10 	vmov	d0, r4, r5
 8003e9a:	f002 f80e 	bl	8005eba <finite>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d074      	beq.n	8003f8c <pow+0x268>
 8003ea2:	ec53 2b18 	vmov	r2, r3, d8
 8003ea6:	ee18 0a10 	vmov	r0, s16
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc fdea 	bl	8000a84 <__aeabi_dcmpun>
 8003eb0:	f999 9000 	ldrsb.w	r9, [r9]
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <pow+0x2c0>)
 8003eb6:	b1b0      	cbz	r0, 8003ee6 <pow+0x1c2>
 8003eb8:	2201      	movs	r2, #1
 8003eba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ebe:	9b00      	ldr	r3, [sp, #0]
 8003ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003ec6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003eca:	f1b9 0f00 	cmp.w	r9, #0
 8003ece:	d0c4      	beq.n	8003e5a <pow+0x136>
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	465b      	mov	r3, fp
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	4659      	mov	r1, fp
 8003ed8:	f7fc fc64 	bl	80007a4 <__aeabi_ddiv>
 8003edc:	f1b9 0f02 	cmp.w	r9, #2
 8003ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003ee4:	e7c1      	b.n	8003e6a <pow+0x146>
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eec:	900a      	str	r0, [sp, #40]	; 0x28
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <pow+0x2cc>)
 8003ef6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003efa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003efe:	f7fc fb27 	bl	8000550 <__aeabi_dmul>
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	f1b9 0f00 	cmp.w	r9, #0
 8003f0a:	d124      	bne.n	8003f56 <pow+0x232>
 8003f0c:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <pow+0x2d0>)
 8003f0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003f12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f16:	4630      	mov	r0, r6
 8003f18:	4652      	mov	r2, sl
 8003f1a:	465b      	mov	r3, fp
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f7fc fd89 	bl	8000a34 <__aeabi_dcmplt>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d056      	beq.n	8003fd4 <pow+0x2b0>
 8003f26:	ec45 4b10 	vmov	d0, r4, r5
 8003f2a:	f002 f861 	bl	8005ff0 <rint>
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	ec51 0b10 	vmov	r0, r1, d0
 8003f36:	f7fc fd73 	bl	8000a20 <__aeabi_dcmpeq>
 8003f3a:	b920      	cbnz	r0, 8003f46 <pow+0x222>
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <pow+0x2d4>)
 8003f3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003f42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f46:	f998 3000 	ldrsb.w	r3, [r8]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d142      	bne.n	8003fd4 <pow+0x2b0>
 8003f4e:	f7ff fe29 	bl	8003ba4 <__errno>
 8003f52:	2322      	movs	r3, #34	; 0x22
 8003f54:	e78d      	b.n	8003e72 <pow+0x14e>
 8003f56:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <pow+0x2d8>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4652      	mov	r2, sl
 8003f62:	465b      	mov	r3, fp
 8003f64:	4639      	mov	r1, r7
 8003f66:	f7fc fd65 	bl	8000a34 <__aeabi_dcmplt>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0eb      	beq.n	8003f46 <pow+0x222>
 8003f6e:	ec45 4b10 	vmov	d0, r4, r5
 8003f72:	f002 f83d 	bl	8005ff0 <rint>
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	ec51 0b10 	vmov	r0, r1, d0
 8003f7e:	f7fc fd4f 	bl	8000a20 <__aeabi_dcmpeq>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d1df      	bne.n	8003f46 <pow+0x222>
 8003f86:	2200      	movs	r2, #0
 8003f88:	4b18      	ldr	r3, [pc, #96]	; (8003fec <pow+0x2c8>)
 8003f8a:	e7da      	b.n	8003f42 <pow+0x21e>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2300      	movs	r3, #0
 8003f90:	ec51 0b18 	vmov	r0, r1, d8
 8003f94:	f7fc fd44 	bl	8000a20 <__aeabi_dcmpeq>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f43f af3a 	beq.w	8003e12 <pow+0xee>
 8003f9e:	ec47 6b10 	vmov	d0, r6, r7
 8003fa2:	f001 ff8a 	bl	8005eba <finite>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	f43f af33 	beq.w	8003e12 <pow+0xee>
 8003fac:	ec45 4b10 	vmov	d0, r4, r5
 8003fb0:	f001 ff83 	bl	8005eba <finite>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	f43f af2c 	beq.w	8003e12 <pow+0xee>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <pow+0x2c0>)
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8003fc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003fca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003fce:	ed8d 9b08 	vstr	d9, [sp, #32]
 8003fd2:	e7b8      	b.n	8003f46 <pow+0x222>
 8003fd4:	a802      	add	r0, sp, #8
 8003fd6:	f001 ffff 	bl	8005fd8 <matherr>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f47f af11 	bne.w	8003e02 <pow+0xde>
 8003fe0:	e7b5      	b.n	8003f4e <pow+0x22a>
 8003fe2:	bf00      	nop
 8003fe4:	08006230 	.word	0x08006230
 8003fe8:	3ff00000 	.word	0x3ff00000
 8003fec:	fff00000 	.word	0xfff00000
 8003ff0:	3fe00000 	.word	0x3fe00000
 8003ff4:	47efffff 	.word	0x47efffff
 8003ff8:	c7efffff 	.word	0xc7efffff
 8003ffc:	7ff00000 	.word	0x7ff00000
 8004000:	2000007c 	.word	0x2000007c

08004004 <sqrt>:
 8004004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004008:	ed2d 8b02 	vpush	{d8}
 800400c:	b08b      	sub	sp, #44	; 0x2c
 800400e:	ec55 4b10 	vmov	r4, r5, d0
 8004012:	f001 f833 	bl	800507c <__ieee754_sqrt>
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <sqrt+0xac>)
 8004018:	eeb0 8a40 	vmov.f32	s16, s0
 800401c:	eef0 8a60 	vmov.f32	s17, s1
 8004020:	f993 6000 	ldrsb.w	r6, [r3]
 8004024:	1c73      	adds	r3, r6, #1
 8004026:	d02a      	beq.n	800407e <sqrt+0x7a>
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fd28 	bl	8000a84 <__aeabi_dcmpun>
 8004034:	4607      	mov	r7, r0
 8004036:	bb10      	cbnz	r0, 800407e <sqrt+0x7a>
 8004038:	f04f 0800 	mov.w	r8, #0
 800403c:	f04f 0900 	mov.w	r9, #0
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	4620      	mov	r0, r4
 8004046:	4629      	mov	r1, r5
 8004048:	f7fc fcf4 	bl	8000a34 <__aeabi_dcmplt>
 800404c:	b1b8      	cbz	r0, 800407e <sqrt+0x7a>
 800404e:	2301      	movs	r3, #1
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <sqrt+0xb0>)
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	9708      	str	r7, [sp, #32]
 8004058:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800405c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004060:	b9b6      	cbnz	r6, 8004090 <sqrt+0x8c>
 8004062:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004066:	4668      	mov	r0, sp
 8004068:	f001 ffb6 	bl	8005fd8 <matherr>
 800406c:	b1d0      	cbz	r0, 80040a4 <sqrt+0xa0>
 800406e:	9b08      	ldr	r3, [sp, #32]
 8004070:	b11b      	cbz	r3, 800407a <sqrt+0x76>
 8004072:	f7ff fd97 	bl	8003ba4 <__errno>
 8004076:	9b08      	ldr	r3, [sp, #32]
 8004078:	6003      	str	r3, [r0, #0]
 800407a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800407e:	eeb0 0a48 	vmov.f32	s0, s16
 8004082:	eef0 0a68 	vmov.f32	s1, s17
 8004086:	b00b      	add	sp, #44	; 0x2c
 8004088:	ecbd 8b02 	vpop	{d8}
 800408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	f7fc fb84 	bl	80007a4 <__aeabi_ddiv>
 800409c:	2e02      	cmp	r6, #2
 800409e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040a2:	d1e0      	bne.n	8004066 <sqrt+0x62>
 80040a4:	f7ff fd7e 	bl	8003ba4 <__errno>
 80040a8:	2321      	movs	r3, #33	; 0x21
 80040aa:	6003      	str	r3, [r0, #0]
 80040ac:	e7df      	b.n	800406e <sqrt+0x6a>
 80040ae:	bf00      	nop
 80040b0:	2000007c 	.word	0x2000007c
 80040b4:	08006234 	.word	0x08006234

080040b8 <__ieee754_atan2>:
 80040b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040bc:	ec57 6b11 	vmov	r6, r7, d1
 80040c0:	4273      	negs	r3, r6
 80040c2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80040c6:	4333      	orrs	r3, r6
 80040c8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004270 <__ieee754_atan2+0x1b8>
 80040cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80040d0:	4573      	cmp	r3, lr
 80040d2:	ec51 0b10 	vmov	r0, r1, d0
 80040d6:	ee11 8a10 	vmov	r8, s2
 80040da:	d80a      	bhi.n	80040f2 <__ieee754_atan2+0x3a>
 80040dc:	4244      	negs	r4, r0
 80040de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040e2:	4304      	orrs	r4, r0
 80040e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80040e8:	4574      	cmp	r4, lr
 80040ea:	468c      	mov	ip, r1
 80040ec:	ee10 9a10 	vmov	r9, s0
 80040f0:	d907      	bls.n	8004102 <__ieee754_atan2+0x4a>
 80040f2:	4632      	mov	r2, r6
 80040f4:	463b      	mov	r3, r7
 80040f6:	f7fc f875 	bl	80001e4 <__adddf3>
 80040fa:	ec41 0b10 	vmov	d0, r0, r1
 80040fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004102:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004106:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800410a:	4334      	orrs	r4, r6
 800410c:	d103      	bne.n	8004116 <__ieee754_atan2+0x5e>
 800410e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004112:	f001 bd29 	b.w	8005b68 <atan>
 8004116:	17bc      	asrs	r4, r7, #30
 8004118:	f004 0402 	and.w	r4, r4, #2
 800411c:	ea53 0909 	orrs.w	r9, r3, r9
 8004120:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004124:	d107      	bne.n	8004136 <__ieee754_atan2+0x7e>
 8004126:	2c02      	cmp	r4, #2
 8004128:	d073      	beq.n	8004212 <__ieee754_atan2+0x15a>
 800412a:	2c03      	cmp	r4, #3
 800412c:	d1e5      	bne.n	80040fa <__ieee754_atan2+0x42>
 800412e:	a13e      	add	r1, pc, #248	; (adr r1, 8004228 <__ieee754_atan2+0x170>)
 8004130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004134:	e7e1      	b.n	80040fa <__ieee754_atan2+0x42>
 8004136:	ea52 0808 	orrs.w	r8, r2, r8
 800413a:	d106      	bne.n	800414a <__ieee754_atan2+0x92>
 800413c:	f1bc 0f00 	cmp.w	ip, #0
 8004140:	da6b      	bge.n	800421a <__ieee754_atan2+0x162>
 8004142:	a13b      	add	r1, pc, #236	; (adr r1, 8004230 <__ieee754_atan2+0x178>)
 8004144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004148:	e7d7      	b.n	80040fa <__ieee754_atan2+0x42>
 800414a:	4572      	cmp	r2, lr
 800414c:	d120      	bne.n	8004190 <__ieee754_atan2+0xd8>
 800414e:	4293      	cmp	r3, r2
 8004150:	d111      	bne.n	8004176 <__ieee754_atan2+0xbe>
 8004152:	2c02      	cmp	r4, #2
 8004154:	d007      	beq.n	8004166 <__ieee754_atan2+0xae>
 8004156:	2c03      	cmp	r4, #3
 8004158:	d009      	beq.n	800416e <__ieee754_atan2+0xb6>
 800415a:	2c01      	cmp	r4, #1
 800415c:	d155      	bne.n	800420a <__ieee754_atan2+0x152>
 800415e:	a136      	add	r1, pc, #216	; (adr r1, 8004238 <__ieee754_atan2+0x180>)
 8004160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004164:	e7c9      	b.n	80040fa <__ieee754_atan2+0x42>
 8004166:	a136      	add	r1, pc, #216	; (adr r1, 8004240 <__ieee754_atan2+0x188>)
 8004168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416c:	e7c5      	b.n	80040fa <__ieee754_atan2+0x42>
 800416e:	a136      	add	r1, pc, #216	; (adr r1, 8004248 <__ieee754_atan2+0x190>)
 8004170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004174:	e7c1      	b.n	80040fa <__ieee754_atan2+0x42>
 8004176:	2c02      	cmp	r4, #2
 8004178:	d04b      	beq.n	8004212 <__ieee754_atan2+0x15a>
 800417a:	2c03      	cmp	r4, #3
 800417c:	d0d7      	beq.n	800412e <__ieee754_atan2+0x76>
 800417e:	2c01      	cmp	r4, #1
 8004180:	f04f 0000 	mov.w	r0, #0
 8004184:	d102      	bne.n	800418c <__ieee754_atan2+0xd4>
 8004186:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800418a:	e7b6      	b.n	80040fa <__ieee754_atan2+0x42>
 800418c:	2100      	movs	r1, #0
 800418e:	e7b4      	b.n	80040fa <__ieee754_atan2+0x42>
 8004190:	4573      	cmp	r3, lr
 8004192:	d0d3      	beq.n	800413c <__ieee754_atan2+0x84>
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	151b      	asrs	r3, r3, #20
 8004198:	2b3c      	cmp	r3, #60	; 0x3c
 800419a:	dc1e      	bgt.n	80041da <__ieee754_atan2+0x122>
 800419c:	2f00      	cmp	r7, #0
 800419e:	da01      	bge.n	80041a4 <__ieee754_atan2+0xec>
 80041a0:	333c      	adds	r3, #60	; 0x3c
 80041a2:	db1e      	blt.n	80041e2 <__ieee754_atan2+0x12a>
 80041a4:	4632      	mov	r2, r6
 80041a6:	463b      	mov	r3, r7
 80041a8:	f7fc fafc 	bl	80007a4 <__aeabi_ddiv>
 80041ac:	ec41 0b10 	vmov	d0, r0, r1
 80041b0:	f001 fe7a 	bl	8005ea8 <fabs>
 80041b4:	f001 fcd8 	bl	8005b68 <atan>
 80041b8:	ec51 0b10 	vmov	r0, r1, d0
 80041bc:	2c01      	cmp	r4, #1
 80041be:	d013      	beq.n	80041e8 <__ieee754_atan2+0x130>
 80041c0:	2c02      	cmp	r4, #2
 80041c2:	d015      	beq.n	80041f0 <__ieee754_atan2+0x138>
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	d098      	beq.n	80040fa <__ieee754_atan2+0x42>
 80041c8:	a321      	add	r3, pc, #132	; (adr r3, 8004250 <__ieee754_atan2+0x198>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f7fc f807 	bl	80001e0 <__aeabi_dsub>
 80041d2:	a321      	add	r3, pc, #132	; (adr r3, 8004258 <__ieee754_atan2+0x1a0>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	e014      	b.n	8004204 <__ieee754_atan2+0x14c>
 80041da:	a121      	add	r1, pc, #132	; (adr r1, 8004260 <__ieee754_atan2+0x1a8>)
 80041dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e0:	e7ec      	b.n	80041bc <__ieee754_atan2+0x104>
 80041e2:	2000      	movs	r0, #0
 80041e4:	2100      	movs	r1, #0
 80041e6:	e7e9      	b.n	80041bc <__ieee754_atan2+0x104>
 80041e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041ec:	4619      	mov	r1, r3
 80041ee:	e784      	b.n	80040fa <__ieee754_atan2+0x42>
 80041f0:	a317      	add	r3, pc, #92	; (adr r3, 8004250 <__ieee754_atan2+0x198>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fb fff3 	bl	80001e0 <__aeabi_dsub>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	a116      	add	r1, pc, #88	; (adr r1, 8004258 <__ieee754_atan2+0x1a0>)
 8004200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004204:	f7fb ffec 	bl	80001e0 <__aeabi_dsub>
 8004208:	e777      	b.n	80040fa <__ieee754_atan2+0x42>
 800420a:	a117      	add	r1, pc, #92	; (adr r1, 8004268 <__ieee754_atan2+0x1b0>)
 800420c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004210:	e773      	b.n	80040fa <__ieee754_atan2+0x42>
 8004212:	a111      	add	r1, pc, #68	; (adr r1, 8004258 <__ieee754_atan2+0x1a0>)
 8004214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004218:	e76f      	b.n	80040fa <__ieee754_atan2+0x42>
 800421a:	a111      	add	r1, pc, #68	; (adr r1, 8004260 <__ieee754_atan2+0x1a8>)
 800421c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004220:	e76b      	b.n	80040fa <__ieee754_atan2+0x42>
 8004222:	bf00      	nop
 8004224:	f3af 8000 	nop.w
 8004228:	54442d18 	.word	0x54442d18
 800422c:	c00921fb 	.word	0xc00921fb
 8004230:	54442d18 	.word	0x54442d18
 8004234:	bff921fb 	.word	0xbff921fb
 8004238:	54442d18 	.word	0x54442d18
 800423c:	bfe921fb 	.word	0xbfe921fb
 8004240:	7f3321d2 	.word	0x7f3321d2
 8004244:	4002d97c 	.word	0x4002d97c
 8004248:	7f3321d2 	.word	0x7f3321d2
 800424c:	c002d97c 	.word	0xc002d97c
 8004250:	33145c07 	.word	0x33145c07
 8004254:	3ca1a626 	.word	0x3ca1a626
 8004258:	54442d18 	.word	0x54442d18
 800425c:	400921fb 	.word	0x400921fb
 8004260:	54442d18 	.word	0x54442d18
 8004264:	3ff921fb 	.word	0x3ff921fb
 8004268:	54442d18 	.word	0x54442d18
 800426c:	3fe921fb 	.word	0x3fe921fb
 8004270:	7ff00000 	.word	0x7ff00000
 8004274:	00000000 	.word	0x00000000

08004278 <__ieee754_pow>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b091      	sub	sp, #68	; 0x44
 800427e:	ed8d 1b00 	vstr	d1, [sp]
 8004282:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004286:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800428a:	ea58 0302 	orrs.w	r3, r8, r2
 800428e:	ec57 6b10 	vmov	r6, r7, d0
 8004292:	f000 84be 	beq.w	8004c12 <__ieee754_pow+0x99a>
 8004296:	4b7a      	ldr	r3, [pc, #488]	; (8004480 <__ieee754_pow+0x208>)
 8004298:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800429c:	429c      	cmp	r4, r3
 800429e:	463d      	mov	r5, r7
 80042a0:	ee10 aa10 	vmov	sl, s0
 80042a4:	dc09      	bgt.n	80042ba <__ieee754_pow+0x42>
 80042a6:	d103      	bne.n	80042b0 <__ieee754_pow+0x38>
 80042a8:	b93e      	cbnz	r6, 80042ba <__ieee754_pow+0x42>
 80042aa:	45a0      	cmp	r8, r4
 80042ac:	dc0d      	bgt.n	80042ca <__ieee754_pow+0x52>
 80042ae:	e001      	b.n	80042b4 <__ieee754_pow+0x3c>
 80042b0:	4598      	cmp	r8, r3
 80042b2:	dc02      	bgt.n	80042ba <__ieee754_pow+0x42>
 80042b4:	4598      	cmp	r8, r3
 80042b6:	d10e      	bne.n	80042d6 <__ieee754_pow+0x5e>
 80042b8:	b16a      	cbz	r2, 80042d6 <__ieee754_pow+0x5e>
 80042ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80042be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80042c2:	ea54 030a 	orrs.w	r3, r4, sl
 80042c6:	f000 84a4 	beq.w	8004c12 <__ieee754_pow+0x99a>
 80042ca:	486e      	ldr	r0, [pc, #440]	; (8004484 <__ieee754_pow+0x20c>)
 80042cc:	b011      	add	sp, #68	; 0x44
 80042ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d2:	f001 be85 	b.w	8005fe0 <nan>
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	da53      	bge.n	8004382 <__ieee754_pow+0x10a>
 80042da:	4b6b      	ldr	r3, [pc, #428]	; (8004488 <__ieee754_pow+0x210>)
 80042dc:	4598      	cmp	r8, r3
 80042de:	dc4d      	bgt.n	800437c <__ieee754_pow+0x104>
 80042e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80042e4:	4598      	cmp	r8, r3
 80042e6:	dd4c      	ble.n	8004382 <__ieee754_pow+0x10a>
 80042e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80042ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80042f0:	2b14      	cmp	r3, #20
 80042f2:	dd26      	ble.n	8004342 <__ieee754_pow+0xca>
 80042f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80042f8:	fa22 f103 	lsr.w	r1, r2, r3
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	4293      	cmp	r3, r2
 8004302:	d13e      	bne.n	8004382 <__ieee754_pow+0x10a>
 8004304:	f001 0101 	and.w	r1, r1, #1
 8004308:	f1c1 0b02 	rsb	fp, r1, #2
 800430c:	2a00      	cmp	r2, #0
 800430e:	d15b      	bne.n	80043c8 <__ieee754_pow+0x150>
 8004310:	4b5b      	ldr	r3, [pc, #364]	; (8004480 <__ieee754_pow+0x208>)
 8004312:	4598      	cmp	r8, r3
 8004314:	d124      	bne.n	8004360 <__ieee754_pow+0xe8>
 8004316:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800431a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800431e:	ea53 030a 	orrs.w	r3, r3, sl
 8004322:	f000 8476 	beq.w	8004c12 <__ieee754_pow+0x99a>
 8004326:	4b59      	ldr	r3, [pc, #356]	; (800448c <__ieee754_pow+0x214>)
 8004328:	429c      	cmp	r4, r3
 800432a:	dd2d      	ble.n	8004388 <__ieee754_pow+0x110>
 800432c:	f1b9 0f00 	cmp.w	r9, #0
 8004330:	f280 8473 	bge.w	8004c1a <__ieee754_pow+0x9a2>
 8004334:	2000      	movs	r0, #0
 8004336:	2100      	movs	r1, #0
 8004338:	ec41 0b10 	vmov	d0, r0, r1
 800433c:	b011      	add	sp, #68	; 0x44
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	2a00      	cmp	r2, #0
 8004344:	d13e      	bne.n	80043c4 <__ieee754_pow+0x14c>
 8004346:	f1c3 0314 	rsb	r3, r3, #20
 800434a:	fa48 f103 	asr.w	r1, r8, r3
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	4543      	cmp	r3, r8
 8004354:	f040 8469 	bne.w	8004c2a <__ieee754_pow+0x9b2>
 8004358:	f001 0101 	and.w	r1, r1, #1
 800435c:	f1c1 0b02 	rsb	fp, r1, #2
 8004360:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <__ieee754_pow+0x218>)
 8004362:	4598      	cmp	r8, r3
 8004364:	d118      	bne.n	8004398 <__ieee754_pow+0x120>
 8004366:	f1b9 0f00 	cmp.w	r9, #0
 800436a:	f280 845a 	bge.w	8004c22 <__ieee754_pow+0x9aa>
 800436e:	4948      	ldr	r1, [pc, #288]	; (8004490 <__ieee754_pow+0x218>)
 8004370:	4632      	mov	r2, r6
 8004372:	463b      	mov	r3, r7
 8004374:	2000      	movs	r0, #0
 8004376:	f7fc fa15 	bl	80007a4 <__aeabi_ddiv>
 800437a:	e7dd      	b.n	8004338 <__ieee754_pow+0xc0>
 800437c:	f04f 0b02 	mov.w	fp, #2
 8004380:	e7c4      	b.n	800430c <__ieee754_pow+0x94>
 8004382:	f04f 0b00 	mov.w	fp, #0
 8004386:	e7c1      	b.n	800430c <__ieee754_pow+0x94>
 8004388:	f1b9 0f00 	cmp.w	r9, #0
 800438c:	dad2      	bge.n	8004334 <__ieee754_pow+0xbc>
 800438e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004396:	e7cf      	b.n	8004338 <__ieee754_pow+0xc0>
 8004398:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800439c:	d106      	bne.n	80043ac <__ieee754_pow+0x134>
 800439e:	4632      	mov	r2, r6
 80043a0:	463b      	mov	r3, r7
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7fc f8d3 	bl	8000550 <__aeabi_dmul>
 80043aa:	e7c5      	b.n	8004338 <__ieee754_pow+0xc0>
 80043ac:	4b39      	ldr	r3, [pc, #228]	; (8004494 <__ieee754_pow+0x21c>)
 80043ae:	4599      	cmp	r9, r3
 80043b0:	d10a      	bne.n	80043c8 <__ieee754_pow+0x150>
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	db08      	blt.n	80043c8 <__ieee754_pow+0x150>
 80043b6:	ec47 6b10 	vmov	d0, r6, r7
 80043ba:	b011      	add	sp, #68	; 0x44
 80043bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	f000 be5c 	b.w	800507c <__ieee754_sqrt>
 80043c4:	f04f 0b00 	mov.w	fp, #0
 80043c8:	ec47 6b10 	vmov	d0, r6, r7
 80043cc:	f001 fd6c 	bl	8005ea8 <fabs>
 80043d0:	ec51 0b10 	vmov	r0, r1, d0
 80043d4:	f1ba 0f00 	cmp.w	sl, #0
 80043d8:	d127      	bne.n	800442a <__ieee754_pow+0x1b2>
 80043da:	b124      	cbz	r4, 80043e6 <__ieee754_pow+0x16e>
 80043dc:	4b2c      	ldr	r3, [pc, #176]	; (8004490 <__ieee754_pow+0x218>)
 80043de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d121      	bne.n	800442a <__ieee754_pow+0x1b2>
 80043e6:	f1b9 0f00 	cmp.w	r9, #0
 80043ea:	da05      	bge.n	80043f8 <__ieee754_pow+0x180>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	2000      	movs	r0, #0
 80043f2:	4927      	ldr	r1, [pc, #156]	; (8004490 <__ieee754_pow+0x218>)
 80043f4:	f7fc f9d6 	bl	80007a4 <__aeabi_ddiv>
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	da9d      	bge.n	8004338 <__ieee754_pow+0xc0>
 80043fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004400:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004404:	ea54 030b 	orrs.w	r3, r4, fp
 8004408:	d108      	bne.n	800441c <__ieee754_pow+0x1a4>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	f7fb fee5 	bl	80001e0 <__aeabi_dsub>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e7ac      	b.n	8004376 <__ieee754_pow+0xfe>
 800441c:	f1bb 0f01 	cmp.w	fp, #1
 8004420:	d18a      	bne.n	8004338 <__ieee754_pow+0xc0>
 8004422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004426:	4619      	mov	r1, r3
 8004428:	e786      	b.n	8004338 <__ieee754_pow+0xc0>
 800442a:	0fed      	lsrs	r5, r5, #31
 800442c:	1e6b      	subs	r3, r5, #1
 800442e:	930d      	str	r3, [sp, #52]	; 0x34
 8004430:	ea5b 0303 	orrs.w	r3, fp, r3
 8004434:	d102      	bne.n	800443c <__ieee754_pow+0x1c4>
 8004436:	4632      	mov	r2, r6
 8004438:	463b      	mov	r3, r7
 800443a:	e7e8      	b.n	800440e <__ieee754_pow+0x196>
 800443c:	4b16      	ldr	r3, [pc, #88]	; (8004498 <__ieee754_pow+0x220>)
 800443e:	4598      	cmp	r8, r3
 8004440:	f340 80fe 	ble.w	8004640 <__ieee754_pow+0x3c8>
 8004444:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004448:	4598      	cmp	r8, r3
 800444a:	dd0a      	ble.n	8004462 <__ieee754_pow+0x1ea>
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <__ieee754_pow+0x214>)
 800444e:	429c      	cmp	r4, r3
 8004450:	dc0d      	bgt.n	800446e <__ieee754_pow+0x1f6>
 8004452:	f1b9 0f00 	cmp.w	r9, #0
 8004456:	f6bf af6d 	bge.w	8004334 <__ieee754_pow+0xbc>
 800445a:	a307      	add	r3, pc, #28	; (adr r3, 8004478 <__ieee754_pow+0x200>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	e79f      	b.n	80043a2 <__ieee754_pow+0x12a>
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <__ieee754_pow+0x224>)
 8004464:	429c      	cmp	r4, r3
 8004466:	ddf4      	ble.n	8004452 <__ieee754_pow+0x1da>
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <__ieee754_pow+0x218>)
 800446a:	429c      	cmp	r4, r3
 800446c:	dd18      	ble.n	80044a0 <__ieee754_pow+0x228>
 800446e:	f1b9 0f00 	cmp.w	r9, #0
 8004472:	dcf2      	bgt.n	800445a <__ieee754_pow+0x1e2>
 8004474:	e75e      	b.n	8004334 <__ieee754_pow+0xbc>
 8004476:	bf00      	nop
 8004478:	8800759c 	.word	0x8800759c
 800447c:	7e37e43c 	.word	0x7e37e43c
 8004480:	7ff00000 	.word	0x7ff00000
 8004484:	08006238 	.word	0x08006238
 8004488:	433fffff 	.word	0x433fffff
 800448c:	3fefffff 	.word	0x3fefffff
 8004490:	3ff00000 	.word	0x3ff00000
 8004494:	3fe00000 	.word	0x3fe00000
 8004498:	41e00000 	.word	0x41e00000
 800449c:	3feffffe 	.word	0x3feffffe
 80044a0:	2200      	movs	r2, #0
 80044a2:	4b63      	ldr	r3, [pc, #396]	; (8004630 <__ieee754_pow+0x3b8>)
 80044a4:	f7fb fe9c 	bl	80001e0 <__aeabi_dsub>
 80044a8:	a355      	add	r3, pc, #340	; (adr r3, 8004600 <__ieee754_pow+0x388>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	4604      	mov	r4, r0
 80044b0:	460d      	mov	r5, r1
 80044b2:	f7fc f84d 	bl	8000550 <__aeabi_dmul>
 80044b6:	a354      	add	r3, pc, #336	; (adr r3, 8004608 <__ieee754_pow+0x390>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	4606      	mov	r6, r0
 80044be:	460f      	mov	r7, r1
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	f7fc f844 	bl	8000550 <__aeabi_dmul>
 80044c8:	2200      	movs	r2, #0
 80044ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ce:	4b59      	ldr	r3, [pc, #356]	; (8004634 <__ieee754_pow+0x3bc>)
 80044d0:	4620      	mov	r0, r4
 80044d2:	4629      	mov	r1, r5
 80044d4:	f7fc f83c 	bl	8000550 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	a14c      	add	r1, pc, #304	; (adr r1, 8004610 <__ieee754_pow+0x398>)
 80044de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044e2:	f7fb fe7d 	bl	80001e0 <__aeabi_dsub>
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f7fc f831 	bl	8000550 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	2000      	movs	r0, #0
 80044f4:	4950      	ldr	r1, [pc, #320]	; (8004638 <__ieee754_pow+0x3c0>)
 80044f6:	f7fb fe73 	bl	80001e0 <__aeabi_dsub>
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	4680      	mov	r8, r0
 8004500:	4689      	mov	r9, r1
 8004502:	4620      	mov	r0, r4
 8004504:	4629      	mov	r1, r5
 8004506:	f7fc f823 	bl	8000550 <__aeabi_dmul>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4640      	mov	r0, r8
 8004510:	4649      	mov	r1, r9
 8004512:	f7fc f81d 	bl	8000550 <__aeabi_dmul>
 8004516:	a340      	add	r3, pc, #256	; (adr r3, 8004618 <__ieee754_pow+0x3a0>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fc f818 	bl	8000550 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004528:	f7fb fe5a 	bl	80001e0 <__aeabi_dsub>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4604      	mov	r4, r0
 8004532:	460d      	mov	r5, r1
 8004534:	4630      	mov	r0, r6
 8004536:	4639      	mov	r1, r7
 8004538:	f7fb fe54 	bl	80001e4 <__adddf3>
 800453c:	2000      	movs	r0, #0
 800453e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004542:	4632      	mov	r2, r6
 8004544:	463b      	mov	r3, r7
 8004546:	f7fb fe4b 	bl	80001e0 <__aeabi_dsub>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fb fe45 	bl	80001e0 <__aeabi_dsub>
 8004556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004558:	f10b 33ff 	add.w	r3, fp, #4294967295
 800455c:	4313      	orrs	r3, r2
 800455e:	4606      	mov	r6, r0
 8004560:	460f      	mov	r7, r1
 8004562:	f040 81eb 	bne.w	800493c <__ieee754_pow+0x6c4>
 8004566:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004620 <__ieee754_pow+0x3a8>
 800456a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800456e:	2400      	movs	r4, #0
 8004570:	4622      	mov	r2, r4
 8004572:	462b      	mov	r3, r5
 8004574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004578:	ed8d 7b02 	vstr	d7, [sp, #8]
 800457c:	f7fb fe30 	bl	80001e0 <__aeabi_dsub>
 8004580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004584:	f7fb ffe4 	bl	8000550 <__aeabi_dmul>
 8004588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800458c:	4680      	mov	r8, r0
 800458e:	4689      	mov	r9, r1
 8004590:	4630      	mov	r0, r6
 8004592:	4639      	mov	r1, r7
 8004594:	f7fb ffdc 	bl	8000550 <__aeabi_dmul>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4640      	mov	r0, r8
 800459e:	4649      	mov	r1, r9
 80045a0:	f7fb fe20 	bl	80001e4 <__adddf3>
 80045a4:	4622      	mov	r2, r4
 80045a6:	462b      	mov	r3, r5
 80045a8:	4680      	mov	r8, r0
 80045aa:	4689      	mov	r9, r1
 80045ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045b0:	f7fb ffce 	bl	8000550 <__aeabi_dmul>
 80045b4:	460b      	mov	r3, r1
 80045b6:	4604      	mov	r4, r0
 80045b8:	460d      	mov	r5, r1
 80045ba:	4602      	mov	r2, r0
 80045bc:	4649      	mov	r1, r9
 80045be:	4640      	mov	r0, r8
 80045c0:	e9cd 4500 	strd	r4, r5, [sp]
 80045c4:	f7fb fe0e 	bl	80001e4 <__adddf3>
 80045c8:	4b1c      	ldr	r3, [pc, #112]	; (800463c <__ieee754_pow+0x3c4>)
 80045ca:	4299      	cmp	r1, r3
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	468b      	mov	fp, r1
 80045d2:	f340 82f7 	ble.w	8004bc4 <__ieee754_pow+0x94c>
 80045d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80045da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80045de:	4303      	orrs	r3, r0
 80045e0:	f000 81ea 	beq.w	80049b8 <__ieee754_pow+0x740>
 80045e4:	a310      	add	r3, pc, #64	; (adr r3, 8004628 <__ieee754_pow+0x3b0>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ee:	f7fb ffaf 	bl	8000550 <__aeabi_dmul>
 80045f2:	a30d      	add	r3, pc, #52	; (adr r3, 8004628 <__ieee754_pow+0x3b0>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	e6d5      	b.n	80043a6 <__ieee754_pow+0x12e>
 80045fa:	bf00      	nop
 80045fc:	f3af 8000 	nop.w
 8004600:	60000000 	.word	0x60000000
 8004604:	3ff71547 	.word	0x3ff71547
 8004608:	f85ddf44 	.word	0xf85ddf44
 800460c:	3e54ae0b 	.word	0x3e54ae0b
 8004610:	55555555 	.word	0x55555555
 8004614:	3fd55555 	.word	0x3fd55555
 8004618:	652b82fe 	.word	0x652b82fe
 800461c:	3ff71547 	.word	0x3ff71547
 8004620:	00000000 	.word	0x00000000
 8004624:	bff00000 	.word	0xbff00000
 8004628:	8800759c 	.word	0x8800759c
 800462c:	7e37e43c 	.word	0x7e37e43c
 8004630:	3ff00000 	.word	0x3ff00000
 8004634:	3fd00000 	.word	0x3fd00000
 8004638:	3fe00000 	.word	0x3fe00000
 800463c:	408fffff 	.word	0x408fffff
 8004640:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	da05      	bge.n	8004656 <__ieee754_pow+0x3de>
 800464a:	4bd3      	ldr	r3, [pc, #844]	; (8004998 <__ieee754_pow+0x720>)
 800464c:	f7fb ff80 	bl	8000550 <__aeabi_dmul>
 8004650:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004654:	460c      	mov	r4, r1
 8004656:	1523      	asrs	r3, r4, #20
 8004658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800465c:	4413      	add	r3, r2
 800465e:	9309      	str	r3, [sp, #36]	; 0x24
 8004660:	4bce      	ldr	r3, [pc, #824]	; (800499c <__ieee754_pow+0x724>)
 8004662:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004666:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800466a:	429c      	cmp	r4, r3
 800466c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004670:	dd08      	ble.n	8004684 <__ieee754_pow+0x40c>
 8004672:	4bcb      	ldr	r3, [pc, #812]	; (80049a0 <__ieee754_pow+0x728>)
 8004674:	429c      	cmp	r4, r3
 8004676:	f340 815e 	ble.w	8004936 <__ieee754_pow+0x6be>
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	3301      	adds	r3, #1
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004684:	f04f 0a00 	mov.w	sl, #0
 8004688:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800468c:	930c      	str	r3, [sp, #48]	; 0x30
 800468e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004690:	4bc4      	ldr	r3, [pc, #784]	; (80049a4 <__ieee754_pow+0x72c>)
 8004692:	4413      	add	r3, r2
 8004694:	ed93 7b00 	vldr	d7, [r3]
 8004698:	4629      	mov	r1, r5
 800469a:	ec53 2b17 	vmov	r2, r3, d7
 800469e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80046a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80046a6:	f7fb fd9b 	bl	80001e0 <__aeabi_dsub>
 80046aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046ae:	4606      	mov	r6, r0
 80046b0:	460f      	mov	r7, r1
 80046b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b6:	f7fb fd95 	bl	80001e4 <__adddf3>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	2000      	movs	r0, #0
 80046c0:	49b9      	ldr	r1, [pc, #740]	; (80049a8 <__ieee754_pow+0x730>)
 80046c2:	f7fc f86f 	bl	80007a4 <__aeabi_ddiv>
 80046c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4630      	mov	r0, r6
 80046d0:	4639      	mov	r1, r7
 80046d2:	f7fb ff3d 	bl	8000550 <__aeabi_dmul>
 80046d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80046de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80046e2:	2300      	movs	r3, #0
 80046e4:	9302      	str	r3, [sp, #8]
 80046e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80046ea:	106d      	asrs	r5, r5, #1
 80046ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80046f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80046f4:	2200      	movs	r2, #0
 80046f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80046fa:	4640      	mov	r0, r8
 80046fc:	4649      	mov	r1, r9
 80046fe:	4614      	mov	r4, r2
 8004700:	461d      	mov	r5, r3
 8004702:	f7fb ff25 	bl	8000550 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4630      	mov	r0, r6
 800470c:	4639      	mov	r1, r7
 800470e:	f7fb fd67 	bl	80001e0 <__aeabi_dsub>
 8004712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004716:	4606      	mov	r6, r0
 8004718:	460f      	mov	r7, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fb fd5f 	bl	80001e0 <__aeabi_dsub>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800472a:	f7fb fd59 	bl	80001e0 <__aeabi_dsub>
 800472e:	4642      	mov	r2, r8
 8004730:	464b      	mov	r3, r9
 8004732:	f7fb ff0d 	bl	8000550 <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4630      	mov	r0, r6
 800473c:	4639      	mov	r1, r7
 800473e:	f7fb fd4f 	bl	80001e0 <__aeabi_dsub>
 8004742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004746:	f7fb ff03 	bl	8000550 <__aeabi_dmul>
 800474a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800474e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f7fb fefb 	bl	8000550 <__aeabi_dmul>
 800475a:	a37b      	add	r3, pc, #492	; (adr r3, 8004948 <__ieee754_pow+0x6d0>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
 8004764:	f7fb fef4 	bl	8000550 <__aeabi_dmul>
 8004768:	a379      	add	r3, pc, #484	; (adr r3, 8004950 <__ieee754_pow+0x6d8>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fb fd39 	bl	80001e4 <__adddf3>
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f7fb feeb 	bl	8000550 <__aeabi_dmul>
 800477a:	a377      	add	r3, pc, #476	; (adr r3, 8004958 <__ieee754_pow+0x6e0>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f7fb fd30 	bl	80001e4 <__adddf3>
 8004784:	4622      	mov	r2, r4
 8004786:	462b      	mov	r3, r5
 8004788:	f7fb fee2 	bl	8000550 <__aeabi_dmul>
 800478c:	a374      	add	r3, pc, #464	; (adr r3, 8004960 <__ieee754_pow+0x6e8>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fd27 	bl	80001e4 <__adddf3>
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	f7fb fed9 	bl	8000550 <__aeabi_dmul>
 800479e:	a372      	add	r3, pc, #456	; (adr r3, 8004968 <__ieee754_pow+0x6f0>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb fd1e 	bl	80001e4 <__adddf3>
 80047a8:	4622      	mov	r2, r4
 80047aa:	462b      	mov	r3, r5
 80047ac:	f7fb fed0 	bl	8000550 <__aeabi_dmul>
 80047b0:	a36f      	add	r3, pc, #444	; (adr r3, 8004970 <__ieee754_pow+0x6f8>)
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	f7fb fd15 	bl	80001e4 <__adddf3>
 80047ba:	4622      	mov	r2, r4
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	462b      	mov	r3, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f7fb fec3 	bl	8000550 <__aeabi_dmul>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4630      	mov	r0, r6
 80047d0:	4639      	mov	r1, r7
 80047d2:	f7fb febd 	bl	8000550 <__aeabi_dmul>
 80047d6:	4642      	mov	r2, r8
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	464b      	mov	r3, r9
 80047de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e2:	f7fb fcff 	bl	80001e4 <__adddf3>
 80047e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047ea:	f7fb feb1 	bl	8000550 <__aeabi_dmul>
 80047ee:	4622      	mov	r2, r4
 80047f0:	462b      	mov	r3, r5
 80047f2:	f7fb fcf7 	bl	80001e4 <__adddf3>
 80047f6:	4642      	mov	r2, r8
 80047f8:	4606      	mov	r6, r0
 80047fa:	460f      	mov	r7, r1
 80047fc:	464b      	mov	r3, r9
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f7fb fea5 	bl	8000550 <__aeabi_dmul>
 8004806:	2200      	movs	r2, #0
 8004808:	4b68      	ldr	r3, [pc, #416]	; (80049ac <__ieee754_pow+0x734>)
 800480a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800480e:	f7fb fce9 	bl	80001e4 <__adddf3>
 8004812:	4632      	mov	r2, r6
 8004814:	463b      	mov	r3, r7
 8004816:	f7fb fce5 	bl	80001e4 <__adddf3>
 800481a:	9802      	ldr	r0, [sp, #8]
 800481c:	460d      	mov	r5, r1
 800481e:	4604      	mov	r4, r0
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4640      	mov	r0, r8
 8004826:	4649      	mov	r1, r9
 8004828:	f7fb fe92 	bl	8000550 <__aeabi_dmul>
 800482c:	2200      	movs	r2, #0
 800482e:	4680      	mov	r8, r0
 8004830:	4689      	mov	r9, r1
 8004832:	4b5e      	ldr	r3, [pc, #376]	; (80049ac <__ieee754_pow+0x734>)
 8004834:	4620      	mov	r0, r4
 8004836:	4629      	mov	r1, r5
 8004838:	f7fb fcd2 	bl	80001e0 <__aeabi_dsub>
 800483c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004840:	f7fb fcce 	bl	80001e0 <__aeabi_dsub>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fb fcc8 	bl	80001e0 <__aeabi_dsub>
 8004850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004854:	f7fb fe7c 	bl	8000550 <__aeabi_dmul>
 8004858:	4622      	mov	r2, r4
 800485a:	4606      	mov	r6, r0
 800485c:	460f      	mov	r7, r1
 800485e:	462b      	mov	r3, r5
 8004860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004864:	f7fb fe74 	bl	8000550 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4630      	mov	r0, r6
 800486e:	4639      	mov	r1, r7
 8004870:	f7fb fcb8 	bl	80001e4 <__adddf3>
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fb fcb0 	bl	80001e4 <__adddf3>
 8004884:	9802      	ldr	r0, [sp, #8]
 8004886:	a33c      	add	r3, pc, #240	; (adr r3, 8004978 <__ieee754_pow+0x700>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	f7fb fe5e 	bl	8000550 <__aeabi_dmul>
 8004894:	4642      	mov	r2, r8
 8004896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800489a:	464b      	mov	r3, r9
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb fc9e 	bl	80001e0 <__aeabi_dsub>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4630      	mov	r0, r6
 80048aa:	4639      	mov	r1, r7
 80048ac:	f7fb fc98 	bl	80001e0 <__aeabi_dsub>
 80048b0:	a333      	add	r3, pc, #204	; (adr r3, 8004980 <__ieee754_pow+0x708>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f7fb fe4b 	bl	8000550 <__aeabi_dmul>
 80048ba:	a333      	add	r3, pc, #204	; (adr r3, 8004988 <__ieee754_pow+0x710>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	4620      	mov	r0, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	f7fb fe42 	bl	8000550 <__aeabi_dmul>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fb fc86 	bl	80001e4 <__adddf3>
 80048d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <__ieee754_pow+0x738>)
 80048dc:	4413      	add	r3, r2
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f7fb fc7f 	bl	80001e4 <__adddf3>
 80048e6:	4604      	mov	r4, r0
 80048e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ea:	460d      	mov	r5, r1
 80048ec:	f7fb fdc6 	bl	800047c <__aeabi_i2d>
 80048f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048f2:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <__ieee754_pow+0x73c>)
 80048f4:	4413      	add	r3, r2
 80048f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048fa:	4606      	mov	r6, r0
 80048fc:	460f      	mov	r7, r1
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004906:	f7fb fc6d 	bl	80001e4 <__adddf3>
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	f7fb fc69 	bl	80001e4 <__adddf3>
 8004912:	4632      	mov	r2, r6
 8004914:	463b      	mov	r3, r7
 8004916:	f7fb fc65 	bl	80001e4 <__adddf3>
 800491a:	9802      	ldr	r0, [sp, #8]
 800491c:	4632      	mov	r2, r6
 800491e:	463b      	mov	r3, r7
 8004920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004924:	f7fb fc5c 	bl	80001e0 <__aeabi_dsub>
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	f7fb fc58 	bl	80001e0 <__aeabi_dsub>
 8004930:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004934:	e607      	b.n	8004546 <__ieee754_pow+0x2ce>
 8004936:	f04f 0a01 	mov.w	sl, #1
 800493a:	e6a5      	b.n	8004688 <__ieee754_pow+0x410>
 800493c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004990 <__ieee754_pow+0x718>
 8004940:	e613      	b.n	800456a <__ieee754_pow+0x2f2>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	4a454eef 	.word	0x4a454eef
 800494c:	3fca7e28 	.word	0x3fca7e28
 8004950:	93c9db65 	.word	0x93c9db65
 8004954:	3fcd864a 	.word	0x3fcd864a
 8004958:	a91d4101 	.word	0xa91d4101
 800495c:	3fd17460 	.word	0x3fd17460
 8004960:	518f264d 	.word	0x518f264d
 8004964:	3fd55555 	.word	0x3fd55555
 8004968:	db6fabff 	.word	0xdb6fabff
 800496c:	3fdb6db6 	.word	0x3fdb6db6
 8004970:	33333303 	.word	0x33333303
 8004974:	3fe33333 	.word	0x3fe33333
 8004978:	e0000000 	.word	0xe0000000
 800497c:	3feec709 	.word	0x3feec709
 8004980:	dc3a03fd 	.word	0xdc3a03fd
 8004984:	3feec709 	.word	0x3feec709
 8004988:	145b01f5 	.word	0x145b01f5
 800498c:	be3e2fe0 	.word	0xbe3e2fe0
 8004990:	00000000 	.word	0x00000000
 8004994:	3ff00000 	.word	0x3ff00000
 8004998:	43400000 	.word	0x43400000
 800499c:	0003988e 	.word	0x0003988e
 80049a0:	000bb679 	.word	0x000bb679
 80049a4:	08006240 	.word	0x08006240
 80049a8:	3ff00000 	.word	0x3ff00000
 80049ac:	40080000 	.word	0x40080000
 80049b0:	08006260 	.word	0x08006260
 80049b4:	08006250 	.word	0x08006250
 80049b8:	a3b4      	add	r3, pc, #720	; (adr r3, 8004c8c <__ieee754_pow+0xa14>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	4640      	mov	r0, r8
 80049c0:	4649      	mov	r1, r9
 80049c2:	f7fb fc0f 	bl	80001e4 <__adddf3>
 80049c6:	4622      	mov	r2, r4
 80049c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049cc:	462b      	mov	r3, r5
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fb fc05 	bl	80001e0 <__aeabi_dsub>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049de:	f7fc f847 	bl	8000a70 <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f47f adfe 	bne.w	80045e4 <__ieee754_pow+0x36c>
 80049e8:	4aa3      	ldr	r2, [pc, #652]	; (8004c78 <__ieee754_pow+0xa00>)
 80049ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f340 810a 	ble.w	8004c08 <__ieee754_pow+0x990>
 80049f4:	151b      	asrs	r3, r3, #20
 80049f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80049fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80049fe:	fa4a f303 	asr.w	r3, sl, r3
 8004a02:	445b      	add	r3, fp
 8004a04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004a08:	4e9c      	ldr	r6, [pc, #624]	; (8004c7c <__ieee754_pow+0xa04>)
 8004a0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004a0e:	4116      	asrs	r6, r2
 8004a10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004a14:	2000      	movs	r0, #0
 8004a16:	ea23 0106 	bic.w	r1, r3, r6
 8004a1a:	f1c2 0214 	rsb	r2, r2, #20
 8004a1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004a22:	fa4a fa02 	asr.w	sl, sl, r2
 8004a26:	f1bb 0f00 	cmp.w	fp, #0
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	bfb8      	it	lt
 8004a34:	f1ca 0a00 	rsblt	sl, sl, #0
 8004a38:	f7fb fbd2 	bl	80001e0 <__aeabi_dsub>
 8004a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a48:	f7fb fbcc 	bl	80001e4 <__adddf3>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	a378      	add	r3, pc, #480	; (adr r3, 8004c30 <__ieee754_pow+0x9b8>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	4604      	mov	r4, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	f7fb fd7a 	bl	8000550 <__aeabi_dmul>
 8004a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a60:	4606      	mov	r6, r0
 8004a62:	460f      	mov	r7, r1
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fb fbba 	bl	80001e0 <__aeabi_dsub>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fb fbb4 	bl	80001e0 <__aeabi_dsub>
 8004a78:	a36f      	add	r3, pc, #444	; (adr r3, 8004c38 <__ieee754_pow+0x9c0>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fd67 	bl	8000550 <__aeabi_dmul>
 8004a82:	a36f      	add	r3, pc, #444	; (adr r3, 8004c40 <__ieee754_pow+0x9c8>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	4680      	mov	r8, r0
 8004a8a:	4689      	mov	r9, r1
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f7fb fd5e 	bl	8000550 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4640      	mov	r0, r8
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	f7fb fba2 	bl	80001e4 <__adddf3>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb fb9a 	bl	80001e4 <__adddf3>
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	4680      	mov	r8, r0
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	f7fb fb92 	bl	80001e0 <__aeabi_dsub>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f7fb fb8c 	bl	80001e0 <__aeabi_dsub>
 8004ac8:	4642      	mov	r2, r8
 8004aca:	4606      	mov	r6, r0
 8004acc:	460f      	mov	r7, r1
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fb fd3c 	bl	8000550 <__aeabi_dmul>
 8004ad8:	a35b      	add	r3, pc, #364	; (adr r3, 8004c48 <__ieee754_pow+0x9d0>)
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	4604      	mov	r4, r0
 8004ae0:	460d      	mov	r5, r1
 8004ae2:	f7fb fd35 	bl	8000550 <__aeabi_dmul>
 8004ae6:	a35a      	add	r3, pc, #360	; (adr r3, 8004c50 <__ieee754_pow+0x9d8>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fb78 	bl	80001e0 <__aeabi_dsub>
 8004af0:	4622      	mov	r2, r4
 8004af2:	462b      	mov	r3, r5
 8004af4:	f7fb fd2c 	bl	8000550 <__aeabi_dmul>
 8004af8:	a357      	add	r3, pc, #348	; (adr r3, 8004c58 <__ieee754_pow+0x9e0>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fb71 	bl	80001e4 <__adddf3>
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	f7fb fd23 	bl	8000550 <__aeabi_dmul>
 8004b0a:	a355      	add	r3, pc, #340	; (adr r3, 8004c60 <__ieee754_pow+0x9e8>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb fb66 	bl	80001e0 <__aeabi_dsub>
 8004b14:	4622      	mov	r2, r4
 8004b16:	462b      	mov	r3, r5
 8004b18:	f7fb fd1a 	bl	8000550 <__aeabi_dmul>
 8004b1c:	a352      	add	r3, pc, #328	; (adr r3, 8004c68 <__ieee754_pow+0x9f0>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f7fb fb5f 	bl	80001e4 <__adddf3>
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f7fb fd11 	bl	8000550 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb fb53 	bl	80001e0 <__aeabi_dsub>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4640      	mov	r0, r8
 8004b44:	4649      	mov	r1, r9
 8004b46:	f7fb fd03 	bl	8000550 <__aeabi_dmul>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	f7fb fb42 	bl	80001e0 <__aeabi_dsub>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b64:	f7fb fe1e 	bl	80007a4 <__aeabi_ddiv>
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	463b      	mov	r3, r7
 8004b70:	4640      	mov	r0, r8
 8004b72:	4649      	mov	r1, r9
 8004b74:	f7fb fcec 	bl	8000550 <__aeabi_dmul>
 8004b78:	4632      	mov	r2, r6
 8004b7a:	463b      	mov	r3, r7
 8004b7c:	f7fb fb32 	bl	80001e4 <__adddf3>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4620      	mov	r0, r4
 8004b86:	4629      	mov	r1, r5
 8004b88:	f7fb fb2a 	bl	80001e0 <__aeabi_dsub>
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	f7fb fb26 	bl	80001e0 <__aeabi_dsub>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	2000      	movs	r0, #0
 8004b9a:	4939      	ldr	r1, [pc, #228]	; (8004c80 <__ieee754_pow+0xa08>)
 8004b9c:	f7fb fb20 	bl	80001e0 <__aeabi_dsub>
 8004ba0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004ba4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	da2f      	bge.n	8004c0e <__ieee754_pow+0x996>
 8004bae:	4650      	mov	r0, sl
 8004bb0:	ec43 2b10 	vmov	d0, r2, r3
 8004bb4:	f001 faa0 	bl	80060f8 <scalbn>
 8004bb8:	ec51 0b10 	vmov	r0, r1, d0
 8004bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bc0:	f7ff bbf1 	b.w	80043a6 <__ieee754_pow+0x12e>
 8004bc4:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <__ieee754_pow+0xa0c>)
 8004bc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004bca:	429e      	cmp	r6, r3
 8004bcc:	f77f af0c 	ble.w	80049e8 <__ieee754_pow+0x770>
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <__ieee754_pow+0xa10>)
 8004bd2:	440b      	add	r3, r1
 8004bd4:	4303      	orrs	r3, r0
 8004bd6:	d00b      	beq.n	8004bf0 <__ieee754_pow+0x978>
 8004bd8:	a325      	add	r3, pc, #148	; (adr r3, 8004c70 <__ieee754_pow+0x9f8>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be2:	f7fb fcb5 	bl	8000550 <__aeabi_dmul>
 8004be6:	a322      	add	r3, pc, #136	; (adr r3, 8004c70 <__ieee754_pow+0x9f8>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7ff bbdb 	b.w	80043a6 <__ieee754_pow+0x12e>
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	462b      	mov	r3, r5
 8004bf4:	f7fb faf4 	bl	80001e0 <__aeabi_dsub>
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	f7fb ff2e 	bl	8000a5c <__aeabi_dcmpge>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f43f aef1 	beq.w	80049e8 <__ieee754_pow+0x770>
 8004c06:	e7e7      	b.n	8004bd8 <__ieee754_pow+0x960>
 8004c08:	f04f 0a00 	mov.w	sl, #0
 8004c0c:	e718      	b.n	8004a40 <__ieee754_pow+0x7c8>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	e7d4      	b.n	8004bbc <__ieee754_pow+0x944>
 8004c12:	2000      	movs	r0, #0
 8004c14:	491a      	ldr	r1, [pc, #104]	; (8004c80 <__ieee754_pow+0xa08>)
 8004c16:	f7ff bb8f 	b.w	8004338 <__ieee754_pow+0xc0>
 8004c1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c1e:	f7ff bb8b 	b.w	8004338 <__ieee754_pow+0xc0>
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7ff bb87 	b.w	8004338 <__ieee754_pow+0xc0>
 8004c2a:	4693      	mov	fp, r2
 8004c2c:	f7ff bb98 	b.w	8004360 <__ieee754_pow+0xe8>
 8004c30:	00000000 	.word	0x00000000
 8004c34:	3fe62e43 	.word	0x3fe62e43
 8004c38:	fefa39ef 	.word	0xfefa39ef
 8004c3c:	3fe62e42 	.word	0x3fe62e42
 8004c40:	0ca86c39 	.word	0x0ca86c39
 8004c44:	be205c61 	.word	0xbe205c61
 8004c48:	72bea4d0 	.word	0x72bea4d0
 8004c4c:	3e663769 	.word	0x3e663769
 8004c50:	c5d26bf1 	.word	0xc5d26bf1
 8004c54:	3ebbbd41 	.word	0x3ebbbd41
 8004c58:	af25de2c 	.word	0xaf25de2c
 8004c5c:	3f11566a 	.word	0x3f11566a
 8004c60:	16bebd93 	.word	0x16bebd93
 8004c64:	3f66c16c 	.word	0x3f66c16c
 8004c68:	5555553e 	.word	0x5555553e
 8004c6c:	3fc55555 	.word	0x3fc55555
 8004c70:	c2f8f359 	.word	0xc2f8f359
 8004c74:	01a56e1f 	.word	0x01a56e1f
 8004c78:	3fe00000 	.word	0x3fe00000
 8004c7c:	000fffff 	.word	0x000fffff
 8004c80:	3ff00000 	.word	0x3ff00000
 8004c84:	4090cbff 	.word	0x4090cbff
 8004c88:	3f6f3400 	.word	0x3f6f3400
 8004c8c:	652b82fe 	.word	0x652b82fe
 8004c90:	3c971547 	.word	0x3c971547
 8004c94:	00000000 	.word	0x00000000

08004c98 <__ieee754_rem_pio2>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	ec57 6b10 	vmov	r6, r7, d0
 8004ca0:	4bc3      	ldr	r3, [pc, #780]	; (8004fb0 <__ieee754_rem_pio2+0x318>)
 8004ca2:	b08d      	sub	sp, #52	; 0x34
 8004ca4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004ca8:	4598      	cmp	r8, r3
 8004caa:	4604      	mov	r4, r0
 8004cac:	9704      	str	r7, [sp, #16]
 8004cae:	dc07      	bgt.n	8004cc0 <__ieee754_rem_pio2+0x28>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	ed84 0b00 	vstr	d0, [r4]
 8004cb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004cbc:	2500      	movs	r5, #0
 8004cbe:	e027      	b.n	8004d10 <__ieee754_rem_pio2+0x78>
 8004cc0:	4bbc      	ldr	r3, [pc, #752]	; (8004fb4 <__ieee754_rem_pio2+0x31c>)
 8004cc2:	4598      	cmp	r8, r3
 8004cc4:	dc75      	bgt.n	8004db2 <__ieee754_rem_pio2+0x11a>
 8004cc6:	9b04      	ldr	r3, [sp, #16]
 8004cc8:	4dbb      	ldr	r5, [pc, #748]	; (8004fb8 <__ieee754_rem_pio2+0x320>)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	ee10 0a10 	vmov	r0, s0
 8004cd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8004f78 <__ieee754_rem_pio2+0x2e0>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	dd36      	ble.n	8004d48 <__ieee754_rem_pio2+0xb0>
 8004cda:	f7fb fa81 	bl	80001e0 <__aeabi_dsub>
 8004cde:	45a8      	cmp	r8, r5
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	460f      	mov	r7, r1
 8004ce4:	d018      	beq.n	8004d18 <__ieee754_rem_pio2+0x80>
 8004ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004f80 <__ieee754_rem_pio2+0x2e8>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f7fb fa78 	bl	80001e0 <__aeabi_dsub>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	e9c4 2300 	strd	r2, r3, [r4]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fa70 	bl	80001e0 <__aeabi_dsub>
 8004d00:	a39f      	add	r3, pc, #636	; (adr r3, 8004f80 <__ieee754_rem_pio2+0x2e8>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa6b 	bl	80001e0 <__aeabi_dsub>
 8004d0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d0e:	2501      	movs	r5, #1
 8004d10:	4628      	mov	r0, r5
 8004d12:	b00d      	add	sp, #52	; 0x34
 8004d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d18:	a39b      	add	r3, pc, #620	; (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f0>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fa5f 	bl	80001e0 <__aeabi_dsub>
 8004d22:	a39b      	add	r3, pc, #620	; (adr r3, 8004f90 <__ieee754_rem_pio2+0x2f8>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	4606      	mov	r6, r0
 8004d2a:	460f      	mov	r7, r1
 8004d2c:	f7fb fa58 	bl	80001e0 <__aeabi_dsub>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	e9c4 2300 	strd	r2, r3, [r4]
 8004d38:	4630      	mov	r0, r6
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	f7fb fa50 	bl	80001e0 <__aeabi_dsub>
 8004d40:	a393      	add	r3, pc, #588	; (adr r3, 8004f90 <__ieee754_rem_pio2+0x2f8>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	e7de      	b.n	8004d06 <__ieee754_rem_pio2+0x6e>
 8004d48:	f7fb fa4c 	bl	80001e4 <__adddf3>
 8004d4c:	45a8      	cmp	r8, r5
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	d016      	beq.n	8004d82 <__ieee754_rem_pio2+0xea>
 8004d54:	a38a      	add	r3, pc, #552	; (adr r3, 8004f80 <__ieee754_rem_pio2+0x2e8>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f7fb fa43 	bl	80001e4 <__adddf3>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	e9c4 2300 	strd	r2, r3, [r4]
 8004d66:	4630      	mov	r0, r6
 8004d68:	4639      	mov	r1, r7
 8004d6a:	f7fb fa39 	bl	80001e0 <__aeabi_dsub>
 8004d6e:	a384      	add	r3, pc, #528	; (adr r3, 8004f80 <__ieee754_rem_pio2+0x2e8>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fa36 	bl	80001e4 <__adddf3>
 8004d78:	f04f 35ff 	mov.w	r5, #4294967295
 8004d7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d80:	e7c6      	b.n	8004d10 <__ieee754_rem_pio2+0x78>
 8004d82:	a381      	add	r3, pc, #516	; (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f0>)
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f7fb fa2c 	bl	80001e4 <__adddf3>
 8004d8c:	a380      	add	r3, pc, #512	; (adr r3, 8004f90 <__ieee754_rem_pio2+0x2f8>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	4606      	mov	r6, r0
 8004d94:	460f      	mov	r7, r1
 8004d96:	f7fb fa25 	bl	80001e4 <__adddf3>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9c4 2300 	strd	r2, r3, [r4]
 8004da2:	4630      	mov	r0, r6
 8004da4:	4639      	mov	r1, r7
 8004da6:	f7fb fa1b 	bl	80001e0 <__aeabi_dsub>
 8004daa:	a379      	add	r3, pc, #484	; (adr r3, 8004f90 <__ieee754_rem_pio2+0x2f8>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	e7e0      	b.n	8004d74 <__ieee754_rem_pio2+0xdc>
 8004db2:	4b82      	ldr	r3, [pc, #520]	; (8004fbc <__ieee754_rem_pio2+0x324>)
 8004db4:	4598      	cmp	r8, r3
 8004db6:	f300 80d0 	bgt.w	8004f5a <__ieee754_rem_pio2+0x2c2>
 8004dba:	f001 f875 	bl	8005ea8 <fabs>
 8004dbe:	ec57 6b10 	vmov	r6, r7, d0
 8004dc2:	ee10 0a10 	vmov	r0, s0
 8004dc6:	a374      	add	r3, pc, #464	; (adr r3, 8004f98 <__ieee754_rem_pio2+0x300>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	4639      	mov	r1, r7
 8004dce:	f7fb fbbf 	bl	8000550 <__aeabi_dmul>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4b7a      	ldr	r3, [pc, #488]	; (8004fc0 <__ieee754_rem_pio2+0x328>)
 8004dd6:	f7fb fa05 	bl	80001e4 <__adddf3>
 8004dda:	f7fb fe69 	bl	8000ab0 <__aeabi_d2iz>
 8004dde:	4605      	mov	r5, r0
 8004de0:	f7fb fb4c 	bl	800047c <__aeabi_i2d>
 8004de4:	a364      	add	r3, pc, #400	; (adr r3, 8004f78 <__ieee754_rem_pio2+0x2e0>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dee:	f7fb fbaf 	bl	8000550 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4630      	mov	r0, r6
 8004df8:	4639      	mov	r1, r7
 8004dfa:	f7fb f9f1 	bl	80001e0 <__aeabi_dsub>
 8004dfe:	a360      	add	r3, pc, #384	; (adr r3, 8004f80 <__ieee754_rem_pio2+0x2e8>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	4682      	mov	sl, r0
 8004e06:	468b      	mov	fp, r1
 8004e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e0c:	f7fb fba0 	bl	8000550 <__aeabi_dmul>
 8004e10:	2d1f      	cmp	r5, #31
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	dc0c      	bgt.n	8004e32 <__ieee754_rem_pio2+0x19a>
 8004e18:	1e6a      	subs	r2, r5, #1
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <__ieee754_rem_pio2+0x32c>)
 8004e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e20:	4543      	cmp	r3, r8
 8004e22:	d006      	beq.n	8004e32 <__ieee754_rem_pio2+0x19a>
 8004e24:	4632      	mov	r2, r6
 8004e26:	463b      	mov	r3, r7
 8004e28:	4650      	mov	r0, sl
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	f7fb f9d8 	bl	80001e0 <__aeabi_dsub>
 8004e30:	e00e      	b.n	8004e50 <__ieee754_rem_pio2+0x1b8>
 8004e32:	4632      	mov	r2, r6
 8004e34:	463b      	mov	r3, r7
 8004e36:	4650      	mov	r0, sl
 8004e38:	4659      	mov	r1, fp
 8004e3a:	f7fb f9d1 	bl	80001e0 <__aeabi_dsub>
 8004e3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	9a05      	ldr	r2, [sp, #20]
 8004e46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	dc02      	bgt.n	8004e56 <__ieee754_rem_pio2+0x1be>
 8004e50:	e9c4 0100 	strd	r0, r1, [r4]
 8004e54:	e039      	b.n	8004eca <__ieee754_rem_pio2+0x232>
 8004e56:	a34c      	add	r3, pc, #304	; (adr r3, 8004f88 <__ieee754_rem_pio2+0x2f0>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e60:	f7fb fb76 	bl	8000550 <__aeabi_dmul>
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4650      	mov	r0, sl
 8004e6e:	4659      	mov	r1, fp
 8004e70:	f7fb f9b6 	bl	80001e0 <__aeabi_dsub>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4680      	mov	r8, r0
 8004e7a:	4689      	mov	r9, r1
 8004e7c:	4650      	mov	r0, sl
 8004e7e:	4659      	mov	r1, fp
 8004e80:	f7fb f9ae 	bl	80001e0 <__aeabi_dsub>
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	f7fb f9aa 	bl	80001e0 <__aeabi_dsub>
 8004e8c:	a340      	add	r3, pc, #256	; (adr r3, 8004f90 <__ieee754_rem_pio2+0x2f8>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e9a:	f7fb fb59 	bl	8000550 <__aeabi_dmul>
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	f7fb f99d 	bl	80001e0 <__aeabi_dsub>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460f      	mov	r7, r1
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb f995 	bl	80001e0 <__aeabi_dsub>
 8004eb6:	9a05      	ldr	r2, [sp, #20]
 8004eb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b31      	cmp	r3, #49	; 0x31
 8004ec0:	dc20      	bgt.n	8004f04 <__ieee754_rem_pio2+0x26c>
 8004ec2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ec6:	46c2      	mov	sl, r8
 8004ec8:	46cb      	mov	fp, r9
 8004eca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004ece:	4650      	mov	r0, sl
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	f7fb f983 	bl	80001e0 <__aeabi_dsub>
 8004eda:	463b      	mov	r3, r7
 8004edc:	4632      	mov	r2, r6
 8004ede:	f7fb f97f 	bl	80001e0 <__aeabi_dsub>
 8004ee2:	9b04      	ldr	r3, [sp, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004eea:	f6bf af11 	bge.w	8004d10 <__ieee754_rem_pio2+0x78>
 8004eee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	f8c4 8000 	str.w	r8, [r4]
 8004ef8:	60a0      	str	r0, [r4, #8]
 8004efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004efe:	60e3      	str	r3, [r4, #12]
 8004f00:	426d      	negs	r5, r5
 8004f02:	e705      	b.n	8004d10 <__ieee754_rem_pio2+0x78>
 8004f04:	a326      	add	r3, pc, #152	; (adr r3, 8004fa0 <__ieee754_rem_pio2+0x308>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0e:	f7fb fb1f 	bl	8000550 <__aeabi_dmul>
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f7fb f95f 	bl	80001e0 <__aeabi_dsub>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4682      	mov	sl, r0
 8004f28:	468b      	mov	fp, r1
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	f7fb f957 	bl	80001e0 <__aeabi_dsub>
 8004f32:	4632      	mov	r2, r6
 8004f34:	463b      	mov	r3, r7
 8004f36:	f7fb f953 	bl	80001e0 <__aeabi_dsub>
 8004f3a:	a31b      	add	r3, pc, #108	; (adr r3, 8004fa8 <__ieee754_rem_pio2+0x310>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	4606      	mov	r6, r0
 8004f42:	460f      	mov	r7, r1
 8004f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f48:	f7fb fb02 	bl	8000550 <__aeabi_dmul>
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	463b      	mov	r3, r7
 8004f50:	f7fb f946 	bl	80001e0 <__aeabi_dsub>
 8004f54:	4606      	mov	r6, r0
 8004f56:	460f      	mov	r7, r1
 8004f58:	e764      	b.n	8004e24 <__ieee754_rem_pio2+0x18c>
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <__ieee754_rem_pio2+0x330>)
 8004f5c:	4598      	cmp	r8, r3
 8004f5e:	dd35      	ble.n	8004fcc <__ieee754_rem_pio2+0x334>
 8004f60:	ee10 2a10 	vmov	r2, s0
 8004f64:	463b      	mov	r3, r7
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f939 	bl	80001e0 <__aeabi_dsub>
 8004f6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f72:	e9c4 0100 	strd	r0, r1, [r4]
 8004f76:	e6a1      	b.n	8004cbc <__ieee754_rem_pio2+0x24>
 8004f78:	54400000 	.word	0x54400000
 8004f7c:	3ff921fb 	.word	0x3ff921fb
 8004f80:	1a626331 	.word	0x1a626331
 8004f84:	3dd0b461 	.word	0x3dd0b461
 8004f88:	1a600000 	.word	0x1a600000
 8004f8c:	3dd0b461 	.word	0x3dd0b461
 8004f90:	2e037073 	.word	0x2e037073
 8004f94:	3ba3198a 	.word	0x3ba3198a
 8004f98:	6dc9c883 	.word	0x6dc9c883
 8004f9c:	3fe45f30 	.word	0x3fe45f30
 8004fa0:	2e000000 	.word	0x2e000000
 8004fa4:	3ba3198a 	.word	0x3ba3198a
 8004fa8:	252049c1 	.word	0x252049c1
 8004fac:	397b839a 	.word	0x397b839a
 8004fb0:	3fe921fb 	.word	0x3fe921fb
 8004fb4:	4002d97b 	.word	0x4002d97b
 8004fb8:	3ff921fb 	.word	0x3ff921fb
 8004fbc:	413921fb 	.word	0x413921fb
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	08006270 	.word	0x08006270
 8004fc8:	7fefffff 	.word	0x7fefffff
 8004fcc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004fd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004fd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004fd8:	4630      	mov	r0, r6
 8004fda:	460f      	mov	r7, r1
 8004fdc:	f7fb fd68 	bl	8000ab0 <__aeabi_d2iz>
 8004fe0:	f7fb fa4c 	bl	800047c <__aeabi_i2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ff0:	f7fb f8f6 	bl	80001e0 <__aeabi_dsub>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <__ieee754_rem_pio2+0x3dc>)
 8004ff8:	f7fb faaa 	bl	8000550 <__aeabi_dmul>
 8004ffc:	460f      	mov	r7, r1
 8004ffe:	4606      	mov	r6, r0
 8005000:	f7fb fd56 	bl	8000ab0 <__aeabi_d2iz>
 8005004:	f7fb fa3a 	bl	800047c <__aeabi_i2d>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4630      	mov	r0, r6
 800500e:	4639      	mov	r1, r7
 8005010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005014:	f7fb f8e4 	bl	80001e0 <__aeabi_dsub>
 8005018:	2200      	movs	r2, #0
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <__ieee754_rem_pio2+0x3dc>)
 800501c:	f7fb fa98 	bl	8000550 <__aeabi_dmul>
 8005020:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005024:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005028:	f04f 0803 	mov.w	r8, #3
 800502c:	2600      	movs	r6, #0
 800502e:	2700      	movs	r7, #0
 8005030:	4632      	mov	r2, r6
 8005032:	463b      	mov	r3, r7
 8005034:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005038:	f108 3aff 	add.w	sl, r8, #4294967295
 800503c:	f7fb fcf0 	bl	8000a20 <__aeabi_dcmpeq>
 8005040:	b9b0      	cbnz	r0, 8005070 <__ieee754_rem_pio2+0x3d8>
 8005042:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <__ieee754_rem_pio2+0x3e0>)
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	2302      	movs	r3, #2
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4643      	mov	r3, r8
 800504e:	4621      	mov	r1, r4
 8005050:	a806      	add	r0, sp, #24
 8005052:	f000 f98d 	bl	8005370 <__kernel_rem_pio2>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	4605      	mov	r5, r0
 800505c:	f6bf ae58 	bge.w	8004d10 <__ieee754_rem_pio2+0x78>
 8005060:	6863      	ldr	r3, [r4, #4]
 8005062:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	68e3      	ldr	r3, [r4, #12]
 800506a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800506e:	e746      	b.n	8004efe <__ieee754_rem_pio2+0x266>
 8005070:	46d0      	mov	r8, sl
 8005072:	e7dd      	b.n	8005030 <__ieee754_rem_pio2+0x398>
 8005074:	41700000 	.word	0x41700000
 8005078:	080062f0 	.word	0x080062f0

0800507c <__ieee754_sqrt>:
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4955      	ldr	r1, [pc, #340]	; (80051d8 <__ieee754_sqrt+0x15c>)
 8005082:	ec55 4b10 	vmov	r4, r5, d0
 8005086:	43a9      	bics	r1, r5
 8005088:	462b      	mov	r3, r5
 800508a:	462a      	mov	r2, r5
 800508c:	d112      	bne.n	80050b4 <__ieee754_sqrt+0x38>
 800508e:	ee10 2a10 	vmov	r2, s0
 8005092:	ee10 0a10 	vmov	r0, s0
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb fa5a 	bl	8000550 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f89e 	bl	80001e4 <__adddf3>
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	ec45 4b10 	vmov	d0, r4, r5
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	ee10 0a10 	vmov	r0, s0
 80050ba:	4621      	mov	r1, r4
 80050bc:	dc0f      	bgt.n	80050de <__ieee754_sqrt+0x62>
 80050be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050c2:	4330      	orrs	r0, r6
 80050c4:	d0f2      	beq.n	80050ac <__ieee754_sqrt+0x30>
 80050c6:	b155      	cbz	r5, 80050de <__ieee754_sqrt+0x62>
 80050c8:	ee10 2a10 	vmov	r2, s0
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb f886 	bl	80001e0 <__aeabi_dsub>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	f7fb fb64 	bl	80007a4 <__aeabi_ddiv>
 80050dc:	e7e4      	b.n	80050a8 <__ieee754_sqrt+0x2c>
 80050de:	151b      	asrs	r3, r3, #20
 80050e0:	d073      	beq.n	80051ca <__ieee754_sqrt+0x14e>
 80050e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80050e6:	07dd      	lsls	r5, r3, #31
 80050e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80050ec:	bf48      	it	mi
 80050ee:	0fc8      	lsrmi	r0, r1, #31
 80050f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80050f4:	bf44      	itt	mi
 80050f6:	0049      	lslmi	r1, r1, #1
 80050f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80050fc:	2500      	movs	r5, #0
 80050fe:	1058      	asrs	r0, r3, #1
 8005100:	0fcb      	lsrs	r3, r1, #31
 8005102:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005106:	0049      	lsls	r1, r1, #1
 8005108:	2316      	movs	r3, #22
 800510a:	462c      	mov	r4, r5
 800510c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005110:	19a7      	adds	r7, r4, r6
 8005112:	4297      	cmp	r7, r2
 8005114:	bfde      	ittt	le
 8005116:	19bc      	addle	r4, r7, r6
 8005118:	1bd2      	suble	r2, r2, r7
 800511a:	19ad      	addle	r5, r5, r6
 800511c:	0fcf      	lsrs	r7, r1, #31
 800511e:	3b01      	subs	r3, #1
 8005120:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005124:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005128:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800512c:	d1f0      	bne.n	8005110 <__ieee754_sqrt+0x94>
 800512e:	f04f 0c20 	mov.w	ip, #32
 8005132:	469e      	mov	lr, r3
 8005134:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005138:	42a2      	cmp	r2, r4
 800513a:	eb06 070e 	add.w	r7, r6, lr
 800513e:	dc02      	bgt.n	8005146 <__ieee754_sqrt+0xca>
 8005140:	d112      	bne.n	8005168 <__ieee754_sqrt+0xec>
 8005142:	428f      	cmp	r7, r1
 8005144:	d810      	bhi.n	8005168 <__ieee754_sqrt+0xec>
 8005146:	2f00      	cmp	r7, #0
 8005148:	eb07 0e06 	add.w	lr, r7, r6
 800514c:	da42      	bge.n	80051d4 <__ieee754_sqrt+0x158>
 800514e:	f1be 0f00 	cmp.w	lr, #0
 8005152:	db3f      	blt.n	80051d4 <__ieee754_sqrt+0x158>
 8005154:	f104 0801 	add.w	r8, r4, #1
 8005158:	1b12      	subs	r2, r2, r4
 800515a:	428f      	cmp	r7, r1
 800515c:	bf88      	it	hi
 800515e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005162:	1bc9      	subs	r1, r1, r7
 8005164:	4433      	add	r3, r6
 8005166:	4644      	mov	r4, r8
 8005168:	0052      	lsls	r2, r2, #1
 800516a:	f1bc 0c01 	subs.w	ip, ip, #1
 800516e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005172:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005176:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800517a:	d1dd      	bne.n	8005138 <__ieee754_sqrt+0xbc>
 800517c:	430a      	orrs	r2, r1
 800517e:	d006      	beq.n	800518e <__ieee754_sqrt+0x112>
 8005180:	1c5c      	adds	r4, r3, #1
 8005182:	bf13      	iteet	ne
 8005184:	3301      	addne	r3, #1
 8005186:	3501      	addeq	r5, #1
 8005188:	4663      	moveq	r3, ip
 800518a:	f023 0301 	bicne.w	r3, r3, #1
 800518e:	106a      	asrs	r2, r5, #1
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	07e9      	lsls	r1, r5, #31
 8005194:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005198:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800519c:	bf48      	it	mi
 800519e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80051a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80051a6:	461c      	mov	r4, r3
 80051a8:	e780      	b.n	80050ac <__ieee754_sqrt+0x30>
 80051aa:	0aca      	lsrs	r2, r1, #11
 80051ac:	3815      	subs	r0, #21
 80051ae:	0549      	lsls	r1, r1, #21
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d0fa      	beq.n	80051aa <__ieee754_sqrt+0x12e>
 80051b4:	02d6      	lsls	r6, r2, #11
 80051b6:	d50a      	bpl.n	80051ce <__ieee754_sqrt+0x152>
 80051b8:	f1c3 0420 	rsb	r4, r3, #32
 80051bc:	fa21 f404 	lsr.w	r4, r1, r4
 80051c0:	1e5d      	subs	r5, r3, #1
 80051c2:	4099      	lsls	r1, r3
 80051c4:	4322      	orrs	r2, r4
 80051c6:	1b43      	subs	r3, r0, r5
 80051c8:	e78b      	b.n	80050e2 <__ieee754_sqrt+0x66>
 80051ca:	4618      	mov	r0, r3
 80051cc:	e7f0      	b.n	80051b0 <__ieee754_sqrt+0x134>
 80051ce:	0052      	lsls	r2, r2, #1
 80051d0:	3301      	adds	r3, #1
 80051d2:	e7ef      	b.n	80051b4 <__ieee754_sqrt+0x138>
 80051d4:	46a0      	mov	r8, r4
 80051d6:	e7bf      	b.n	8005158 <__ieee754_sqrt+0xdc>
 80051d8:	7ff00000 	.word	0x7ff00000
 80051dc:	00000000 	.word	0x00000000

080051e0 <__kernel_cos>:
 80051e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	ec59 8b10 	vmov	r8, r9, d0
 80051e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80051ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80051f0:	ed2d 8b02 	vpush	{d8}
 80051f4:	eeb0 8a41 	vmov.f32	s16, s2
 80051f8:	eef0 8a61 	vmov.f32	s17, s3
 80051fc:	da07      	bge.n	800520e <__kernel_cos+0x2e>
 80051fe:	ee10 0a10 	vmov	r0, s0
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb fc54 	bl	8000ab0 <__aeabi_d2iz>
 8005208:	2800      	cmp	r0, #0
 800520a:	f000 8089 	beq.w	8005320 <__kernel_cos+0x140>
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f99b 	bl	8000550 <__aeabi_dmul>
 800521a:	2200      	movs	r2, #0
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <__kernel_cos+0x178>)
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	f7fb f995 	bl	8000550 <__aeabi_dmul>
 8005226:	a340      	add	r3, pc, #256	; (adr r3, 8005328 <__kernel_cos+0x148>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	4682      	mov	sl, r0
 800522e:	468b      	mov	fp, r1
 8005230:	4620      	mov	r0, r4
 8005232:	4629      	mov	r1, r5
 8005234:	f7fb f98c 	bl	8000550 <__aeabi_dmul>
 8005238:	a33d      	add	r3, pc, #244	; (adr r3, 8005330 <__kernel_cos+0x150>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fa ffd1 	bl	80001e4 <__adddf3>
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	f7fb f983 	bl	8000550 <__aeabi_dmul>
 800524a:	a33b      	add	r3, pc, #236	; (adr r3, 8005338 <__kernel_cos+0x158>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffc6 	bl	80001e0 <__aeabi_dsub>
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	f7fb f97a 	bl	8000550 <__aeabi_dmul>
 800525c:	a338      	add	r3, pc, #224	; (adr r3, 8005340 <__kernel_cos+0x160>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fa ffbf 	bl	80001e4 <__adddf3>
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	f7fb f971 	bl	8000550 <__aeabi_dmul>
 800526e:	a336      	add	r3, pc, #216	; (adr r3, 8005348 <__kernel_cos+0x168>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fa ffb4 	bl	80001e0 <__aeabi_dsub>
 8005278:	4622      	mov	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f7fb f968 	bl	8000550 <__aeabi_dmul>
 8005280:	a333      	add	r3, pc, #204	; (adr r3, 8005350 <__kernel_cos+0x170>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fa ffad 	bl	80001e4 <__adddf3>
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	f7fb f95f 	bl	8000550 <__aeabi_dmul>
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	f7fb f95b 	bl	8000550 <__aeabi_dmul>
 800529a:	ec53 2b18 	vmov	r2, r3, d8
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb f953 	bl	8000550 <__aeabi_dmul>
 80052aa:	460b      	mov	r3, r1
 80052ac:	4602      	mov	r2, r0
 80052ae:	4629      	mov	r1, r5
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fa ff95 	bl	80001e0 <__aeabi_dsub>
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <__kernel_cos+0x17c>)
 80052b8:	429e      	cmp	r6, r3
 80052ba:	4680      	mov	r8, r0
 80052bc:	4689      	mov	r9, r1
 80052be:	dc11      	bgt.n	80052e4 <__kernel_cos+0x104>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4650      	mov	r0, sl
 80052c6:	4659      	mov	r1, fp
 80052c8:	f7fa ff8a 	bl	80001e0 <__aeabi_dsub>
 80052cc:	460b      	mov	r3, r1
 80052ce:	4924      	ldr	r1, [pc, #144]	; (8005360 <__kernel_cos+0x180>)
 80052d0:	4602      	mov	r2, r0
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fa ff84 	bl	80001e0 <__aeabi_dsub>
 80052d8:	ecbd 8b02 	vpop	{d8}
 80052dc:	ec41 0b10 	vmov	d0, r0, r1
 80052e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <__kernel_cos+0x184>)
 80052e6:	491e      	ldr	r1, [pc, #120]	; (8005360 <__kernel_cos+0x180>)
 80052e8:	429e      	cmp	r6, r3
 80052ea:	bfcc      	ite	gt
 80052ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8005368 <__kernel_cos+0x188>)
 80052ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80052f2:	2400      	movs	r4, #0
 80052f4:	4622      	mov	r2, r4
 80052f6:	462b      	mov	r3, r5
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7fa ff71 	bl	80001e0 <__aeabi_dsub>
 80052fe:	4622      	mov	r2, r4
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	462b      	mov	r3, r5
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	f7fa ff69 	bl	80001e0 <__aeabi_dsub>
 800530e:	4642      	mov	r2, r8
 8005310:	464b      	mov	r3, r9
 8005312:	f7fa ff65 	bl	80001e0 <__aeabi_dsub>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	e7d9      	b.n	80052d4 <__kernel_cos+0xf4>
 8005320:	2000      	movs	r0, #0
 8005322:	490f      	ldr	r1, [pc, #60]	; (8005360 <__kernel_cos+0x180>)
 8005324:	e7d8      	b.n	80052d8 <__kernel_cos+0xf8>
 8005326:	bf00      	nop
 8005328:	be8838d4 	.word	0xbe8838d4
 800532c:	bda8fae9 	.word	0xbda8fae9
 8005330:	bdb4b1c4 	.word	0xbdb4b1c4
 8005334:	3e21ee9e 	.word	0x3e21ee9e
 8005338:	809c52ad 	.word	0x809c52ad
 800533c:	3e927e4f 	.word	0x3e927e4f
 8005340:	19cb1590 	.word	0x19cb1590
 8005344:	3efa01a0 	.word	0x3efa01a0
 8005348:	16c15177 	.word	0x16c15177
 800534c:	3f56c16c 	.word	0x3f56c16c
 8005350:	5555554c 	.word	0x5555554c
 8005354:	3fa55555 	.word	0x3fa55555
 8005358:	3fe00000 	.word	0x3fe00000
 800535c:	3fd33332 	.word	0x3fd33332
 8005360:	3ff00000 	.word	0x3ff00000
 8005364:	3fe90000 	.word	0x3fe90000
 8005368:	3fd20000 	.word	0x3fd20000
 800536c:	00000000 	.word	0x00000000

08005370 <__kernel_rem_pio2>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	ed2d 8b02 	vpush	{d8}
 8005378:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800537c:	1ed4      	subs	r4, r2, #3
 800537e:	9308      	str	r3, [sp, #32]
 8005380:	9101      	str	r1, [sp, #4]
 8005382:	4bc5      	ldr	r3, [pc, #788]	; (8005698 <__kernel_rem_pio2+0x328>)
 8005384:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005386:	9009      	str	r0, [sp, #36]	; 0x24
 8005388:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	9b08      	ldr	r3, [sp, #32]
 8005390:	3b01      	subs	r3, #1
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	2318      	movs	r3, #24
 8005396:	fb94 f4f3 	sdiv	r4, r4, r3
 800539a:	f06f 0317 	mvn.w	r3, #23
 800539e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80053a2:	fb04 3303 	mla	r3, r4, r3, r3
 80053a6:	eb03 0a02 	add.w	sl, r3, r2
 80053aa:	9b04      	ldr	r3, [sp, #16]
 80053ac:	9a07      	ldr	r2, [sp, #28]
 80053ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005688 <__kernel_rem_pio2+0x318>
 80053b2:	eb03 0802 	add.w	r8, r3, r2
 80053b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80053b8:	1aa7      	subs	r7, r4, r2
 80053ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80053be:	ae22      	add	r6, sp, #136	; 0x88
 80053c0:	2500      	movs	r5, #0
 80053c2:	4545      	cmp	r5, r8
 80053c4:	dd13      	ble.n	80053ee <__kernel_rem_pio2+0x7e>
 80053c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005688 <__kernel_rem_pio2+0x318>
 80053ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80053ce:	2600      	movs	r6, #0
 80053d0:	9b04      	ldr	r3, [sp, #16]
 80053d2:	429e      	cmp	r6, r3
 80053d4:	dc32      	bgt.n	800543c <__kernel_rem_pio2+0xcc>
 80053d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d8:	9302      	str	r3, [sp, #8]
 80053da:	9b08      	ldr	r3, [sp, #32]
 80053dc:	199d      	adds	r5, r3, r6
 80053de:	ab22      	add	r3, sp, #136	; 0x88
 80053e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80053e4:	9306      	str	r3, [sp, #24]
 80053e6:	ec59 8b18 	vmov	r8, r9, d8
 80053ea:	2700      	movs	r7, #0
 80053ec:	e01f      	b.n	800542e <__kernel_rem_pio2+0xbe>
 80053ee:	42ef      	cmn	r7, r5
 80053f0:	d407      	bmi.n	8005402 <__kernel_rem_pio2+0x92>
 80053f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80053f6:	f7fb f841 	bl	800047c <__aeabi_i2d>
 80053fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80053fe:	3501      	adds	r5, #1
 8005400:	e7df      	b.n	80053c2 <__kernel_rem_pio2+0x52>
 8005402:	ec51 0b18 	vmov	r0, r1, d8
 8005406:	e7f8      	b.n	80053fa <__kernel_rem_pio2+0x8a>
 8005408:	9906      	ldr	r1, [sp, #24]
 800540a:	9d02      	ldr	r5, [sp, #8]
 800540c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005410:	9106      	str	r1, [sp, #24]
 8005412:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005416:	9502      	str	r5, [sp, #8]
 8005418:	f7fb f89a 	bl	8000550 <__aeabi_dmul>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	f7fa fede 	bl	80001e4 <__adddf3>
 8005428:	3701      	adds	r7, #1
 800542a:	4680      	mov	r8, r0
 800542c:	4689      	mov	r9, r1
 800542e:	9b07      	ldr	r3, [sp, #28]
 8005430:	429f      	cmp	r7, r3
 8005432:	dde9      	ble.n	8005408 <__kernel_rem_pio2+0x98>
 8005434:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005438:	3601      	adds	r6, #1
 800543a:	e7c9      	b.n	80053d0 <__kernel_rem_pio2+0x60>
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	aa0e      	add	r2, sp, #56	; 0x38
 8005440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005444:	930c      	str	r3, [sp, #48]	; 0x30
 8005446:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005448:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800544c:	9c04      	ldr	r4, [sp, #16]
 800544e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005450:	ab9a      	add	r3, sp, #616	; 0x268
 8005452:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005456:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800545a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800545e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005462:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005466:	ab9a      	add	r3, sp, #616	; 0x268
 8005468:	445b      	add	r3, fp
 800546a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800546e:	2500      	movs	r5, #0
 8005470:	1b63      	subs	r3, r4, r5
 8005472:	2b00      	cmp	r3, #0
 8005474:	dc78      	bgt.n	8005568 <__kernel_rem_pio2+0x1f8>
 8005476:	4650      	mov	r0, sl
 8005478:	ec49 8b10 	vmov	d0, r8, r9
 800547c:	f000 fe3c 	bl	80060f8 <scalbn>
 8005480:	ec57 6b10 	vmov	r6, r7, d0
 8005484:	2200      	movs	r2, #0
 8005486:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800548a:	ee10 0a10 	vmov	r0, s0
 800548e:	4639      	mov	r1, r7
 8005490:	f7fb f85e 	bl	8000550 <__aeabi_dmul>
 8005494:	ec41 0b10 	vmov	d0, r0, r1
 8005498:	f000 fd1a 	bl	8005ed0 <floor>
 800549c:	2200      	movs	r2, #0
 800549e:	ec51 0b10 	vmov	r0, r1, d0
 80054a2:	4b7e      	ldr	r3, [pc, #504]	; (800569c <__kernel_rem_pio2+0x32c>)
 80054a4:	f7fb f854 	bl	8000550 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fa fe96 	bl	80001e0 <__aeabi_dsub>
 80054b4:	460f      	mov	r7, r1
 80054b6:	4606      	mov	r6, r0
 80054b8:	f7fb fafa 	bl	8000ab0 <__aeabi_d2iz>
 80054bc:	9006      	str	r0, [sp, #24]
 80054be:	f7fa ffdd 	bl	800047c <__aeabi_i2d>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fa fe89 	bl	80001e0 <__aeabi_dsub>
 80054ce:	f1ba 0f00 	cmp.w	sl, #0
 80054d2:	4606      	mov	r6, r0
 80054d4:	460f      	mov	r7, r1
 80054d6:	dd6c      	ble.n	80055b2 <__kernel_rem_pio2+0x242>
 80054d8:	1e62      	subs	r2, r4, #1
 80054da:	ab0e      	add	r3, sp, #56	; 0x38
 80054dc:	f1ca 0118 	rsb	r1, sl, #24
 80054e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80054e4:	9d06      	ldr	r5, [sp, #24]
 80054e6:	fa40 f301 	asr.w	r3, r0, r1
 80054ea:	441d      	add	r5, r3
 80054ec:	408b      	lsls	r3, r1
 80054ee:	1ac0      	subs	r0, r0, r3
 80054f0:	ab0e      	add	r3, sp, #56	; 0x38
 80054f2:	9506      	str	r5, [sp, #24]
 80054f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80054f8:	f1ca 0317 	rsb	r3, sl, #23
 80054fc:	fa40 f303 	asr.w	r3, r0, r3
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dd62      	ble.n	80055ce <__kernel_rem_pio2+0x25e>
 8005508:	9b06      	ldr	r3, [sp, #24]
 800550a:	2200      	movs	r2, #0
 800550c:	3301      	adds	r3, #1
 800550e:	9306      	str	r3, [sp, #24]
 8005510:	4615      	mov	r5, r2
 8005512:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005516:	4294      	cmp	r4, r2
 8005518:	f300 8095 	bgt.w	8005646 <__kernel_rem_pio2+0x2d6>
 800551c:	f1ba 0f00 	cmp.w	sl, #0
 8005520:	dd07      	ble.n	8005532 <__kernel_rem_pio2+0x1c2>
 8005522:	f1ba 0f01 	cmp.w	sl, #1
 8005526:	f000 80a2 	beq.w	800566e <__kernel_rem_pio2+0x2fe>
 800552a:	f1ba 0f02 	cmp.w	sl, #2
 800552e:	f000 80c1 	beq.w	80056b4 <__kernel_rem_pio2+0x344>
 8005532:	9b02      	ldr	r3, [sp, #8]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d14a      	bne.n	80055ce <__kernel_rem_pio2+0x25e>
 8005538:	4632      	mov	r2, r6
 800553a:	463b      	mov	r3, r7
 800553c:	2000      	movs	r0, #0
 800553e:	4958      	ldr	r1, [pc, #352]	; (80056a0 <__kernel_rem_pio2+0x330>)
 8005540:	f7fa fe4e 	bl	80001e0 <__aeabi_dsub>
 8005544:	4606      	mov	r6, r0
 8005546:	460f      	mov	r7, r1
 8005548:	2d00      	cmp	r5, #0
 800554a:	d040      	beq.n	80055ce <__kernel_rem_pio2+0x25e>
 800554c:	4650      	mov	r0, sl
 800554e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005690 <__kernel_rem_pio2+0x320>
 8005552:	f000 fdd1 	bl	80060f8 <scalbn>
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	ec53 2b10 	vmov	r2, r3, d0
 800555e:	f7fa fe3f 	bl	80001e0 <__aeabi_dsub>
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	e032      	b.n	80055ce <__kernel_rem_pio2+0x25e>
 8005568:	2200      	movs	r2, #0
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <__kernel_rem_pio2+0x334>)
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa ffee 	bl	8000550 <__aeabi_dmul>
 8005574:	f7fb fa9c 	bl	8000ab0 <__aeabi_d2iz>
 8005578:	f7fa ff80 	bl	800047c <__aeabi_i2d>
 800557c:	2200      	movs	r2, #0
 800557e:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <__kernel_rem_pio2+0x338>)
 8005580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005584:	f7fa ffe4 	bl	8000550 <__aeabi_dmul>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	f7fa fe26 	bl	80001e0 <__aeabi_dsub>
 8005594:	f7fb fa8c 	bl	8000ab0 <__aeabi_d2iz>
 8005598:	ab0e      	add	r3, sp, #56	; 0x38
 800559a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800559e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80055a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a6:	f7fa fe1d 	bl	80001e4 <__adddf3>
 80055aa:	3501      	adds	r5, #1
 80055ac:	4680      	mov	r8, r0
 80055ae:	4689      	mov	r9, r1
 80055b0:	e75e      	b.n	8005470 <__kernel_rem_pio2+0x100>
 80055b2:	d105      	bne.n	80055c0 <__kernel_rem_pio2+0x250>
 80055b4:	1e63      	subs	r3, r4, #1
 80055b6:	aa0e      	add	r2, sp, #56	; 0x38
 80055b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055bc:	15c3      	asrs	r3, r0, #23
 80055be:	e79f      	b.n	8005500 <__kernel_rem_pio2+0x190>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b3a      	ldr	r3, [pc, #232]	; (80056ac <__kernel_rem_pio2+0x33c>)
 80055c4:	f7fb fa4a 	bl	8000a5c <__aeabi_dcmpge>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d139      	bne.n	8005640 <__kernel_rem_pio2+0x2d0>
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fb fa23 	bl	8000a20 <__aeabi_dcmpeq>
 80055da:	2800      	cmp	r0, #0
 80055dc:	f000 80c7 	beq.w	800576e <__kernel_rem_pio2+0x3fe>
 80055e0:	1e65      	subs	r5, r4, #1
 80055e2:	462b      	mov	r3, r5
 80055e4:	2200      	movs	r2, #0
 80055e6:	9904      	ldr	r1, [sp, #16]
 80055e8:	428b      	cmp	r3, r1
 80055ea:	da6a      	bge.n	80056c2 <__kernel_rem_pio2+0x352>
 80055ec:	2a00      	cmp	r2, #0
 80055ee:	f000 8088 	beq.w	8005702 <__kernel_rem_pio2+0x392>
 80055f2:	ab0e      	add	r3, sp, #56	; 0x38
 80055f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80055f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b4 	beq.w	800576a <__kernel_rem_pio2+0x3fa>
 8005602:	4650      	mov	r0, sl
 8005604:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005690 <__kernel_rem_pio2+0x320>
 8005608:	f000 fd76 	bl	80060f8 <scalbn>
 800560c:	00ec      	lsls	r4, r5, #3
 800560e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005610:	191e      	adds	r6, r3, r4
 8005612:	ec59 8b10 	vmov	r8, r9, d0
 8005616:	f106 0a08 	add.w	sl, r6, #8
 800561a:	462f      	mov	r7, r5
 800561c:	2f00      	cmp	r7, #0
 800561e:	f280 80df 	bge.w	80057e0 <__kernel_rem_pio2+0x470>
 8005622:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005688 <__kernel_rem_pio2+0x318>
 8005626:	f04f 0a00 	mov.w	sl, #0
 800562a:	eba5 030a 	sub.w	r3, r5, sl
 800562e:	2b00      	cmp	r3, #0
 8005630:	f2c0 810a 	blt.w	8005848 <__kernel_rem_pio2+0x4d8>
 8005634:	f8df b078 	ldr.w	fp, [pc, #120]	; 80056b0 <__kernel_rem_pio2+0x340>
 8005638:	ec59 8b18 	vmov	r8, r9, d8
 800563c:	2700      	movs	r7, #0
 800563e:	e0f5      	b.n	800582c <__kernel_rem_pio2+0x4bc>
 8005640:	2302      	movs	r3, #2
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	e760      	b.n	8005508 <__kernel_rem_pio2+0x198>
 8005646:	ab0e      	add	r3, sp, #56	; 0x38
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	b94d      	cbnz	r5, 8005662 <__kernel_rem_pio2+0x2f2>
 800564e:	b12b      	cbz	r3, 800565c <__kernel_rem_pio2+0x2ec>
 8005650:	a80e      	add	r0, sp, #56	; 0x38
 8005652:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005656:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800565a:	2301      	movs	r3, #1
 800565c:	3201      	adds	r2, #1
 800565e:	461d      	mov	r5, r3
 8005660:	e759      	b.n	8005516 <__kernel_rem_pio2+0x1a6>
 8005662:	a80e      	add	r0, sp, #56	; 0x38
 8005664:	1acb      	subs	r3, r1, r3
 8005666:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800566a:	462b      	mov	r3, r5
 800566c:	e7f6      	b.n	800565c <__kernel_rem_pio2+0x2ec>
 800566e:	1e62      	subs	r2, r4, #1
 8005670:	ab0e      	add	r3, sp, #56	; 0x38
 8005672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005676:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800567a:	a90e      	add	r1, sp, #56	; 0x38
 800567c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005680:	e757      	b.n	8005532 <__kernel_rem_pio2+0x1c2>
 8005682:	bf00      	nop
 8005684:	f3af 8000 	nop.w
	...
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	08006438 	.word	0x08006438
 800569c:	40200000 	.word	0x40200000
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	3e700000 	.word	0x3e700000
 80056a8:	41700000 	.word	0x41700000
 80056ac:	3fe00000 	.word	0x3fe00000
 80056b0:	080063f8 	.word	0x080063f8
 80056b4:	1e62      	subs	r2, r4, #1
 80056b6:	ab0e      	add	r3, sp, #56	; 0x38
 80056b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80056c0:	e7db      	b.n	800567a <__kernel_rem_pio2+0x30a>
 80056c2:	a90e      	add	r1, sp, #56	; 0x38
 80056c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	e78b      	b.n	80055e6 <__kernel_rem_pio2+0x276>
 80056ce:	3301      	adds	r3, #1
 80056d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d0fa      	beq.n	80056ce <__kernel_rem_pio2+0x35e>
 80056d8:	9a08      	ldr	r2, [sp, #32]
 80056da:	4422      	add	r2, r4
 80056dc:	00d2      	lsls	r2, r2, #3
 80056de:	a922      	add	r1, sp, #136	; 0x88
 80056e0:	18e3      	adds	r3, r4, r3
 80056e2:	9206      	str	r2, [sp, #24]
 80056e4:	440a      	add	r2, r1
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	f10b 0108 	add.w	r1, fp, #8
 80056ec:	f102 0308 	add.w	r3, r2, #8
 80056f0:	1c66      	adds	r6, r4, #1
 80056f2:	910a      	str	r1, [sp, #40]	; 0x28
 80056f4:	2500      	movs	r5, #0
 80056f6:	930d      	str	r3, [sp, #52]	; 0x34
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	42b3      	cmp	r3, r6
 80056fc:	da04      	bge.n	8005708 <__kernel_rem_pio2+0x398>
 80056fe:	461c      	mov	r4, r3
 8005700:	e6a6      	b.n	8005450 <__kernel_rem_pio2+0xe0>
 8005702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005704:	2301      	movs	r3, #1
 8005706:	e7e3      	b.n	80056d0 <__kernel_rem_pio2+0x360>
 8005708:	9b06      	ldr	r3, [sp, #24]
 800570a:	18ef      	adds	r7, r5, r3
 800570c:	ab22      	add	r3, sp, #136	; 0x88
 800570e:	441f      	add	r7, r3
 8005710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005712:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005716:	f7fa feb1 	bl	800047c <__aeabi_i2d>
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	461c      	mov	r4, r3
 800571e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005720:	e9c7 0100 	strd	r0, r1, [r7]
 8005724:	eb03 0b05 	add.w	fp, r3, r5
 8005728:	2700      	movs	r7, #0
 800572a:	f04f 0800 	mov.w	r8, #0
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	9b07      	ldr	r3, [sp, #28]
 8005734:	429f      	cmp	r7, r3
 8005736:	dd08      	ble.n	800574a <__kernel_rem_pio2+0x3da>
 8005738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800573a:	aa72      	add	r2, sp, #456	; 0x1c8
 800573c:	18eb      	adds	r3, r5, r3
 800573e:	4413      	add	r3, r2
 8005740:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005744:	3601      	adds	r6, #1
 8005746:	3508      	adds	r5, #8
 8005748:	e7d6      	b.n	80056f8 <__kernel_rem_pio2+0x388>
 800574a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800574e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005752:	f7fa fefd 	bl	8000550 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa fd41 	bl	80001e4 <__adddf3>
 8005762:	3701      	adds	r7, #1
 8005764:	4680      	mov	r8, r0
 8005766:	4689      	mov	r9, r1
 8005768:	e7e3      	b.n	8005732 <__kernel_rem_pio2+0x3c2>
 800576a:	3d01      	subs	r5, #1
 800576c:	e741      	b.n	80055f2 <__kernel_rem_pio2+0x282>
 800576e:	f1ca 0000 	rsb	r0, sl, #0
 8005772:	ec47 6b10 	vmov	d0, r6, r7
 8005776:	f000 fcbf 	bl	80060f8 <scalbn>
 800577a:	ec57 6b10 	vmov	r6, r7, d0
 800577e:	2200      	movs	r2, #0
 8005780:	4b99      	ldr	r3, [pc, #612]	; (80059e8 <__kernel_rem_pio2+0x678>)
 8005782:	ee10 0a10 	vmov	r0, s0
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f968 	bl	8000a5c <__aeabi_dcmpge>
 800578c:	b1f8      	cbz	r0, 80057ce <__kernel_rem_pio2+0x45e>
 800578e:	2200      	movs	r2, #0
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <__kernel_rem_pio2+0x67c>)
 8005792:	4630      	mov	r0, r6
 8005794:	4639      	mov	r1, r7
 8005796:	f7fa fedb 	bl	8000550 <__aeabi_dmul>
 800579a:	f7fb f989 	bl	8000ab0 <__aeabi_d2iz>
 800579e:	4680      	mov	r8, r0
 80057a0:	f7fa fe6c 	bl	800047c <__aeabi_i2d>
 80057a4:	2200      	movs	r2, #0
 80057a6:	4b90      	ldr	r3, [pc, #576]	; (80059e8 <__kernel_rem_pio2+0x678>)
 80057a8:	f7fa fed2 	bl	8000550 <__aeabi_dmul>
 80057ac:	460b      	mov	r3, r1
 80057ae:	4602      	mov	r2, r0
 80057b0:	4639      	mov	r1, r7
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fa fd14 	bl	80001e0 <__aeabi_dsub>
 80057b8:	f7fb f97a 	bl	8000ab0 <__aeabi_d2iz>
 80057bc:	1c65      	adds	r5, r4, #1
 80057be:	ab0e      	add	r3, sp, #56	; 0x38
 80057c0:	f10a 0a18 	add.w	sl, sl, #24
 80057c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80057c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80057cc:	e719      	b.n	8005602 <__kernel_rem_pio2+0x292>
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f96d 	bl	8000ab0 <__aeabi_d2iz>
 80057d6:	ab0e      	add	r3, sp, #56	; 0x38
 80057d8:	4625      	mov	r5, r4
 80057da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80057de:	e710      	b.n	8005602 <__kernel_rem_pio2+0x292>
 80057e0:	ab0e      	add	r3, sp, #56	; 0x38
 80057e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80057e6:	f7fa fe49 	bl	800047c <__aeabi_i2d>
 80057ea:	4642      	mov	r2, r8
 80057ec:	464b      	mov	r3, r9
 80057ee:	f7fa feaf 	bl	8000550 <__aeabi_dmul>
 80057f2:	2200      	movs	r2, #0
 80057f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80057f8:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <__kernel_rem_pio2+0x67c>)
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fa fea7 	bl	8000550 <__aeabi_dmul>
 8005802:	3f01      	subs	r7, #1
 8005804:	4680      	mov	r8, r0
 8005806:	4689      	mov	r9, r1
 8005808:	e708      	b.n	800561c <__kernel_rem_pio2+0x2ac>
 800580a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005816:	f7fa fe9b 	bl	8000550 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fcdf 	bl	80001e4 <__adddf3>
 8005826:	3701      	adds	r7, #1
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	429f      	cmp	r7, r3
 8005830:	dc01      	bgt.n	8005836 <__kernel_rem_pio2+0x4c6>
 8005832:	45ba      	cmp	sl, r7
 8005834:	dae9      	bge.n	800580a <__kernel_rem_pio2+0x49a>
 8005836:	ab4a      	add	r3, sp, #296	; 0x128
 8005838:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800583c:	e9c3 8900 	strd	r8, r9, [r3]
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	3e08      	subs	r6, #8
 8005846:	e6f0      	b.n	800562a <__kernel_rem_pio2+0x2ba>
 8005848:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800584a:	2b03      	cmp	r3, #3
 800584c:	d85b      	bhi.n	8005906 <__kernel_rem_pio2+0x596>
 800584e:	e8df f003 	tbb	[pc, r3]
 8005852:	264a      	.short	0x264a
 8005854:	0226      	.short	0x0226
 8005856:	ab9a      	add	r3, sp, #616	; 0x268
 8005858:	441c      	add	r4, r3
 800585a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800585e:	46a2      	mov	sl, r4
 8005860:	46ab      	mov	fp, r5
 8005862:	f1bb 0f00 	cmp.w	fp, #0
 8005866:	dc6c      	bgt.n	8005942 <__kernel_rem_pio2+0x5d2>
 8005868:	46a2      	mov	sl, r4
 800586a:	46ab      	mov	fp, r5
 800586c:	f1bb 0f01 	cmp.w	fp, #1
 8005870:	f300 8086 	bgt.w	8005980 <__kernel_rem_pio2+0x610>
 8005874:	2000      	movs	r0, #0
 8005876:	2100      	movs	r1, #0
 8005878:	2d01      	cmp	r5, #1
 800587a:	f300 80a0 	bgt.w	80059be <__kernel_rem_pio2+0x64e>
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005884:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 809e 	bne.w	80059ca <__kernel_rem_pio2+0x65a>
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	e9c3 7800 	strd	r7, r8, [r3]
 8005894:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005898:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800589c:	e033      	b.n	8005906 <__kernel_rem_pio2+0x596>
 800589e:	3408      	adds	r4, #8
 80058a0:	ab4a      	add	r3, sp, #296	; 0x128
 80058a2:	441c      	add	r4, r3
 80058a4:	462e      	mov	r6, r5
 80058a6:	2000      	movs	r0, #0
 80058a8:	2100      	movs	r1, #0
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	da3a      	bge.n	8005924 <__kernel_rem_pio2+0x5b4>
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03d      	beq.n	8005930 <__kernel_rem_pio2+0x5c0>
 80058b4:	4602      	mov	r2, r0
 80058b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ba:	9c01      	ldr	r4, [sp, #4]
 80058bc:	e9c4 2300 	strd	r2, r3, [r4]
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80058c8:	f7fa fc8a 	bl	80001e0 <__aeabi_dsub>
 80058cc:	ae4c      	add	r6, sp, #304	; 0x130
 80058ce:	2401      	movs	r4, #1
 80058d0:	42a5      	cmp	r5, r4
 80058d2:	da30      	bge.n	8005936 <__kernel_rem_pio2+0x5c6>
 80058d4:	9b02      	ldr	r3, [sp, #8]
 80058d6:	b113      	cbz	r3, 80058de <__kernel_rem_pio2+0x56e>
 80058d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058dc:	4619      	mov	r1, r3
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80058e4:	e00f      	b.n	8005906 <__kernel_rem_pio2+0x596>
 80058e6:	ab9a      	add	r3, sp, #616	; 0x268
 80058e8:	441c      	add	r4, r3
 80058ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80058ee:	2000      	movs	r0, #0
 80058f0:	2100      	movs	r1, #0
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	da10      	bge.n	8005918 <__kernel_rem_pio2+0x5a8>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	b113      	cbz	r3, 8005900 <__kernel_rem_pio2+0x590>
 80058fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058fe:	4619      	mov	r1, r3
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	e9c3 0100 	strd	r0, r1, [r3]
 8005906:	9b06      	ldr	r3, [sp, #24]
 8005908:	f003 0007 	and.w	r0, r3, #7
 800590c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005910:	ecbd 8b02 	vpop	{d8}
 8005914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005918:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800591c:	f7fa fc62 	bl	80001e4 <__adddf3>
 8005920:	3d01      	subs	r5, #1
 8005922:	e7e6      	b.n	80058f2 <__kernel_rem_pio2+0x582>
 8005924:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005928:	f7fa fc5c 	bl	80001e4 <__adddf3>
 800592c:	3e01      	subs	r6, #1
 800592e:	e7bc      	b.n	80058aa <__kernel_rem_pio2+0x53a>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e7c1      	b.n	80058ba <__kernel_rem_pio2+0x54a>
 8005936:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800593a:	f7fa fc53 	bl	80001e4 <__adddf3>
 800593e:	3401      	adds	r4, #1
 8005940:	e7c6      	b.n	80058d0 <__kernel_rem_pio2+0x560>
 8005942:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005946:	ed3a 7b02 	vldmdb	sl!, {d7}
 800594a:	4640      	mov	r0, r8
 800594c:	ec53 2b17 	vmov	r2, r3, d7
 8005950:	4649      	mov	r1, r9
 8005952:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005956:	f7fa fc45 	bl	80001e4 <__adddf3>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4606      	mov	r6, r0
 8005960:	460f      	mov	r7, r1
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fa fc3b 	bl	80001e0 <__aeabi_dsub>
 800596a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596e:	f7fa fc39 	bl	80001e4 <__adddf3>
 8005972:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005976:	e9ca 0100 	strd	r0, r1, [sl]
 800597a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800597e:	e770      	b.n	8005862 <__kernel_rem_pio2+0x4f2>
 8005980:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005984:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005988:	4630      	mov	r0, r6
 800598a:	ec53 2b17 	vmov	r2, r3, d7
 800598e:	4639      	mov	r1, r7
 8005990:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005994:	f7fa fc26 	bl	80001e4 <__adddf3>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4680      	mov	r8, r0
 800599e:	4689      	mov	r9, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fc1c 	bl	80001e0 <__aeabi_dsub>
 80059a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ac:	f7fa fc1a 	bl	80001e4 <__adddf3>
 80059b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059b4:	e9ca 0100 	strd	r0, r1, [sl]
 80059b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80059bc:	e756      	b.n	800586c <__kernel_rem_pio2+0x4fc>
 80059be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059c2:	f7fa fc0f 	bl	80001e4 <__adddf3>
 80059c6:	3d01      	subs	r5, #1
 80059c8:	e756      	b.n	8005878 <__kernel_rem_pio2+0x508>
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	9a01      	ldr	r2, [sp, #4]
 80059ce:	601f      	str	r7, [r3, #0]
 80059d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80059d4:	605c      	str	r4, [r3, #4]
 80059d6:	609d      	str	r5, [r3, #8]
 80059d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059dc:	60d3      	str	r3, [r2, #12]
 80059de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e2:	6110      	str	r0, [r2, #16]
 80059e4:	6153      	str	r3, [r2, #20]
 80059e6:	e78e      	b.n	8005906 <__kernel_rem_pio2+0x596>
 80059e8:	41700000 	.word	0x41700000
 80059ec:	3e700000 	.word	0x3e700000

080059f0 <__kernel_sin>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	ec55 4b10 	vmov	r4, r5, d0
 80059f8:	b085      	sub	sp, #20
 80059fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80059fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005a02:	ed8d 1b00 	vstr	d1, [sp]
 8005a06:	9002      	str	r0, [sp, #8]
 8005a08:	da06      	bge.n	8005a18 <__kernel_sin+0x28>
 8005a0a:	ee10 0a10 	vmov	r0, s0
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fb f84e 	bl	8000ab0 <__aeabi_d2iz>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d051      	beq.n	8005abc <__kernel_sin+0xcc>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f7fa fd96 	bl	8000550 <__aeabi_dmul>
 8005a24:	4682      	mov	sl, r0
 8005a26:	468b      	mov	fp, r1
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fd8e 	bl	8000550 <__aeabi_dmul>
 8005a34:	a341      	add	r3, pc, #260	; (adr r3, 8005b3c <__kernel_sin+0x14c>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	4650      	mov	r0, sl
 8005a40:	4659      	mov	r1, fp
 8005a42:	f7fa fd85 	bl	8000550 <__aeabi_dmul>
 8005a46:	a33f      	add	r3, pc, #252	; (adr r3, 8005b44 <__kernel_sin+0x154>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f7fa fbc8 	bl	80001e0 <__aeabi_dsub>
 8005a50:	4652      	mov	r2, sl
 8005a52:	465b      	mov	r3, fp
 8005a54:	f7fa fd7c 	bl	8000550 <__aeabi_dmul>
 8005a58:	a33c      	add	r3, pc, #240	; (adr r3, 8005b4c <__kernel_sin+0x15c>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fbc1 	bl	80001e4 <__adddf3>
 8005a62:	4652      	mov	r2, sl
 8005a64:	465b      	mov	r3, fp
 8005a66:	f7fa fd73 	bl	8000550 <__aeabi_dmul>
 8005a6a:	a33a      	add	r3, pc, #232	; (adr r3, 8005b54 <__kernel_sin+0x164>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fbb6 	bl	80001e0 <__aeabi_dsub>
 8005a74:	4652      	mov	r2, sl
 8005a76:	465b      	mov	r3, fp
 8005a78:	f7fa fd6a 	bl	8000550 <__aeabi_dmul>
 8005a7c:	a337      	add	r3, pc, #220	; (adr r3, 8005b5c <__kernel_sin+0x16c>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fbaf 	bl	80001e4 <__adddf3>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	4606      	mov	r6, r0
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	b9db      	cbnz	r3, 8005ac6 <__kernel_sin+0xd6>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4650      	mov	r0, sl
 8005a94:	4659      	mov	r1, fp
 8005a96:	f7fa fd5b 	bl	8000550 <__aeabi_dmul>
 8005a9a:	a325      	add	r3, pc, #148	; (adr r3, 8005b30 <__kernel_sin+0x140>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fb9e 	bl	80001e0 <__aeabi_dsub>
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	f7fa fd52 	bl	8000550 <__aeabi_dmul>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	f7fa fb96 	bl	80001e4 <__adddf3>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	460d      	mov	r5, r1
 8005abc:	ec45 4b10 	vmov	d0, r4, r5
 8005ac0:	b005      	add	sp, #20
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <__kernel_sin+0x148>)
 8005aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ace:	f7fa fd3f 	bl	8000550 <__aeabi_dmul>
 8005ad2:	4632      	mov	r2, r6
 8005ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad8:	463b      	mov	r3, r7
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fd37 	bl	8000550 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aea:	f7fa fb79 	bl	80001e0 <__aeabi_dsub>
 8005aee:	4652      	mov	r2, sl
 8005af0:	465b      	mov	r3, fp
 8005af2:	f7fa fd2d 	bl	8000550 <__aeabi_dmul>
 8005af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afa:	f7fa fb71 	bl	80001e0 <__aeabi_dsub>
 8005afe:	a30c      	add	r3, pc, #48	; (adr r3, 8005b30 <__kernel_sin+0x140>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fa fd20 	bl	8000550 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa fb64 	bl	80001e4 <__adddf3>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4620      	mov	r0, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa fb5c 	bl	80001e0 <__aeabi_dsub>
 8005b28:	e7c6      	b.n	8005ab8 <__kernel_sin+0xc8>
 8005b2a:	bf00      	nop
 8005b2c:	f3af 8000 	nop.w
 8005b30:	55555549 	.word	0x55555549
 8005b34:	3fc55555 	.word	0x3fc55555
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	5acfd57c 	.word	0x5acfd57c
 8005b40:	3de5d93a 	.word	0x3de5d93a
 8005b44:	8a2b9ceb 	.word	0x8a2b9ceb
 8005b48:	3e5ae5e6 	.word	0x3e5ae5e6
 8005b4c:	57b1fe7d 	.word	0x57b1fe7d
 8005b50:	3ec71de3 	.word	0x3ec71de3
 8005b54:	19c161d5 	.word	0x19c161d5
 8005b58:	3f2a01a0 	.word	0x3f2a01a0
 8005b5c:	1110f8a6 	.word	0x1110f8a6
 8005b60:	3f811111 	.word	0x3f811111
 8005b64:	00000000 	.word	0x00000000

08005b68 <atan>:
 8005b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	ec55 4b10 	vmov	r4, r5, d0
 8005b70:	4bc3      	ldr	r3, [pc, #780]	; (8005e80 <atan+0x318>)
 8005b72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b76:	429e      	cmp	r6, r3
 8005b78:	46ab      	mov	fp, r5
 8005b7a:	dd18      	ble.n	8005bae <atan+0x46>
 8005b7c:	4bc1      	ldr	r3, [pc, #772]	; (8005e84 <atan+0x31c>)
 8005b7e:	429e      	cmp	r6, r3
 8005b80:	dc01      	bgt.n	8005b86 <atan+0x1e>
 8005b82:	d109      	bne.n	8005b98 <atan+0x30>
 8005b84:	b144      	cbz	r4, 8005b98 <atan+0x30>
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	f7fa fb29 	bl	80001e4 <__adddf3>
 8005b92:	4604      	mov	r4, r0
 8005b94:	460d      	mov	r5, r1
 8005b96:	e006      	b.n	8005ba6 <atan+0x3e>
 8005b98:	f1bb 0f00 	cmp.w	fp, #0
 8005b9c:	f340 8131 	ble.w	8005e02 <atan+0x29a>
 8005ba0:	a59b      	add	r5, pc, #620	; (adr r5, 8005e10 <atan+0x2a8>)
 8005ba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ba6:	ec45 4b10 	vmov	d0, r4, r5
 8005baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bae:	4bb6      	ldr	r3, [pc, #728]	; (8005e88 <atan+0x320>)
 8005bb0:	429e      	cmp	r6, r3
 8005bb2:	dc14      	bgt.n	8005bde <atan+0x76>
 8005bb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005bb8:	429e      	cmp	r6, r3
 8005bba:	dc0d      	bgt.n	8005bd8 <atan+0x70>
 8005bbc:	a396      	add	r3, pc, #600	; (adr r3, 8005e18 <atan+0x2b0>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	ee10 0a10 	vmov	r0, s0
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7fa fb0c 	bl	80001e4 <__adddf3>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4baf      	ldr	r3, [pc, #700]	; (8005e8c <atan+0x324>)
 8005bd0:	f7fa ff4e 	bl	8000a70 <__aeabi_dcmpgt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1e6      	bne.n	8005ba6 <atan+0x3e>
 8005bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8005bdc:	e02b      	b.n	8005c36 <atan+0xce>
 8005bde:	f000 f963 	bl	8005ea8 <fabs>
 8005be2:	4bab      	ldr	r3, [pc, #684]	; (8005e90 <atan+0x328>)
 8005be4:	429e      	cmp	r6, r3
 8005be6:	ec55 4b10 	vmov	r4, r5, d0
 8005bea:	f300 80bf 	bgt.w	8005d6c <atan+0x204>
 8005bee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005bf2:	429e      	cmp	r6, r3
 8005bf4:	f300 80a0 	bgt.w	8005d38 <atan+0x1d0>
 8005bf8:	ee10 2a10 	vmov	r2, s0
 8005bfc:	ee10 0a10 	vmov	r0, s0
 8005c00:	462b      	mov	r3, r5
 8005c02:	4629      	mov	r1, r5
 8005c04:	f7fa faee 	bl	80001e4 <__adddf3>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4ba0      	ldr	r3, [pc, #640]	; (8005e8c <atan+0x324>)
 8005c0c:	f7fa fae8 	bl	80001e0 <__aeabi_dsub>
 8005c10:	2200      	movs	r2, #0
 8005c12:	4606      	mov	r6, r0
 8005c14:	460f      	mov	r7, r1
 8005c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa fae1 	bl	80001e4 <__adddf3>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4630      	mov	r0, r6
 8005c28:	4639      	mov	r1, r7
 8005c2a:	f7fa fdbb 	bl	80007a4 <__aeabi_ddiv>
 8005c2e:	f04f 0a00 	mov.w	sl, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	460d      	mov	r5, r1
 8005c36:	4622      	mov	r2, r4
 8005c38:	462b      	mov	r3, r5
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa fc87 	bl	8000550 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4680      	mov	r8, r0
 8005c48:	4689      	mov	r9, r1
 8005c4a:	f7fa fc81 	bl	8000550 <__aeabi_dmul>
 8005c4e:	a374      	add	r3, pc, #464	; (adr r3, 8005e20 <atan+0x2b8>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	f7fa fc7a 	bl	8000550 <__aeabi_dmul>
 8005c5c:	a372      	add	r3, pc, #456	; (adr r3, 8005e28 <atan+0x2c0>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fabf 	bl	80001e4 <__adddf3>
 8005c66:	4632      	mov	r2, r6
 8005c68:	463b      	mov	r3, r7
 8005c6a:	f7fa fc71 	bl	8000550 <__aeabi_dmul>
 8005c6e:	a370      	add	r3, pc, #448	; (adr r3, 8005e30 <atan+0x2c8>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fab6 	bl	80001e4 <__adddf3>
 8005c78:	4632      	mov	r2, r6
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	f7fa fc68 	bl	8000550 <__aeabi_dmul>
 8005c80:	a36d      	add	r3, pc, #436	; (adr r3, 8005e38 <atan+0x2d0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa faad 	bl	80001e4 <__adddf3>
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	f7fa fc5f 	bl	8000550 <__aeabi_dmul>
 8005c92:	a36b      	add	r3, pc, #428	; (adr r3, 8005e40 <atan+0x2d8>)
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f7fa faa4 	bl	80001e4 <__adddf3>
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	f7fa fc56 	bl	8000550 <__aeabi_dmul>
 8005ca4:	a368      	add	r3, pc, #416	; (adr r3, 8005e48 <atan+0x2e0>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fa9b 	bl	80001e4 <__adddf3>
 8005cae:	4642      	mov	r2, r8
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	f7fa fc4d 	bl	8000550 <__aeabi_dmul>
 8005cb6:	a366      	add	r3, pc, #408	; (adr r3, 8005e50 <atan+0x2e8>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fc44 	bl	8000550 <__aeabi_dmul>
 8005cc8:	a363      	add	r3, pc, #396	; (adr r3, 8005e58 <atan+0x2f0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fa87 	bl	80001e0 <__aeabi_dsub>
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	f7fa fc3b 	bl	8000550 <__aeabi_dmul>
 8005cda:	a361      	add	r3, pc, #388	; (adr r3, 8005e60 <atan+0x2f8>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fa7e 	bl	80001e0 <__aeabi_dsub>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f7fa fc32 	bl	8000550 <__aeabi_dmul>
 8005cec:	a35e      	add	r3, pc, #376	; (adr r3, 8005e68 <atan+0x300>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa fa75 	bl	80001e0 <__aeabi_dsub>
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	f7fa fc29 	bl	8000550 <__aeabi_dmul>
 8005cfe:	a35c      	add	r3, pc, #368	; (adr r3, 8005e70 <atan+0x308>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fa6c 	bl	80001e0 <__aeabi_dsub>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	f7fa fc20 	bl	8000550 <__aeabi_dmul>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa fa64 	bl	80001e4 <__adddf3>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	462b      	mov	r3, r5
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	d14b      	bne.n	8005dc6 <atan+0x25e>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fa55 	bl	80001e0 <__aeabi_dsub>
 8005d36:	e72c      	b.n	8005b92 <atan+0x2a>
 8005d38:	ee10 0a10 	vmov	r0, s0
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <atan+0x324>)
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fa4d 	bl	80001e0 <__aeabi_dsub>
 8005d46:	2200      	movs	r2, #0
 8005d48:	4606      	mov	r6, r0
 8005d4a:	460f      	mov	r7, r1
 8005d4c:	4b4f      	ldr	r3, [pc, #316]	; (8005e8c <atan+0x324>)
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fa47 	bl	80001e4 <__adddf3>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	f7fa fd21 	bl	80007a4 <__aeabi_ddiv>
 8005d62:	f04f 0a01 	mov.w	sl, #1
 8005d66:	4604      	mov	r4, r0
 8005d68:	460d      	mov	r5, r1
 8005d6a:	e764      	b.n	8005c36 <atan+0xce>
 8005d6c:	4b49      	ldr	r3, [pc, #292]	; (8005e94 <atan+0x32c>)
 8005d6e:	429e      	cmp	r6, r3
 8005d70:	dc1d      	bgt.n	8005dae <atan+0x246>
 8005d72:	ee10 0a10 	vmov	r0, s0
 8005d76:	2200      	movs	r2, #0
 8005d78:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <atan+0x330>)
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	f7fa fa30 	bl	80001e0 <__aeabi_dsub>
 8005d80:	2200      	movs	r2, #0
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <atan+0x330>)
 8005d88:	4620      	mov	r0, r4
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	f7fa fbe0 	bl	8000550 <__aeabi_dmul>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <atan+0x324>)
 8005d94:	f7fa fa26 	bl	80001e4 <__adddf3>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7fa fd00 	bl	80007a4 <__aeabi_ddiv>
 8005da4:	f04f 0a02 	mov.w	sl, #2
 8005da8:	4604      	mov	r4, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	e743      	b.n	8005c36 <atan+0xce>
 8005dae:	462b      	mov	r3, r5
 8005db0:	ee10 2a10 	vmov	r2, s0
 8005db4:	2000      	movs	r0, #0
 8005db6:	4939      	ldr	r1, [pc, #228]	; (8005e9c <atan+0x334>)
 8005db8:	f7fa fcf4 	bl	80007a4 <__aeabi_ddiv>
 8005dbc:	f04f 0a03 	mov.w	sl, #3
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	e737      	b.n	8005c36 <atan+0xce>
 8005dc6:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <atan+0x338>)
 8005dc8:	4e36      	ldr	r6, [pc, #216]	; (8005ea4 <atan+0x33c>)
 8005dca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005dce:	4456      	add	r6, sl
 8005dd0:	449a      	add	sl, r3
 8005dd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8005dd6:	f7fa fa03 	bl	80001e0 <__aeabi_dsub>
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	f7fa f9ff 	bl	80001e0 <__aeabi_dsub>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005dea:	f7fa f9f9 	bl	80001e0 <__aeabi_dsub>
 8005dee:	f1bb 0f00 	cmp.w	fp, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	460d      	mov	r5, r1
 8005df6:	f6bf aed6 	bge.w	8005ba6 <atan+0x3e>
 8005dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dfe:	461d      	mov	r5, r3
 8005e00:	e6d1      	b.n	8005ba6 <atan+0x3e>
 8005e02:	a51d      	add	r5, pc, #116	; (adr r5, 8005e78 <atan+0x310>)
 8005e04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e08:	e6cd      	b.n	8005ba6 <atan+0x3e>
 8005e0a:	bf00      	nop
 8005e0c:	f3af 8000 	nop.w
 8005e10:	54442d18 	.word	0x54442d18
 8005e14:	3ff921fb 	.word	0x3ff921fb
 8005e18:	8800759c 	.word	0x8800759c
 8005e1c:	7e37e43c 	.word	0x7e37e43c
 8005e20:	e322da11 	.word	0xe322da11
 8005e24:	3f90ad3a 	.word	0x3f90ad3a
 8005e28:	24760deb 	.word	0x24760deb
 8005e2c:	3fa97b4b 	.word	0x3fa97b4b
 8005e30:	a0d03d51 	.word	0xa0d03d51
 8005e34:	3fb10d66 	.word	0x3fb10d66
 8005e38:	c54c206e 	.word	0xc54c206e
 8005e3c:	3fb745cd 	.word	0x3fb745cd
 8005e40:	920083ff 	.word	0x920083ff
 8005e44:	3fc24924 	.word	0x3fc24924
 8005e48:	5555550d 	.word	0x5555550d
 8005e4c:	3fd55555 	.word	0x3fd55555
 8005e50:	2c6a6c2f 	.word	0x2c6a6c2f
 8005e54:	bfa2b444 	.word	0xbfa2b444
 8005e58:	52defd9a 	.word	0x52defd9a
 8005e5c:	3fadde2d 	.word	0x3fadde2d
 8005e60:	af749a6d 	.word	0xaf749a6d
 8005e64:	3fb3b0f2 	.word	0x3fb3b0f2
 8005e68:	fe231671 	.word	0xfe231671
 8005e6c:	3fbc71c6 	.word	0x3fbc71c6
 8005e70:	9998ebc4 	.word	0x9998ebc4
 8005e74:	3fc99999 	.word	0x3fc99999
 8005e78:	54442d18 	.word	0x54442d18
 8005e7c:	bff921fb 	.word	0xbff921fb
 8005e80:	440fffff 	.word	0x440fffff
 8005e84:	7ff00000 	.word	0x7ff00000
 8005e88:	3fdbffff 	.word	0x3fdbffff
 8005e8c:	3ff00000 	.word	0x3ff00000
 8005e90:	3ff2ffff 	.word	0x3ff2ffff
 8005e94:	40037fff 	.word	0x40037fff
 8005e98:	3ff80000 	.word	0x3ff80000
 8005e9c:	bff00000 	.word	0xbff00000
 8005ea0:	08006468 	.word	0x08006468
 8005ea4:	08006448 	.word	0x08006448

08005ea8 <fabs>:
 8005ea8:	ec51 0b10 	vmov	r0, r1, d0
 8005eac:	ee10 2a10 	vmov	r2, s0
 8005eb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005eb4:	ec43 2b10 	vmov	d0, r2, r3
 8005eb8:	4770      	bx	lr

08005eba <finite>:
 8005eba:	ee10 3a90 	vmov	r3, s1
 8005ebe:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005ec2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005ec6:	0fc0      	lsrs	r0, r0, #31
 8005ec8:	4770      	bx	lr
 8005eca:	0000      	movs	r0, r0
 8005ecc:	0000      	movs	r0, r0
	...

08005ed0 <floor>:
 8005ed0:	ec51 0b10 	vmov	r0, r1, d0
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005edc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ee0:	2e13      	cmp	r6, #19
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	ee10 5a10 	vmov	r5, s0
 8005ee8:	4680      	mov	r8, r0
 8005eea:	dc34      	bgt.n	8005f56 <floor+0x86>
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	da16      	bge.n	8005f1e <floor+0x4e>
 8005ef0:	a335      	add	r3, pc, #212	; (adr r3, 8005fc8 <floor+0xf8>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa f975 	bl	80001e4 <__adddf3>
 8005efa:	2200      	movs	r2, #0
 8005efc:	2300      	movs	r3, #0
 8005efe:	f7fa fdb7 	bl	8000a70 <__aeabi_dcmpgt>
 8005f02:	b148      	cbz	r0, 8005f18 <floor+0x48>
 8005f04:	2c00      	cmp	r4, #0
 8005f06:	da59      	bge.n	8005fbc <floor+0xec>
 8005f08:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f0c:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <floor+0x100>)
 8005f0e:	432b      	orrs	r3, r5
 8005f10:	2500      	movs	r5, #0
 8005f12:	42ab      	cmp	r3, r5
 8005f14:	bf18      	it	ne
 8005f16:	4614      	movne	r4, r2
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e025      	b.n	8005f6a <floor+0x9a>
 8005f1e:	4f2d      	ldr	r7, [pc, #180]	; (8005fd4 <floor+0x104>)
 8005f20:	4137      	asrs	r7, r6
 8005f22:	ea01 0307 	and.w	r3, r1, r7
 8005f26:	4303      	orrs	r3, r0
 8005f28:	d01f      	beq.n	8005f6a <floor+0x9a>
 8005f2a:	a327      	add	r3, pc, #156	; (adr r3, 8005fc8 <floor+0xf8>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa f958 	bl	80001e4 <__adddf3>
 8005f34:	2200      	movs	r2, #0
 8005f36:	2300      	movs	r3, #0
 8005f38:	f7fa fd9a 	bl	8000a70 <__aeabi_dcmpgt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0eb      	beq.n	8005f18 <floor+0x48>
 8005f40:	2c00      	cmp	r4, #0
 8005f42:	bfbe      	ittt	lt
 8005f44:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005f48:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f4c:	19a4      	addlt	r4, r4, r6
 8005f4e:	ea24 0407 	bic.w	r4, r4, r7
 8005f52:	2500      	movs	r5, #0
 8005f54:	e7e0      	b.n	8005f18 <floor+0x48>
 8005f56:	2e33      	cmp	r6, #51	; 0x33
 8005f58:	dd0b      	ble.n	8005f72 <floor+0xa2>
 8005f5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f5e:	d104      	bne.n	8005f6a <floor+0x9a>
 8005f60:	ee10 2a10 	vmov	r2, s0
 8005f64:	460b      	mov	r3, r1
 8005f66:	f7fa f93d 	bl	80001e4 <__adddf3>
 8005f6a:	ec41 0b10 	vmov	d0, r0, r1
 8005f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f72:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	fa23 f707 	lsr.w	r7, r3, r7
 8005f7e:	4207      	tst	r7, r0
 8005f80:	d0f3      	beq.n	8005f6a <floor+0x9a>
 8005f82:	a311      	add	r3, pc, #68	; (adr r3, 8005fc8 <floor+0xf8>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f92c 	bl	80001e4 <__adddf3>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f7fa fd6e 	bl	8000a70 <__aeabi_dcmpgt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d0bf      	beq.n	8005f18 <floor+0x48>
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	da02      	bge.n	8005fa2 <floor+0xd2>
 8005f9c:	2e14      	cmp	r6, #20
 8005f9e:	d103      	bne.n	8005fa8 <floor+0xd8>
 8005fa0:	3401      	adds	r4, #1
 8005fa2:	ea25 0507 	bic.w	r5, r5, r7
 8005fa6:	e7b7      	b.n	8005f18 <floor+0x48>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005fae:	fa03 f606 	lsl.w	r6, r3, r6
 8005fb2:	4435      	add	r5, r6
 8005fb4:	4545      	cmp	r5, r8
 8005fb6:	bf38      	it	cc
 8005fb8:	18e4      	addcc	r4, r4, r3
 8005fba:	e7f2      	b.n	8005fa2 <floor+0xd2>
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	462c      	mov	r4, r5
 8005fc0:	e7aa      	b.n	8005f18 <floor+0x48>
 8005fc2:	bf00      	nop
 8005fc4:	f3af 8000 	nop.w
 8005fc8:	8800759c 	.word	0x8800759c
 8005fcc:	7e37e43c 	.word	0x7e37e43c
 8005fd0:	bff00000 	.word	0xbff00000
 8005fd4:	000fffff 	.word	0x000fffff

08005fd8 <matherr>:
 8005fd8:	2000      	movs	r0, #0
 8005fda:	4770      	bx	lr
 8005fdc:	0000      	movs	r0, r0
	...

08005fe0 <nan>:
 8005fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005fe8 <nan+0x8>
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	00000000 	.word	0x00000000
 8005fec:	7ff80000 	.word	0x7ff80000

08005ff0 <rint>:
 8005ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff2:	ec51 0b10 	vmov	r0, r1, d0
 8005ff6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ffa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005ffe:	2e13      	cmp	r6, #19
 8006000:	460b      	mov	r3, r1
 8006002:	ee10 4a10 	vmov	r4, s0
 8006006:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800600a:	dc56      	bgt.n	80060ba <rint+0xca>
 800600c:	2e00      	cmp	r6, #0
 800600e:	da2b      	bge.n	8006068 <rint+0x78>
 8006010:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006014:	4302      	orrs	r2, r0
 8006016:	d023      	beq.n	8006060 <rint+0x70>
 8006018:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800601c:	4302      	orrs	r2, r0
 800601e:	4254      	negs	r4, r2
 8006020:	4314      	orrs	r4, r2
 8006022:	0c4b      	lsrs	r3, r1, #17
 8006024:	0b24      	lsrs	r4, r4, #12
 8006026:	045b      	lsls	r3, r3, #17
 8006028:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800602c:	ea44 0103 	orr.w	r1, r4, r3
 8006030:	460b      	mov	r3, r1
 8006032:	492f      	ldr	r1, [pc, #188]	; (80060f0 <rint+0x100>)
 8006034:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006038:	e9d1 6700 	ldrd	r6, r7, [r1]
 800603c:	4602      	mov	r2, r0
 800603e:	4639      	mov	r1, r7
 8006040:	4630      	mov	r0, r6
 8006042:	f7fa f8cf 	bl	80001e4 <__adddf3>
 8006046:	e9cd 0100 	strd	r0, r1, [sp]
 800604a:	463b      	mov	r3, r7
 800604c:	4632      	mov	r2, r6
 800604e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006052:	f7fa f8c5 	bl	80001e0 <__aeabi_dsub>
 8006056:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800605a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800605e:	4639      	mov	r1, r7
 8006060:	ec41 0b10 	vmov	d0, r0, r1
 8006064:	b003      	add	sp, #12
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006068:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <rint+0x104>)
 800606a:	4132      	asrs	r2, r6
 800606c:	ea01 0702 	and.w	r7, r1, r2
 8006070:	4307      	orrs	r7, r0
 8006072:	d0f5      	beq.n	8006060 <rint+0x70>
 8006074:	0852      	lsrs	r2, r2, #1
 8006076:	4011      	ands	r1, r2
 8006078:	430c      	orrs	r4, r1
 800607a:	d00b      	beq.n	8006094 <rint+0xa4>
 800607c:	ea23 0202 	bic.w	r2, r3, r2
 8006080:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006084:	2e13      	cmp	r6, #19
 8006086:	fa43 f306 	asr.w	r3, r3, r6
 800608a:	bf0c      	ite	eq
 800608c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006090:	2400      	movne	r4, #0
 8006092:	4313      	orrs	r3, r2
 8006094:	4916      	ldr	r1, [pc, #88]	; (80060f0 <rint+0x100>)
 8006096:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800609a:	4622      	mov	r2, r4
 800609c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa f89e 	bl	80001e4 <__adddf3>
 80060a8:	e9cd 0100 	strd	r0, r1, [sp]
 80060ac:	4622      	mov	r2, r4
 80060ae:	462b      	mov	r3, r5
 80060b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b4:	f7fa f894 	bl	80001e0 <__aeabi_dsub>
 80060b8:	e7d2      	b.n	8006060 <rint+0x70>
 80060ba:	2e33      	cmp	r6, #51	; 0x33
 80060bc:	dd07      	ble.n	80060ce <rint+0xde>
 80060be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80060c2:	d1cd      	bne.n	8006060 <rint+0x70>
 80060c4:	ee10 2a10 	vmov	r2, s0
 80060c8:	f7fa f88c 	bl	80001e4 <__adddf3>
 80060cc:	e7c8      	b.n	8006060 <rint+0x70>
 80060ce:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80060d2:	f04f 32ff 	mov.w	r2, #4294967295
 80060d6:	40f2      	lsrs	r2, r6
 80060d8:	4210      	tst	r0, r2
 80060da:	d0c1      	beq.n	8006060 <rint+0x70>
 80060dc:	0852      	lsrs	r2, r2, #1
 80060de:	4210      	tst	r0, r2
 80060e0:	bf1f      	itttt	ne
 80060e2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80060e6:	ea20 0202 	bicne.w	r2, r0, r2
 80060ea:	4134      	asrne	r4, r6
 80060ec:	4314      	orrne	r4, r2
 80060ee:	e7d1      	b.n	8006094 <rint+0xa4>
 80060f0:	08006488 	.word	0x08006488
 80060f4:	000fffff 	.word	0x000fffff

080060f8 <scalbn>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	ec55 4b10 	vmov	r4, r5, d0
 80060fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006102:	4606      	mov	r6, r0
 8006104:	462b      	mov	r3, r5
 8006106:	b9aa      	cbnz	r2, 8006134 <scalbn+0x3c>
 8006108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800610c:	4323      	orrs	r3, r4
 800610e:	d03b      	beq.n	8006188 <scalbn+0x90>
 8006110:	4b31      	ldr	r3, [pc, #196]	; (80061d8 <scalbn+0xe0>)
 8006112:	4629      	mov	r1, r5
 8006114:	2200      	movs	r2, #0
 8006116:	ee10 0a10 	vmov	r0, s0
 800611a:	f7fa fa19 	bl	8000550 <__aeabi_dmul>
 800611e:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <scalbn+0xe4>)
 8006120:	429e      	cmp	r6, r3
 8006122:	4604      	mov	r4, r0
 8006124:	460d      	mov	r5, r1
 8006126:	da12      	bge.n	800614e <scalbn+0x56>
 8006128:	a327      	add	r3, pc, #156	; (adr r3, 80061c8 <scalbn+0xd0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa0f 	bl	8000550 <__aeabi_dmul>
 8006132:	e009      	b.n	8006148 <scalbn+0x50>
 8006134:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006138:	428a      	cmp	r2, r1
 800613a:	d10c      	bne.n	8006156 <scalbn+0x5e>
 800613c:	ee10 2a10 	vmov	r2, s0
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f84e 	bl	80001e4 <__adddf3>
 8006148:	4604      	mov	r4, r0
 800614a:	460d      	mov	r5, r1
 800614c:	e01c      	b.n	8006188 <scalbn+0x90>
 800614e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006152:	460b      	mov	r3, r1
 8006154:	3a36      	subs	r2, #54	; 0x36
 8006156:	4432      	add	r2, r6
 8006158:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800615c:	428a      	cmp	r2, r1
 800615e:	dd0b      	ble.n	8006178 <scalbn+0x80>
 8006160:	ec45 4b11 	vmov	d1, r4, r5
 8006164:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80061d0 <scalbn+0xd8>
 8006168:	f000 f83c 	bl	80061e4 <copysign>
 800616c:	a318      	add	r3, pc, #96	; (adr r3, 80061d0 <scalbn+0xd8>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	ec51 0b10 	vmov	r0, r1, d0
 8006176:	e7da      	b.n	800612e <scalbn+0x36>
 8006178:	2a00      	cmp	r2, #0
 800617a:	dd08      	ble.n	800618e <scalbn+0x96>
 800617c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006180:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006184:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006188:	ec45 4b10 	vmov	d0, r4, r5
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006192:	da0d      	bge.n	80061b0 <scalbn+0xb8>
 8006194:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006198:	429e      	cmp	r6, r3
 800619a:	ec45 4b11 	vmov	d1, r4, r5
 800619e:	dce1      	bgt.n	8006164 <scalbn+0x6c>
 80061a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80061c8 <scalbn+0xd0>
 80061a4:	f000 f81e 	bl	80061e4 <copysign>
 80061a8:	a307      	add	r3, pc, #28	; (adr r3, 80061c8 <scalbn+0xd0>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	e7e0      	b.n	8006172 <scalbn+0x7a>
 80061b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061b4:	3236      	adds	r2, #54	; 0x36
 80061b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061be:	4620      	mov	r0, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	2200      	movs	r2, #0
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <scalbn+0xe8>)
 80061c6:	e7b2      	b.n	800612e <scalbn+0x36>
 80061c8:	c2f8f359 	.word	0xc2f8f359
 80061cc:	01a56e1f 	.word	0x01a56e1f
 80061d0:	8800759c 	.word	0x8800759c
 80061d4:	7e37e43c 	.word	0x7e37e43c
 80061d8:	43500000 	.word	0x43500000
 80061dc:	ffff3cb0 	.word	0xffff3cb0
 80061e0:	3c900000 	.word	0x3c900000

080061e4 <copysign>:
 80061e4:	ec51 0b10 	vmov	r0, r1, d0
 80061e8:	ee11 0a90 	vmov	r0, s3
 80061ec:	ee10 2a10 	vmov	r2, s0
 80061f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80061f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80061f8:	ea41 0300 	orr.w	r3, r1, r0
 80061fc:	ec43 2b10 	vmov	d0, r2, r3
 8006200:	4770      	bx	lr
	...

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
